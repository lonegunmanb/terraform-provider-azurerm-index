package github.com/hashicorp/terraform-provider-azurerm/internal/provider/framework
import (
	"context"
	"encoding/base64"
	"fmt"
	"os"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
)
func getOidcToken(d *ProviderModel) (*string, error) {
	idToken := getEnvStringOrDefault(d.OIDCToken, "ARM_OIDC_TOKEN", "")

	if path := getEnvStringOrDefault(d.OIDCTokenFilePath, "ARM_OIDC_TOKEN_FILE_PATH", ""); path != "" {
		fileTokenRaw, err := os.ReadFile(path)
		if err != nil {
			return nil, fmt.Errorf("reading OIDC Token from file %q: %v", path, err)
		}

		fileToken := strings.TrimSpace(string(fileTokenRaw))

		if idToken != "" && idToken != fileToken {
			return nil, fmt.Errorf("mismatch between supplied OIDC token and supplied OIDC token file contents - please either remove one or ensure they match")
		}

		idToken = fileToken
	}

	if getEnvBoolIfValueAbsent(d.UseAKSWorkloadIdentity, "ARM_USE_AKS_WORKLOAD_IDENTITY") && os.Getenv("AZURE_FEDERATED_TOKEN_FILE") != "" {
		path := os.Getenv("AZURE_FEDERATED_TOKEN_FILE")
		fileTokenRaw, err := os.ReadFile(path)
		if err != nil {
			return nil, fmt.Errorf("reading OIDC Token from file %q provided by AKS Workload Identity: %v", path, err)
		}

		fileToken := strings.TrimSpace(string(fileTokenRaw))

		if idToken != "" && idToken != fileToken {
			return nil, fmt.Errorf("mismatch between supplied OIDC token and OIDC token file contents provided by AKS Workload Identity - please either remove one, ensure they match, or disable use_aks_workload_identity")
		}

		idToken = fileToken
	}

	return &idToken, nil
}
