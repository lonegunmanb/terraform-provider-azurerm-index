package github.com/hashicorp/terraform-provider-azurerm/internal/provider
import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/sdk/auth"
	"github.com/hashicorp/go-azure-sdk/sdk/environments"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func providerConfigure(p *schema.Provider) schema.ConfigureContextFunc {
	return func(ctx context.Context, d *schema.ResourceData) (interface{}, diag.Diagnostics) {
		subscriptionId := d.Get("subscription_id").(string)
		if subscriptionId == "" {
			if !d.Get("use_cli").(bool) {
				return nil, diag.FromErr(fmt.Errorf("`subscription_id` is a required provider property when performing a plan/apply operation"))
			}
		}

		var auxTenants []string
		if v, ok := d.Get("auxiliary_tenant_ids").([]interface{}); ok && len(v) > 0 {
			auxTenants = *utils.ExpandStringSlice(v)
		} else if v := os.Getenv("ARM_AUXILIARY_TENANT_IDS"); v != "" {
			auxTenants = strings.Split(v, ";")
		}

		if len(auxTenants) > 3 {
			return nil, diag.Errorf("the provider only supports up to 3 auxiliary tenant IDs")
		}

		var clientCertificateData []byte
		if encodedCert := d.Get("client_certificate").(string); encodedCert != "" {
			var err error
			clientCertificateData, err = decodeCertificate(encodedCert)
			if err != nil {
				return nil, diag.FromErr(err)
			}
		}

		oidcToken, err := getOidcToken(d)
		if err != nil {
			return nil, diag.FromErr(err)
		}

		clientSecret, err := getClientSecret(d)
		if err != nil {
			return nil, diag.FromErr(err)
		}

		clientId, err := getClientId(d)
		if err != nil {
			return nil, diag.FromErr(err)
		}

		tenantId, err := getTenantId(d)
		if err != nil {
			return nil, diag.FromErr(err)
		}

		var (
			env *environments.Environment

			envName      = d.Get("environment").(string)
			metadataHost = d.Get("metadata_host").(string)
		)

		if metadataHost != "" {
			logEntry("[DEBUG] Configuring cloud environment from Metadata Service at %q", metadataHost)
			if env, err = environments.FromEndpoint(ctx, fmt.Sprintf("https://%s", metadataHost)); err != nil {
				return nil, diag.FromErr(err)
			}
		} else {
			logEntry("[DEBUG] Configuring built-in cloud environment by name: %q", envName)
			if env, err = environments.FromName(envName); err != nil {
				return nil, diag.FromErr(err)
			}
		}

		var (
			enableAzureCli        = d.Get("use_cli").(bool)
			enableManagedIdentity = d.Get("use_msi").(bool)
			enableOidc            = d.Get("use_oidc").(bool) || d.Get("use_aks_workload_identity").(bool)
		)

		authConfig := &auth.Credentials{
			Environment:        *env,
			ClientID:           *clientId,
			TenantID:           *tenantId,
			AuxiliaryTenantIDs: auxTenants,

			ClientCertificateData:     clientCertificateData,
			ClientCertificatePath:     d.Get("client_certificate_path").(string),
			ClientCertificatePassword: d.Get("client_certificate_password").(string),
			ClientSecret:              *clientSecret,

			OIDCAssertionToken:    *oidcToken,
			OIDCTokenRequestURL:   d.Get("oidc_request_url").(string),
			OIDCTokenRequestToken: d.Get("oidc_request_token").(string),

			ADOPipelineServiceConnectionID: d.Get("ado_pipeline_service_connection_id").(string),

			CustomManagedIdentityEndpoint:   d.Get("msi_endpoint").(string),
			CustomManagedIdentityAPIVersion: d.Get("msi_api_version").(string),

			AzureCliSubscriptionIDHint: subscriptionId,

			EnableAuthenticatingUsingClientCertificate: true,
			EnableAuthenticatingUsingClientSecret:      true,
			EnableAuthenticatingUsingAzureCLI:          enableAzureCli,
			EnableAuthenticatingUsingManagedIdentity:   enableManagedIdentity,
			EnableAuthenticationUsingOIDC:              enableOidc,
			EnableAuthenticationUsingGitHubOIDC:        enableOidc,
			EnableAuthenticationUsingADOPipelineOIDC:   enableOidc,
		}

		return buildClient(ctx, p, d, authConfig)
	}
}
