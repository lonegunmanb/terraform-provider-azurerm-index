package github.com/hashicorp/terraform-provider-azurerm/internal/provider
import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/sdk/auth"
	"github.com/hashicorp/go-azure-sdk/sdk/environments"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func ValidatePartnerID(i interface{}, k string) ([]string, []error) {
	// ValidatePartnerID checks if partner_id is any of the following:
	//  * a valid UUID - will add "pid-" prefix to the ID if it is not already present
	//  * a valid UUID prefixed with "pid-"
	//  * a valid UUID prefixed with "pid-" and suffixed with "-partnercenter"

	v, ok := i.(string)
	if !ok {
		return nil, []error{fmt.Errorf("expected type of %q to be string", k)}
	}

	if v == "" {
		return nil, nil
	}

	// Check for pid=<guid>-partnercenter format
	if strings.HasPrefix(v, "pid-") && strings.HasSuffix(v, "-partnercenter") {
		g := strings.TrimPrefix(v, "pid-")
		g = strings.TrimSuffix(g, "-partnercenter")

		if _, err := validation.IsUUID(g, ""); err != nil {
			return nil, []error{fmt.Errorf("expected %q to contain a valid UUID", v)}
		}

		logEntry("[DEBUG] %q partner_id matches pid-<GUID>-partnercenter...", v)
		return nil, nil
	}

	// Check for pid=<guid> (without the -partnercenter suffix)
	if strings.HasPrefix(v, "pid-") && !strings.HasSuffix(v, "-partnercenter") {
		g := strings.TrimPrefix(v, "pid-")

		if _, err := validation.IsUUID(g, ""); err != nil {
			return nil, []error{fmt.Errorf("expected %q to be a valid UUID", k)}
		}

		logEntry("[DEBUG] %q partner_id matches pid-<GUID>...", v)
		return nil, nil
	}

	// Check for straight UUID
	if _, err := validation.IsUUID(v, ""); err != nil {
		return nil, []error{fmt.Errorf("expected %q to be a valid UUID", k)}
	} else {
		logEntry("[DEBUG] %q partner_id is an un-prefixed UUID...", v)
		return nil, nil
	}
}
