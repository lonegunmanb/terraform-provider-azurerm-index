package github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk
import (
	"context"
	"log"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)
func ImporterValidatingIdentityThen(id resourceids.ResourceId, thenFunc ImporterFunc, idType ...ResourceTypeForIdentity) *schema.ResourceImporter {
	return &schema.ResourceImporter{
		StateContext: func(ctx context.Context, d *ResourceData, meta interface{}) ([]*ResourceData, error) {
			log.Printf("[DEBUG] Importing Resource - parsing %q", d.Id())

			if _, ok := ctx.Deadline(); !ok {
				var cancel context.CancelFunc
				ctx, cancel = context.WithTimeout(ctx, d.Timeout(schema.TimeoutRead))
				defer cancel()
			}

			if d.Id() != "" {
				parser := resourceids.NewParserFromResourceIdType(id)
				if _, err := parser.Parse(d.Id(), false); err != nil {
					// NOTE: we're intentionally not wrapping this error, since it's prefixed with `parsing %q:`
					return []*ResourceData{d}, err
				}
				return thenFunc(ctx, d, meta)
			}

			if err := ValidateResourceIdentityData(d, id, idType...); err != nil {
				return nil, err
			}

			return thenFunc(ctx, d, meta)
		},
	}
}
