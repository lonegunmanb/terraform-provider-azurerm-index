package github.com/hashicorp/terraform-provider-azurerm/internal/sdk
import (
	"context"
	"fmt"

	"github.com/hashicorp/go-azure-helpers/framework/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/list"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)
func (r *FrameworkResourceWrapper) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	if fr, ok := r.FrameworkWrappedResource.(FrameworkWrappedResourceWithUpdate); ok {
		customTimeouts := timeouts.Value{}
		response.Diagnostics.Append(request.Config.GetAttribute(ctx, path.Root("timeouts"), &customTimeouts)...)
		if response.Diagnostics.HasError() {
			return
		}

		updateTimeout, diags := customTimeouts.Update(ctx, *r.ResourceMetadata.TimeoutUpdate)
		if diags.HasError() {
			response.Diagnostics.Append(diags...)
			return
		}

		ctx, cancel := context.WithTimeout(ctx, updateTimeout)
		defer cancel()

		plan := r.FrameworkWrappedResource.ModelObject()
		state := r.FrameworkWrappedResource.ModelObject()

		r.ResourceMetadata.DecodeUpdate(ctx, request, response, plan, state)
		if response.Diagnostics.HasError() {
			return
		}

		fr.Update(ctx, request, response, r.ResourceMetadata, plan, state)

		r.ResourceMetadata.EncodeUpdate(ctx, response, plan)

		return
	} else {
		SetResponseErrorDiagnostic(response, "Update called on non-updatable resource", fmt.Sprintf("resource type %s does not implement Update", r.FrameworkWrappedResource.ResourceType()))
	}
}
