package github.com/hashicorp/terraform-provider-azurerm/internal/sdk/frameworkhelpers
import (
	"context"
	"fmt"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/defaults"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)
func (w WrappedStringValidator) ValidateString(_ context.Context, request validator.StringRequest, response *validator.StringResponse) {
	if request.ConfigValue.IsNull() || request.ConfigValue.IsUnknown() {
		return
	}

	value := request.ConfigValue.ValueString()
	path := request.Path.String()
	warnings, err := w.Func(value, path)
	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("invalid value for %s", path), fmt.Sprintf("%+v", err))
		return
	}

	if len(warnings) > 0 { // This may be redundant - legacy validators never really used warnings.
		for _, v := range warnings {
			response.Diagnostics.Append(diag.NewWarningDiagnostic(fmt.Sprintf("validating %s", path), v))
		}
	}
}
