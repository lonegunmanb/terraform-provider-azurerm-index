package github.com/hashicorp/terraform-provider-azurerm/internal/sdk
import (
	"context"

	"github.com/hashicorp/go-azure-helpers/framework/commonschema"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/datasource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
)
func (d *FrameworkDataSourceWrapper) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	customTimeouts := timeouts.Value{}
	response.Diagnostics.Append(request.Config.GetAttribute(ctx, path.Root("timeouts"), &customTimeouts)...)
	if response.Diagnostics.HasError() {
		return
	}

	readTimeout, diags := customTimeouts.Read(ctx, d.ResourceMetadata.TimeoutRead)
	if diags.HasError() {
		response.Diagnostics.Append(diags...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, readTimeout)
	defer cancel()

	config := d.FrameworkWrappedDataSource.ModelObject()

	d.ResourceMetadata.DecodeDataSourceRead(ctx, request, response, config)
	if response.Diagnostics.HasError() {
		return
	}

	d.FrameworkWrappedDataSource.Read(ctx, request, response, d.ResourceMetadata, config)

	d.ResourceMetadata.EncodeDataSourceRead(ctx, response, config)
}
