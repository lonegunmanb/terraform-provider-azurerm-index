package github.com/hashicorp/terraform-provider-azurerm/internal/sdk
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
	"github.com/hashicorp/terraform-plugin-framework/action"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/list"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
)
func SetResponseErrorDiagnostic(resp any, summary string, detail any) {
	var errorMsg string
	switch e := detail.(type) {
	case error:
		errorMsg = e.Error()
	case string:
		errorMsg = e
	}
	switch v := resp.(type) {
	case *resource.CreateResponse:
		v.Diagnostics.AddError(summary, errorMsg)
	case *resource.UpdateResponse:
		v.Diagnostics.AddError(summary, errorMsg)
	case *resource.DeleteResponse:
		v.Diagnostics.AddError(summary, errorMsg)
	case *resource.ReadResponse:
		v.Diagnostics.AddError(summary, errorMsg)
	case *ephemeral.OpenResponse:
		v.Diagnostics.AddError(summary, errorMsg)
	case *ephemeral.RenewResponse:
		v.Diagnostics.AddError(summary, errorMsg)
	case *ephemeral.CloseResponse:
		v.Diagnostics.AddError(summary, errorMsg)
	case *action.InvokeResponse:
		v.Diagnostics.AddError(summary, errorMsg)
	case *list.ListResultsStream:
		diags := diag.Diagnostics{}
		diags.Append(diag.NewErrorDiagnostic(summary, errorMsg))
		v.Results = list.ListResultsStreamDiagnostics(diags)
	}
}
