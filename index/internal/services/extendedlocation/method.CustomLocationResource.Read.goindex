package github.com/hashicorp/terraform-provider-azurerm/internal/services/extendedlocation
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/extendedlocation/2021-08-15/customlocations"
	arckubernetes "github.com/hashicorp/go-azure-sdk/resource-manager/hybridkubernetes/2021-10-01/connectedclusters"
	"github.com/hashicorp/go-azure-sdk/resource-manager/kubernetesconfiguration/2022-11-01/extensions"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r CustomLocationResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.ExtendedLocation.CustomLocationsClient
			id, err := customlocations.ParseCustomLocationID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			if model := resp.Model; model != nil {
				props := model.Properties

				state := CustomLocationResourceModel{
					Name:                id.CustomLocationName,
					ResourceGroupName:   id.ResourceGroupName,
					Location:            model.Location,
					ClusterExtensionIds: pointer.From(props.ClusterExtensionIds),
					DisplayName:         pointer.From(props.DisplayName),
					HostResourceId:      pointer.From(props.HostResourceId),
					HostType:            string(pointer.From(props.HostType)),
					Namespace:           pointer.From(props.Namespace),
				}

				// API always returns an empty `authentication` block even it's not specified. Tracing the bug: https://github.com/Azure/azure-rest-api-specs/issues/30101
				if props.Authentication != nil && props.Authentication.Type != nil && props.Authentication.Value != nil {
					state.Authentication = []AuthModel{
						{
							Type:  pointer.From(props.Authentication.Type),
							Value: pointer.From(props.Authentication.Value),
						},
					}
				}

				return metadata.Encode(&state)
			}
			return nil
		},
	}
}
