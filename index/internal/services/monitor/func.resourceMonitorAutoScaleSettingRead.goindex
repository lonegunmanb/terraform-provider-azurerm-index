package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2022-10-01/autoscalesettings"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceMonitorAutoScaleSettingRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Monitor.AutoscaleSettingsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := autoscalesettings.ParseAutoScaleSettingID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] %s was not found - removing from state!", *id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("reading Monitor %s: %+v", *id, err)
	}

	d.Set("name", id.AutoScaleSettingName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		props := model.Properties

		d.Set("location", azure.NormalizeLocation(model.Location))
		d.Set("enabled", props.Enabled)
		d.Set("target_resource_id", props.TargetResourceUri)

		profile, err := flattenAzureRmMonitorAutoScaleSettingProfile(props.Profiles)
		if err != nil {
			return fmt.Errorf("flattening `profile` of %s: %+v", *id, err)
		}
		if err = d.Set("profile", profile); err != nil {
			return fmt.Errorf("setting `profile` of %s: %+v", *id, err)
		}

		if err = d.Set("predictive", flattenAzureRmMonitorAutoScaleSettingPredictive(props.PredictiveAutoscalePolicy)); err != nil {
			return fmt.Errorf("setting `predictive_scale_mode` of %s: %+v", *id, err)
		}

		notifications := flattenAzureRmMonitorAutoScaleSettingNotification(props.Notifications)
		if err = d.Set("notification", notifications); err != nil {
			return fmt.Errorf("setting `notification` of %s: %+v", *id, err)
		}

		// Return a new tag map filtered by the specified tag names.
		tagMap := tags.Filter(model.Tags, "$type")

		if err = d.Set("tags", utils.FlattenPtrMapStringString(tagMap)); err != nil {
			return err
		}
	}
	return nil
}
