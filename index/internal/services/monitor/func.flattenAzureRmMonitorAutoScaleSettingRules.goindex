package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2022-10-01/autoscalesettings"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenAzureRmMonitorAutoScaleSettingRules(input []autoscalesettings.ScaleRule) ([]interface{}, error) {
	if input == nil {
		return []interface{}{}, nil
	}

	results := make([]interface{}, 0)
	for _, rule := range input {
		result := make(map[string]interface{})

		metricTriggers := make([]interface{}, 0)
		var metricNamespace string
		var dividePerInstance bool

		if v := rule.MetricTrigger.MetricNamespace; v != nil {
			metricNamespace = *v
		}

		if rule.MetricTrigger.DividePerInstance != nil {
			dividePerInstance = *rule.MetricTrigger.DividePerInstance
		}

		metricTriggers = append(metricTriggers, map[string]interface{}{
			"metric_name":              rule.MetricTrigger.MetricName,
			"metric_namespace":         metricNamespace,
			"metric_resource_id":       rule.MetricTrigger.MetricResourceUri,
			"time_grain":               rule.MetricTrigger.TimeGrain,
			"statistic":                string(rule.MetricTrigger.Statistic),
			"time_window":              rule.MetricTrigger.TimeWindow,
			"time_aggregation":         string(rule.MetricTrigger.TimeAggregation),
			"operator":                 string(rule.MetricTrigger.Operator),
			"threshold":                rule.MetricTrigger.Threshold,
			"dimensions":               flattenAzureRmMonitorAutoScaleSettingRulesDimensions(rule.MetricTrigger.Dimensions),
			"divide_by_instance_count": dividePerInstance,
		})

		result["metric_trigger"] = metricTriggers

		scaleActions := make([]interface{}, 0)
		v := rule.ScaleAction
		action := make(map[string]interface{})

		action["direction"] = string(v.Direction)
		action["type"] = string(v.Type)
		action["cooldown"] = v.Cooldown

		if val := v.Value; val != nil && *val != "" {
			i, err := strconv.Atoi(*val)
			if err != nil {
				return nil, fmt.Errorf("`value` %q was not convertable to an int: %s", *val, err)
			}
			action["value"] = i
		}

		scaleActions = append(scaleActions, action)

		result["scale_action"] = scaleActions

		results = append(results, result)
	}

	return results, nil
}
