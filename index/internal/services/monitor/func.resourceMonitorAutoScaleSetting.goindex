package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2022-10-01/autoscalesettings"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceMonitorAutoScaleSetting() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceMonitorAutoScaleSettingCreateUpdate,
		Read:   resourceMonitorAutoScaleSettingRead,
		Update: resourceMonitorAutoScaleSettingCreateUpdate,
		Delete: resourceMonitorAutoScaleSettingDelete,

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := autoscalesettings.ParseAutoScaleSettingID(id)
			return err
		}),

		SchemaVersion: 2,
		StateUpgraders: pluginsdk.StateUpgrades(map[int]pluginsdk.StateUpgrade{
			0: migration.AutoscaleSettingUpgradeV0ToV1{},
			1: migration.AutoscaleSettingUpgradeV1ToV2{},
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validation.StringIsNotEmpty,
			},

			"resource_group_name": commonschema.ResourceGroupName(),

			"location": commonschema.Location(),

			"target_resource_id": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: azure.ValidateResourceID,
			},

			"enabled": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Default:  true,
			},

			"predictive": {
				Type:     pluginsdk.TypeList,
				MaxItems: 1,
				MinItems: 1,
				Optional: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"scale_mode": {
							Type:     pluginsdk.TypeString,
							Required: true,
							// Disabled is not exposed, omission of this block to mean disabled
							ValidateFunc: validation.StringInSlice([]string{
								string(autoscalesettings.PredictiveAutoscalePolicyScaleModeEnabled),
								string(autoscalesettings.PredictiveAutoscalePolicyScaleModeForecastOnly),
							}, false),
						},

						"look_ahead_time": {
							Type:         pluginsdk.TypeString,
							Optional:     true,
							ValidateFunc: validate.ISO8601DurationBetween("PT1M", "PT1H"),
						},
					},
				},
			},

			"profile": {
				Type:     pluginsdk.TypeList,
				Required: true,
				MaxItems: 20,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"name": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},
						"capacity": {
							Type:     pluginsdk.TypeList,
							Required: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"minimum": {
										Type:         pluginsdk.TypeInt,
										Required:     true,
										ValidateFunc: validation.IntBetween(0, 1000),
									},
									"maximum": {
										Type:         pluginsdk.TypeInt,
										Required:     true,
										ValidateFunc: validation.IntBetween(0, 1000),
									},
									"default": {
										Type:         pluginsdk.TypeInt,
										Required:     true,
										ValidateFunc: validation.IntBetween(0, 1000),
									},
								},
							},
						},
						"rule": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							MaxItems: 10,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"metric_trigger": {
										Type:     pluginsdk.TypeList,
										Required: true,
										MaxItems: 1,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"metric_name": {
													Type:         pluginsdk.TypeString,
													Required:     true,
													ValidateFunc: validation.StringIsNotEmpty,
												},
												"metric_resource_id": {
													Type:         pluginsdk.TypeString,
													Required:     true,
													ValidateFunc: azure.ValidateResourceID,
												},
												"time_grain": {
													Type:         pluginsdk.TypeString,
													Required:     true,
													ValidateFunc: validate.ISO8601Duration,
												},
												"statistic": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(autoscalesettings.MetricStatisticTypeAverage),
														string(autoscalesettings.MetricStatisticTypeMax),
														string(autoscalesettings.MetricStatisticTypeMin),
														string(autoscalesettings.MetricStatisticTypeSum),
													}, false),
												},
												"time_window": {
													Type:         pluginsdk.TypeString,
													Required:     true,
													ValidateFunc: validate.ISO8601Duration,
												},
												"time_aggregation": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(autoscalesettings.TimeAggregationTypeAverage),
														string(autoscalesettings.TimeAggregationTypeCount),
														string(autoscalesettings.TimeAggregationTypeMaximum),
														string(autoscalesettings.TimeAggregationTypeMinimum),
														string(autoscalesettings.TimeAggregationTypeTotal),
														string(autoscalesettings.TimeAggregationTypeLast),
													}, false),
												},
												"operator": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(autoscalesettings.ComparisonOperationTypeEquals),
														string(autoscalesettings.ComparisonOperationTypeGreaterThan),
														string(autoscalesettings.ComparisonOperationTypeGreaterThanOrEqual),
														string(autoscalesettings.ComparisonOperationTypeLessThan),
														string(autoscalesettings.ComparisonOperationTypeLessThanOrEqual),
														string(autoscalesettings.ComparisonOperationTypeNotEquals),
													}, false),
												},
												"threshold": {
													Type:     pluginsdk.TypeFloat,
													Required: true,
												},

												"metric_namespace": {
													Type:         pluginsdk.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsNotEmpty,
												},

												"divide_by_instance_count": {
													Type:     pluginsdk.TypeBool,
													Optional: true,
												},

												"dimensions": {
													Type:     pluginsdk.TypeList,
													Optional: true,
													Elem: &pluginsdk.Resource{
														Schema: map[string]*pluginsdk.Schema{
															"name": {
																Type:         pluginsdk.TypeString,
																Required:     true,
																ValidateFunc: validation.StringIsNotEmpty,
															},

															"operator": {
																Type:     pluginsdk.TypeString,
																Required: true,
																ValidateFunc: validation.StringInSlice([]string{
																	string(autoscalesettings.ScaleRuleMetricDimensionOperationTypeEquals),
																	string(autoscalesettings.ScaleRuleMetricDimensionOperationTypeNotEquals),
																}, false),
															},

															"values": {
																Type:     pluginsdk.TypeList,
																Required: true,
																Elem: &pluginsdk.Schema{
																	Type:         pluginsdk.TypeString,
																	ValidateFunc: validation.StringIsNotEmpty,
																},
															},
														},
													},
												},
											},
										},
									},
									"scale_action": {
										Type:     pluginsdk.TypeList,
										Required: true,
										MaxItems: 1,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"direction": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(autoscalesettings.ScaleDirectionDecrease),
														string(autoscalesettings.ScaleDirectionIncrease),
													}, false),
												},
												"type": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(autoscalesettings.ScaleTypeChangeCount),
														string(autoscalesettings.ScaleTypeExactCount),
														string(autoscalesettings.ScaleTypePercentChangeCount),
														string(autoscalesettings.ScaleTypeServiceAllowedNextValue),
													}, false),
												},
												"value": {
													Type:         pluginsdk.TypeInt,
													Required:     true,
													ValidateFunc: validation.IntAtLeast(0),
												},
												"cooldown": {
													Type:         pluginsdk.TypeString,
													Required:     true,
													ValidateFunc: validate.ISO8601Duration,
												},
											},
										},
									},
								},
							},
						},
						"fixed_date": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"timezone": {
										Type:         pluginsdk.TypeString,
										Optional:     true,
										Default:      "UTC",
										ValidateFunc: validateAutoScaleSettingsTimeZone(),
									},
									"start": {
										Type:         pluginsdk.TypeString,
										Required:     true,
										ValidateFunc: validation.IsRFC3339Time,
									},
									"end": {
										Type:         pluginsdk.TypeString,
										Required:     true,
										ValidateFunc: validation.IsRFC3339Time,
									},
								},
							},
						},
						"recurrence": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"timezone": {
										Type:         pluginsdk.TypeString,
										Optional:     true,
										Default:      "UTC",
										ValidateFunc: validateAutoScaleSettingsTimeZone(),
									},
									"days": {
										Type:     pluginsdk.TypeList,
										Required: true,
										Elem: &pluginsdk.Schema{
											Type: pluginsdk.TypeString,
											ValidateFunc: validation.StringInSlice([]string{
												"Monday",
												"Tuesday",
												"Wednesday",
												"Thursday",
												"Friday",
												"Saturday",
												"Sunday",
											}, false),
										},
									},
									"hours": {
										Type:     pluginsdk.TypeList,
										Required: true,
										MaxItems: 1,
										Elem: &pluginsdk.Schema{
											Type:         pluginsdk.TypeInt,
											ValidateFunc: validation.IntBetween(0, 23),
										},
									},
									"minutes": {
										Type:     pluginsdk.TypeList,
										Required: true,
										MaxItems: 1,
										Elem: &pluginsdk.Schema{
											Type:         pluginsdk.TypeInt,
											ValidateFunc: validation.IntBetween(0, 59),
										},
									},
								},
							},
						},
					},
				},
			},

			"notification": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"email": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"send_to_subscription_administrator": {
										Type:     pluginsdk.TypeBool,
										Optional: true,
										Default:  false,
									},
									"send_to_subscription_co_administrator": {
										Type:     pluginsdk.TypeBool,
										Optional: true,
										Default:  false,
									},
									"custom_emails": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type:         pluginsdk.TypeString,
											ValidateFunc: validation.StringIsNotEmpty,
										},
									},
								},
							},
							AtLeastOneOf: []string{"notification.0.email", "notification.0.webhook"},
						},
						"webhook": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"service_uri": {
										Type:         pluginsdk.TypeString,
										Required:     true,
										ValidateFunc: validation.StringIsNotEmpty,
									},
									"properties": {
										Type:     pluginsdk.TypeMap,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type: pluginsdk.TypeString,
										},
									},
								},
							},
							AtLeastOneOf: []string{"notification.0.email", "notification.0.webhook"},
						},
					},
				},
			},

			"tags": commonschema.Tags(),
		},
	}
}
