package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	authRuleParse "github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/authorizationrulesnamespaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2021-05-01-preview/diagnosticsettings"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	eventhubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/eventhub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func expandMonitorDiagnosticsSettingsMetrics(input []interface{}) []diagnosticsettings.MetricSettings {
	results := make([]diagnosticsettings.MetricSettings, 0)

	for _, raw := range input {
		v := raw.(map[string]interface{})

		output := diagnosticsettings.MetricSettings{
			Category: pointer.To(v["category"].(string)),
			Enabled:  v["enabled"].(bool),
		}

		if !features.FivePointOh() {
			policiesRaw := v["retention_policy"].([]interface{})
			var retentionPolicy *diagnosticsettings.RetentionPolicy
			if len(policiesRaw) > 0 && policiesRaw[0] != nil {
				policyRaw := policiesRaw[0].(map[string]interface{})
				retentionDays := policyRaw["days"].(int)
				retentionEnabled := policyRaw["enabled"].(bool)
				retentionPolicy = &diagnosticsettings.RetentionPolicy{
					Days:    int64(retentionDays),
					Enabled: retentionEnabled,
				}
			}
			output.RetentionPolicy = retentionPolicy
		}

		results = append(results, output)
	}

	return results
}
