package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2020-10-01/activitylogalertsapis"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandServiceHealth(serviceHealth []interface{}, conditions []activitylogalertsapis.AlertRuleAnyOfOrLeafCondition) []activitylogalertsapis.AlertRuleAnyOfOrLeafCondition {
	for _, serviceItem := range serviceHealth {
		if serviceItem == nil {
			continue
		}
		vs := serviceItem.(map[string]interface{})
		rv := vs["locations"].(*pluginsdk.Set)
		if len(rv.List()) > 0 {
			conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
				Field:       utils.String("properties.impactedServices[*].ImpactedRegions[*].RegionName"),
				ContainsAny: utils.ExpandStringSlice(rv.List()),
			})
		}

		ev := vs["events"].(*pluginsdk.Set)
		if len(ev.List()) > 0 {
			ruleLeafCondition := make([]activitylogalertsapis.AlertRuleLeafCondition, 0)
			for _, e := range ev.List() {
				event := e.(string)
				ruleLeafCondition = append(ruleLeafCondition, activitylogalertsapis.AlertRuleLeafCondition{
					Field:  utils.String("properties.incidentType"),
					Equals: utils.String(event),
				})
			}
			conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
				AnyOf: &ruleLeafCondition,
			})
		}

		sv := vs["services"].(*pluginsdk.Set)
		if len(sv.List()) > 0 {
			conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
				Field:       utils.String("properties.impactedServices[*].ServiceName"),
				ContainsAny: utils.ExpandStringSlice(sv.List()),
			})
		}
	}
	return conditions
}
