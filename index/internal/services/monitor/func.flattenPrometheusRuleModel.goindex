package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/alertsmanagement/2023-03-01/prometheusrulegroups"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenPrometheusRuleModel(inputList *[]prometheusrulegroups.PrometheusRule) []PrometheusRuleModel {
	outputList := make([]PrometheusRuleModel, 0)
	if inputList == nil {
		return outputList
	}

	for _, input := range *inputList {
		output := PrometheusRuleModel{
			Expression: input.Expression,
		}

		actionsValue := flattenPrometheusRuleGroupActionModel(input.Actions)
		output.Action = actionsValue
		output.Alert = pointer.From(input.Alert)
		output.Annotations = pointer.From(input.Annotations)
		output.Enabled = pointer.From(input.Enabled)
		output.For = pointer.From(input.For)
		output.Labels = pointer.From(input.Labels)
		output.Record = pointer.From(input.Record)
		resolveConfigurationValue := flattenPrometheusRuleAlertResolutionModel(input.ResolveConfiguration)
		output.AlertResolution = resolveConfigurationValue
		output.Severity = pointer.From(input.Severity)
		outputList = append(outputList, output)
	}

	return outputList
}
