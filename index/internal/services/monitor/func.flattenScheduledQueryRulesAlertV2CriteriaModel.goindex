package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2023-03-15-preview/scheduledqueryrules"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenScheduledQueryRulesAlertV2CriteriaModel(input *scheduledqueryrules.ScheduledQueryRuleCriteria) []ScheduledQueryRulesAlertV2CriteriaModel {
	if input == nil || input.AllOf == nil {
		return []ScheduledQueryRulesAlertV2CriteriaModel{}
	}

	outputList := make([]ScheduledQueryRulesAlertV2CriteriaModel, 0, len(*input.AllOf))
	for _, v := range *input.AllOf {
		output := ScheduledQueryRulesAlertV2CriteriaModel{}

		output.Dimensions = flattenScheduledQueryRulesAlertV2DimensionModel(v.Dimensions)
		output.FailingPeriods = flattenScheduledQueryRulesAlertV2FailingPeriodsModel(v.FailingPeriods)

		if v.MetricMeasureColumn != nil {
			output.MetricMeasureColumn = *v.MetricMeasureColumn
		}

		if v.Operator != nil {
			output.Operator = *v.Operator
		}

		if v.Query != nil {
			output.Query = *v.Query
		}

		if v.ResourceIdColumn != nil {
			output.ResourceIdColumn = *v.ResourceIdColumn
		}

		if v.Threshold != nil {
			output.Threshold = *v.Threshold
		}

		if v.TimeAggregation != nil {
			output.TimeAggregation = *v.TimeAggregation
		}

		outputList = append(outputList, output)
	}

	return outputList
}
