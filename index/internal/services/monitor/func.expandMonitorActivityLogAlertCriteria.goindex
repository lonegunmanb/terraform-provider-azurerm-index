package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2020-10-01/activitylogalertsapis"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandMonitorActivityLogAlertCriteria(input []interface{}) activitylogalertsapis.AlertRuleAllOfCondition {
	conditions := make([]activitylogalertsapis.AlertRuleAnyOfOrLeafCondition, 0)
	v := input[0].(map[string]interface{})

	if category := v["category"].(string); category != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("category"),
			Equals: utils.String(category),
		})
	}

	if op := v["operation_name"].(string); op != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("operationName"),
			Equals: utils.String(op),
		})
	}

	if caller := v["caller"].(string); caller != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("caller"),
			Equals: utils.String(caller),
		})
	}

	if level := v["level"].(string); level != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("level"),
			Equals: utils.String(level),
		})
	}

	if levels := v["levels"].([]interface{}); len(levels) > 0 {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			AnyOf: expandAnyOfCondition(levels, "level"),
		})
	}

	if resourceProvider := v["resource_provider"].(string); resourceProvider != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("resourceProvider"),
			Equals: utils.String(resourceProvider),
		})
	}

	if resourceProviders := v["resource_providers"].([]interface{}); len(resourceProviders) > 0 {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			AnyOf: expandAnyOfCondition(resourceProviders, "resourceProvider"),
		})
	}

	if resourceType := v["resource_type"].(string); resourceType != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("resourceType"),
			Equals: utils.String(resourceType),
		})
	}

	if resourceTypes := v["resource_types"].([]interface{}); len(resourceTypes) > 0 {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			AnyOf: expandAnyOfCondition(resourceTypes, "resourceType"),
		})
	}

	if resourceGroup := v["resource_group"].(string); resourceGroup != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("resourceGroup"),
			Equals: utils.String(resourceGroup),
		})
	}

	if resourceGroups := v["resource_groups"].([]interface{}); len(resourceGroups) > 0 {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			AnyOf: expandAnyOfCondition(resourceGroups, "resourceGroup"),
		})
	}

	if id := v["resource_id"].(string); id != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("resourceId"),
			Equals: utils.String(id),
		})
	}

	if resourceIds := v["resource_ids"].([]interface{}); len(resourceIds) > 0 {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			AnyOf: expandAnyOfCondition(resourceIds, "resourceId"),
		})
	}

	if status := v["status"].(string); status != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("status"),
			Equals: utils.String(status),
		})
	}

	if statuses := v["statuses"].([]interface{}); len(statuses) > 0 {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			AnyOf: expandAnyOfCondition(statuses, "status"),
		})
	}

	if subStatus := v["sub_status"].(string); subStatus != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("subStatus"),
			Equals: utils.String(subStatus),
		})
	}

	if statuses := v["sub_statuses"].([]interface{}); len(statuses) > 0 {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			AnyOf: expandAnyOfCondition(statuses, "subStatus"),
		})
	}

	if recommendationType := v["recommendation_type"].(string); recommendationType != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("properties.recommendationType"),
			Equals: utils.String(recommendationType),
		})
	}

	if recommendationCategory := v["recommendation_category"].(string); recommendationCategory != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("properties.recommendationCategory"),
			Equals: utils.String(recommendationCategory),
		})
	}

	if recommendationImpact := v["recommendation_impact"].(string); recommendationImpact != "" {
		conditions = append(conditions, activitylogalertsapis.AlertRuleAnyOfOrLeafCondition{
			Field:  utils.String("properties.recommendationImpact"),
			Equals: utils.String(recommendationImpact),
		})
	}

	if resourceHealth := v["resource_health"].([]interface{}); len(resourceHealth) > 0 {
		conditions = expandResourceHealth(resourceHealth, conditions)
	}

	if serviceHealth := v["service_health"].([]interface{}); len(serviceHealth) > 0 {
		conditions = expandServiceHealth(serviceHealth, conditions)
	}

	return activitylogalertsapis.AlertRuleAllOfCondition{
		AllOf: conditions,
	}
}
