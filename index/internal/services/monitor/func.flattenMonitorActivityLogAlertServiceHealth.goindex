package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2020-10-01/activitylogalertsapis"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenMonitorActivityLogAlertServiceHealth(input activitylogalertsapis.AlertRuleAllOfCondition, result map[string]interface{}) {
	shResult := make(map[string]interface{})
	for _, condition := range input.AllOf {
		if condition.Field != nil && condition.ContainsAny != nil && len(*condition.ContainsAny) > 0 {
			switch strings.ToLower(*condition.Field) {
			case "properties.impactedservices[*].impactedregions[*].regionname":
				shResult["locations"] = *condition.ContainsAny
			case "properties.impactedservices[*].servicename":
				shResult["services"] = *condition.ContainsAny
			}
		}
		if condition.Field == nil && condition.AnyOf != nil && len(*condition.AnyOf) > 0 {
			events := []string{}
			for _, evCond := range *condition.AnyOf {
				if evCond.Field != nil && evCond.Equals != nil {
					events = append(events, *evCond.Equals)
				}
			}
			shResult["events"] = events
		}
	}

	result["service_health"] = []interface{}{shResult}
}
