package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2020-10-01/activitylogalertsapis"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenMonitorActivityLogAlertCriteria(input activitylogalertsapis.AlertRuleAllOfCondition) []interface{} {
	result := make(map[string]interface{})
	if input.AllOf == nil {
		return []interface{}{result}
	}
	for _, condition := range input.AllOf {
		if condition.Field != nil && condition.Equals != nil {
			switch strings.ToLower(*condition.Field) {
			case "operationname":
				result["operation_name"] = *condition.Equals
			case "resourceprovider":
				result["resource_provider"] = *condition.Equals
			case "resourcetype":
				result["resource_type"] = *condition.Equals
			case "resourcegroup":
				result["resource_group"] = *condition.Equals
			case "resourceid":
				result["resource_id"] = *condition.Equals
			case "substatus":
				result["sub_status"] = *condition.Equals
			case "properties.recommendationtype":
				result["recommendation_type"] = *condition.Equals
			case "properties.recommendationcategory":
				result["recommendation_category"] = *condition.Equals
			case "properties.recommendationimpact":
				result["recommendation_impact"] = *condition.Equals
			case "caller", "category", "level", "status":
				result[*condition.Field] = *condition.Equals
			}
		}

		if condition.Field != nil && condition.ContainsAny != nil && len(*condition.ContainsAny) > 0 {
			switch strings.ToLower(*condition.Field) {
			case "resourceprovider":
				result["resource_providers"] = *condition.ContainsAny
			case "resourcetype":
				result["resource_types"] = *condition.ContainsAny
			case "resourcegroup":
				result["resource_groups"] = *condition.ContainsAny
			case "resourceid":
				result["resource_ids"] = *condition.ContainsAny
			case "substatus":
				result["sub_statuses"] = *condition.ContainsAny
			case "level":
				result["levels"] = *condition.ContainsAny
			case "status":
				result["statuses"] = *condition.ContainsAny
			}
		}

		if condition.AnyOf != nil && len(*condition.AnyOf) > 0 {
			values := make([]string, 0)
			for _, leafCondition := range *condition.AnyOf {
				if leafCondition.Field != nil && leafCondition.Equals != nil {
					values = append(values, *leafCondition.Equals)
				}
				switch strings.ToLower(*leafCondition.Field) {
				case "resourceprovider":
					result["resource_providers"] = values
				case "resourcetype":
					result["resource_types"] = values
				case "resourcegroup":
					result["resource_groups"] = values
				case "resourceid":
					result["resource_ids"] = values
				case "substatus":
					result["sub_statuses"] = values
				case "level":
					result["levels"] = values
				case "status":
					result["statuses"] = values
				}
			}
		}
	}

	if result["category"] == "ResourceHealth" {
		flattenMonitorActivityLogAlertResourceHealth(input, result)
	}

	if result["category"] == "ServiceHealth" {
		flattenMonitorActivityLogAlertServiceHealth(input, result)
	}

	return []interface{}{result}
}
