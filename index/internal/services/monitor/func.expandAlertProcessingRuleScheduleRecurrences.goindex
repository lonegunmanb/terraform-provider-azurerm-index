package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"fmt"
	"log"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/alertsmanagement/2021-08-08/alertprocessingrules"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandAlertProcessingRuleScheduleRecurrences(input []AlertProcessingRuleRecurrenceModel) *[]alertprocessingrules.Recurrence {
	if len(input) == 0 {
		return nil
	}

	recurrences := make([]alertprocessingrules.Recurrence, 0, len(input))
	v := input[0]

	for _, item := range v.Daily {
		var startTime, endTime *string
		if item.StartTime != "" {
			startTime = utils.String(item.StartTime)
		}
		if item.EndTime != "" {
			endTime = utils.String(item.EndTime)
		}

		recurrences = append(recurrences, alertprocessingrules.DailyRecurrence{
			StartTime: startTime,
			EndTime:   endTime,
		})
	}

	for _, item := range v.Weekly {
		var startTime, endTime *string
		if item.StartTime != "" {
			startTime = utils.String(item.StartTime)
		}
		if item.EndTime != "" {
			endTime = utils.String(item.EndTime)
		}

		recurrences = append(recurrences, alertprocessingrules.WeeklyRecurrence{
			StartTime:  startTime,
			EndTime:    endTime,
			DaysOfWeek: *expandAlertProcessingRuleScheduleRecurrenceDaysOfWeek(item.DaysOfWeek),
		})
	}

	for _, item := range v.Monthly {
		var startTime, endTime *string
		if item.StartTime != "" {
			startTime = utils.String(item.StartTime)
		}
		if item.EndTime != "" {
			endTime = utils.String(item.EndTime)
		}

		recurrences = append(recurrences, alertprocessingrules.MonthlyRecurrence{
			StartTime:   startTime,
			EndTime:     endTime,
			DaysOfMonth: item.DaysOfMonth,
		})
	}

	return &recurrences
}
