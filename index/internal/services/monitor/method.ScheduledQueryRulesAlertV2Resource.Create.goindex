package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2023-03-15-preview/scheduledqueryrules"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ScheduledQueryRulesAlertV2Resource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model ScheduledQueryRulesAlertV2Model
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.Monitor.ScheduledQueryRulesV2Client
			subscriptionId := metadata.Client.Account.SubscriptionId
			id := scheduledqueryrules.NewScheduledQueryRuleID(subscriptionId, model.ResourceGroupName, model.Name)
			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			kind := scheduledqueryrules.KindLogAlert
			properties := &scheduledqueryrules.ScheduledQueryRuleResource{
				Kind:     &kind,
				Location: location.Normalize(model.Location),
				Properties: scheduledqueryrules.ScheduledQueryRuleProperties{
					AutoMitigate:                          &model.AutoMitigate,
					CheckWorkspaceAlertsStorageConfigured: &model.CheckWorkspaceAlertsStorageConfigured,
					Enabled:                               &model.Enabled,
					Scopes:                                &model.Scopes,
					Severity:                              &model.Severity,
					SkipQueryValidation:                   &model.SkipQueryValidation,
					TargetResourceTypes:                   &model.TargetResourceTypes,
				},
				Tags: &model.Tags,
			}

			properties.Properties.Actions = expandScheduledQueryRulesAlertV2ActionsModel(model.Actions)

			properties.Properties.Criteria = expandScheduledQueryRulesAlertV2CriteriaModel(model.Criteria)

			if model.Description != "" {
				properties.Properties.Description = &model.Description
			}

			if model.DisplayName != "" {
				properties.Properties.DisplayName = &model.DisplayName
			}

			if model.EvaluationFrequency != "" {
				properties.Properties.EvaluationFrequency = &model.EvaluationFrequency
			}

			if len(model.Identity) != 0 {
				ExpandedIdentity, err := identity.ExpandSystemOrUserAssignedMapFromModel(model.Identity)
				if err != nil {
					return fmt.Errorf("expanding SystemOrUserAssigned Identity: %+v", err)
				}
				properties.Identity = ExpandedIdentity
			}

			if model.MuteActionsDuration != "" {
				if model.AutoMitigate {
					return fmt.Errorf("auto mitigation must be disabled when mute action duration is set")
				}
				properties.Properties.MuteActionsDuration = &model.MuteActionsDuration
			}

			if model.OverrideQueryTimeRange != "" {
				properties.Properties.OverrideQueryTimeRange = &model.OverrideQueryTimeRange
			}

			if model.WindowSize != "" {
				properties.Properties.WindowSize = &model.WindowSize
			}

			if _, err := client.CreateOrUpdate(ctx, id, *properties); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
