package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2023-03-15-preview/scheduledqueryrules"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ScheduledQueryRulesAlertV2Resource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Monitor.ScheduledQueryRulesV2Client

			id, err := scheduledqueryrules.ParseScheduledQueryRuleID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}

				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			model := resp.Model
			if model == nil {
				return fmt.Errorf("retrieving %s: model was nil", id)
			}

			flattenedIdentity, err := identity.FlattenSystemOrUserAssignedMapToModel(model.Identity)
			if err != nil {
				return fmt.Errorf("flattening SystemOrUserAssigned Identity: %+v", err)
			}

			state := ScheduledQueryRulesAlertV2Model{
				Name:              id.ScheduledQueryRuleName,
				ResourceGroupName: id.ResourceGroupName,
				Location:          location.Normalize(model.Location),
				Identity:          *flattenedIdentity,
			}

			properties := &model.Properties
			state.Actions = flattenScheduledQueryRulesAlertV2ActionsModel(properties.Actions)

			if properties.AutoMitigate != nil {
				state.AutoMitigate = *properties.AutoMitigate
			}

			if properties.CheckWorkspaceAlertsStorageConfigured != nil {
				state.CheckWorkspaceAlertsStorageConfigured = *properties.CheckWorkspaceAlertsStorageConfigured
			}

			if properties.CreatedWithApiVersion != nil {
				state.CreatedWithApiVersion = *properties.CreatedWithApiVersion
			}

			state.Criteria = flattenScheduledQueryRulesAlertV2CriteriaModel(properties.Criteria)

			if properties.Description != nil {
				state.Description = *properties.Description
			}

			if properties.DisplayName != nil {
				state.DisplayName = *properties.DisplayName
			}

			if properties.Enabled != nil {
				state.Enabled = *properties.Enabled
			}

			if properties.EvaluationFrequency != nil {
				state.EvaluationFrequency = *properties.EvaluationFrequency
			}

			if properties.IsLegacyLogAnalyticsRule != nil {
				state.IsLegacyLogAnalyticsRule = *properties.IsLegacyLogAnalyticsRule
			}

			if properties.IsWorkspaceAlertsStorageConfigured != nil {
				state.IsWorkspaceAlertsStorageConfigured = *properties.IsWorkspaceAlertsStorageConfigured
			}

			if properties.MuteActionsDuration != nil {
				state.MuteActionsDuration = *properties.MuteActionsDuration
			}

			if properties.OverrideQueryTimeRange != nil {
				state.OverrideQueryTimeRange = *properties.OverrideQueryTimeRange
			}

			if properties.Scopes != nil {
				state.Scopes = *properties.Scopes
			}

			if properties.Severity != nil {
				state.Severity = *properties.Severity
			}

			if properties.SkipQueryValidation != nil {
				state.SkipQueryValidation = *properties.SkipQueryValidation
			}

			if properties.TargetResourceTypes != nil {
				state.TargetResourceTypes = *properties.TargetResourceTypes
			}

			if properties.WindowSize != nil {
				state.WindowSize = *properties.WindowSize
			}
			if model.Tags != nil {
				state.Tags = *model.Tags
			}

			return metadata.Encode(&state)
		},
	}
}
