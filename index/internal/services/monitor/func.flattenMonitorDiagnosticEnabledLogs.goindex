package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	authRuleParse "github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/authorizationrulesnamespaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2021-05-01-preview/diagnosticsettings"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	eventhubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/eventhub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenMonitorDiagnosticEnabledLogs(input *[]diagnosticsettings.LogSettings) []interface{} {
	enabledLogs := make([]interface{}, 0)
	if input == nil {
		return enabledLogs
	}

	for _, v := range *input {
		output := make(map[string]interface{})

		if !v.Enabled {
			continue
		}

		category := ""
		if v.Category != nil {
			category = *v.Category
		}
		output["category"] = category

		categoryGroup := ""
		if v.CategoryGroup != nil {
			categoryGroup = *v.CategoryGroup
		}
		output["category_group"] = categoryGroup

		policies := make([]interface{}, 0)

		if inputPolicy := v.RetentionPolicy; inputPolicy != nil {
			outputPolicy := make(map[string]interface{})

			outputPolicy["days"] = int(inputPolicy.Days)

			outputPolicy["enabled"] = inputPolicy.Enabled

			policies = append(policies, outputPolicy)
		}

		output["retention_policy"] = policies

		enabledLogs = append(enabledLogs, output)
	}
	return enabledLogs
}
