package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/eventhubs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2022-06-01/datacollectionendpoints"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2022-06-01/datacollectionrules"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandDataCollectionRuleDataSourceLogFiles(input []LogFile) *[]datacollectionrules.LogFilesDataSource {
	if len(input) == 0 {
		return nil
	}

	result := make([]datacollectionrules.LogFilesDataSource, 0)
	for _, v := range input {
		logFile := datacollectionrules.LogFilesDataSource{
			Name:         utils.String(v.Name),
			Streams:      v.Streams,
			FilePatterns: v.FilePatterns,
			Format:       datacollectionrules.KnownLogFilesDataSourceFormat(v.Format),
		}

		if len(v.Settings) != 0 && len(v.Settings[0].Text) != 0 {
			logFile.Settings = &datacollectionrules.LogFileSettings{
				Text: &datacollectionrules.LogFileTextSettings{
					RecordStartTimestampFormat: datacollectionrules.KnownLogFileTextSettingsRecordStartTimestampFormat(v.Settings[0].Text[0].RecordStartTimestampFormat),
				},
			}
		}

		result = append(result, logFile)
	}

	return &result
}
