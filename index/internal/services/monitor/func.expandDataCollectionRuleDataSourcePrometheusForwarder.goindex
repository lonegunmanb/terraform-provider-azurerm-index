package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/eventhubs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2023-03-11/datacollectionendpoints"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2023-03-11/datacollectionrules"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandDataCollectionRuleDataSourcePrometheusForwarder(input []PrometheusForwarder) *[]datacollectionrules.PrometheusForwarderDataSource {
	if len(input) == 0 {
		return nil
	}

	result := make([]datacollectionrules.PrometheusForwarderDataSource, 0)
	for _, v := range input {
		streams := make([]datacollectionrules.KnownPrometheusForwarderDataSourceStreams, 0)
		for _, stream := range v.Streams {
			streams = append(streams, datacollectionrules.KnownPrometheusForwarderDataSourceStreams(stream))
		}

		prometheusForwarder := datacollectionrules.PrometheusForwarderDataSource{
			Name:    utils.String(v.Name),
			Streams: &streams,
		}

		if len(v.LabelIncludeFilter) != 0 {
			labelIncludeFilter := make(map[string]string, 0)
			for _, filter := range v.LabelIncludeFilter {
				labelIncludeFilter[filter.Label] = filter.Value
			}

			prometheusForwarder.LabelIncludeFilter = &labelIncludeFilter
		}

		result = append(result, prometheusForwarder)
	}

	return &result
}
