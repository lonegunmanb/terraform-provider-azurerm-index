package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"fmt"
	"log"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/alertsmanagement/2021-08-08/alertprocessingrules"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func schemaAlertProcessingRule() map[string]*pluginsdk.Schema {
	return map[string]*pluginsdk.Schema{
		"name": {
			Type:         pluginsdk.TypeString,
			Required:     true,
			ForceNew:     true,
			ValidateFunc: validate.AlertProcessingRuleName,
		},

		"resource_group_name": commonschema.ResourceGroupName(),

		"scopes": {
			Type:     pluginsdk.TypeList,
			Required: true,
			MinItems: 1,
			Elem: &pluginsdk.Schema{
				Type:         pluginsdk.TypeString,
				ValidateFunc: azure.ValidateResourceID,
			},
		},

		"description": {
			Type:     pluginsdk.TypeString,
			Optional: true,
		},

		"enabled": {
			Type:     pluginsdk.TypeBool,
			Optional: true,
			Default:  true,
		},

		"condition": {
			Type:     pluginsdk.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &pluginsdk.Resource{
				Schema: map[string]*pluginsdk.Schema{
					"alert_context": schemaAlertProcessingRuleCondition(
						alertprocessingrules.PossibleValuesForOperator(), nil,
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"alert_rule_id": schemaAlertProcessingRuleCondition(
						alertprocessingrules.PossibleValuesForOperator(), nil,
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"alert_rule_name": schemaAlertProcessingRuleCondition(
						alertprocessingrules.PossibleValuesForOperator(), nil,
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"description": schemaAlertProcessingRuleCondition(
						alertprocessingrules.PossibleValuesForOperator(), nil,
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"monitor_condition": schemaAlertProcessingRuleCondition(
						[]string{
							string(alertprocessingrules.OperatorEquals),
							string(alertprocessingrules.OperatorNotEquals),
						},
						[]string{
							"Fired",
							"Resolved",
						},
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"monitor_service": schemaAlertProcessingRuleCondition(
						[]string{
							string(alertprocessingrules.OperatorEquals),
							string(alertprocessingrules.OperatorNotEquals),
						},
						// the supported type list is not consistent with the swagger and sdk
						// https://github.com/Azure/azure-rest-api-specs/issues/9076
						// directly use string constant
						[]string{
							"ActivityLog Administrative",
							"ActivityLog Autoscale",
							"ActivityLog Policy",
							"ActivityLog Recommendation",
							"ActivityLog Security",
							"Application Insights",
							"Azure Backup",
							"Azure Stack Edge",
							"Azure Stack Hub",
							"Custom",
							"Data Box Gateway",
							"Health Platform",
							"Log Alerts V2",
							"Log Analytics",
							"Platform",
							"Prometheus",
							"Resource Health",
							"Smart Detector",
							"VM Insights - Health",
						},
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"severity": schemaAlertProcessingRuleCondition(
						[]string{
							string(alertprocessingrules.OperatorEquals),
							string(alertprocessingrules.OperatorNotEquals),
						},
						[]string{
							"Sev0",
							"Sev1",
							"Sev2",
							"Sev3",
							"Sev4",
						},
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"signal_type": schemaAlertProcessingRuleCondition(
						[]string{
							string(alertprocessingrules.OperatorEquals),
							string(alertprocessingrules.OperatorNotEquals),
						},
						[]string{
							"Metric",
							"Log",
							"Unknown",
							"Health",
						},
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"target_resource": schemaAlertProcessingRuleCondition(
						alertprocessingrules.PossibleValuesForOperator(), nil,
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"target_resource_group": schemaAlertProcessingRuleCondition(
						alertprocessingrules.PossibleValuesForOperator(), nil,
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
					"target_resource_type": schemaAlertProcessingRuleCondition(
						[]string{
							string(alertprocessingrules.OperatorEquals),
							string(alertprocessingrules.OperatorNotEquals),
						},
						nil,
						[]string{
							"condition.0.alert_context", "condition.0.alert_rule_id", "condition.0.alert_rule_name",
							"condition.0.description", "condition.0.monitor_condition", "condition.0.monitor_service",
							"condition.0.severity", "condition.0.signal_type", "condition.0.target_resource",
							"condition.0.target_resource_group", "condition.0.target_resource_type",
						},
					),
				},
			},
		},

		"schedule": {
			Type:     pluginsdk.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &pluginsdk.Resource{
				Schema: map[string]*pluginsdk.Schema{
					"effective_from": {
						Type:         pluginsdk.TypeString,
						Optional:     true,
						ValidateFunc: validate.AlertProcessingRuleScheduleTime(),
					},
					"effective_until": {
						Type:         pluginsdk.TypeString,
						Optional:     true,
						ValidateFunc: validate.AlertProcessingRuleScheduleTime(),
					},
					"time_zone": {
						Type:         pluginsdk.TypeString,
						Optional:     true,
						Default:      "UTC",
						ValidateFunc: validate.AlertProcessingRuleScheduleTimeZone(),
					},
					"recurrence": {
						Type:     pluginsdk.TypeList,
						Optional: true,
						MaxItems: 1,
						Elem: &pluginsdk.Resource{
							Schema: map[string]*pluginsdk.Schema{
								"daily": {
									Type:     pluginsdk.TypeList,
									Optional: true,
									Elem: &pluginsdk.Resource{
										Schema: map[string]*pluginsdk.Schema{
											"start_time": {
												Type:         pluginsdk.TypeString,
												Required:     true,
												ValidateFunc: validate.AlertProcessingRuleScheduleDayTime(),
											},
											"end_time": {
												Type:         pluginsdk.TypeString,
												Required:     true,
												ValidateFunc: validate.AlertProcessingRuleScheduleDayTime(),
											},
										},
									},
								},
								"weekly": {
									Type:     pluginsdk.TypeList,
									Optional: true,
									Elem: &pluginsdk.Resource{
										Schema: map[string]*pluginsdk.Schema{
											"start_time": {
												Type:         pluginsdk.TypeString,
												Optional:     true,
												ValidateFunc: validate.AlertProcessingRuleScheduleDayTime(),
											},
											"end_time": {
												Type:         pluginsdk.TypeString,
												Optional:     true,
												ValidateFunc: validate.AlertProcessingRuleScheduleDayTime(),
											},
											"days_of_week": {
												Type:     pluginsdk.TypeList,
												Required: true,
												MinItems: 1,
												Elem: &pluginsdk.Schema{
													Type:         pluginsdk.TypeString,
													ValidateFunc: validation.IsDayOfTheWeek(false),
												},
											},
										},
									},
								},
								"monthly": {
									Type:     pluginsdk.TypeList,
									Optional: true,
									Elem: &pluginsdk.Resource{
										Schema: map[string]*pluginsdk.Schema{
											"start_time": {
												Type:         pluginsdk.TypeString,
												Optional:     true,
												ValidateFunc: validate.AlertProcessingRuleScheduleDayTime(),
											},
											"end_time": {
												Type:         pluginsdk.TypeString,
												Optional:     true,
												ValidateFunc: validate.AlertProcessingRuleScheduleDayTime(),
											},
											"days_of_month": {
												Type:     pluginsdk.TypeList,
												Required: true,
												MinItems: 1,
												Elem: &pluginsdk.Schema{
													Type:         pluginsdk.TypeInt,
													ValidateFunc: validation.IntBetween(1, 31),
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},

		"tags": commonschema.Tags(),
	}
}
