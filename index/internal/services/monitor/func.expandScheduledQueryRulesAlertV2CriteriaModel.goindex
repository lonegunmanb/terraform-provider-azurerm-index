package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2023-03-15-preview/scheduledqueryrules"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandScheduledQueryRulesAlertV2CriteriaModel(inputList []ScheduledQueryRulesAlertV2CriteriaModel) *scheduledqueryrules.ScheduledQueryRuleCriteria {
	output := scheduledqueryrules.ScheduledQueryRuleCriteria{}
	outputList := make([]scheduledqueryrules.Condition, 0, len(inputList))
	for _, v := range inputList {
		input := v
		condition := scheduledqueryrules.Condition{
			Operator:        &input.Operator,
			Threshold:       &input.Threshold,
			TimeAggregation: &input.TimeAggregation,
		}

		condition.Dimensions = expandScheduledQueryRulesAlertV2DimensionModel(input.Dimensions)
		condition.FailingPeriods = expandScheduledQueryRulesAlertV2FailingPeriodsModel(input.FailingPeriods)

		if input.MetricMeasureColumn != "" {
			condition.MetricMeasureColumn = &input.MetricMeasureColumn
		}

		if input.Query != "" {
			condition.Query = &input.Query
		}

		if input.ResourceIdColumn != "" {
			condition.ResourceIdColumn = &input.ResourceIdColumn
		}

		outputList = append(outputList, condition)
	}
	output.AllOf = &outputList
	return &output
}
