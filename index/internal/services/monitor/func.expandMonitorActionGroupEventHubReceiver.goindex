package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2022-08-08/automationaccount"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2023-01-01/actiongroupsapis"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandMonitorActionGroupEventHubReceiver(tenantId string, subscriptionId string, v []interface{}) *[]actiongroupsapis.EventHubReceiver {
	receivers := make([]actiongroupsapis.EventHubReceiver, 0)
	for _, receiverValue := range v {
		val := receiverValue.(map[string]interface{})

		eventHubNameSpace, eventHubName, subId := val["event_hub_namespace"].(string), val["event_hub_name"].(string), val["subscription_id"].(string)

		receiver := actiongroupsapis.EventHubReceiver{
			EventHubNameSpace:    eventHubNameSpace,
			EventHubName:         eventHubName,
			Name:                 val["name"].(string),
			UseCommonAlertSchema: utils.Bool(val["use_common_alert_schema"].(bool)),
		}

		if v := val["tenant_id"].(string); v != "" {
			receiver.TenantId = utils.String(v)
		} else {
			receiver.TenantId = utils.String(tenantId)
		}

		if subId != "" {
			receiver.SubscriptionId = subId
		} else {
			receiver.SubscriptionId = subscriptionId
		}

		receivers = append(receivers, receiver)
	}
	return &receivers
}
