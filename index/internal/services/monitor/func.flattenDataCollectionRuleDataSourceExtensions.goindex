package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/eventhubs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2022-06-01/datacollectionendpoints"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2022-06-01/datacollectionrules"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenDataCollectionRuleDataSourceExtensions(input *[]datacollectionrules.ExtensionDataSource) []Extension {
	if input == nil {
		return make([]Extension, 0)
	}

	result := make([]Extension, 0)
	for _, v := range *input {
		extensionSettings := ""
		if v.ExtensionSettings != nil {
			settingString, _ := pluginsdk.FlattenJsonToString((*v.ExtensionSettings).(map[string]interface{}))
			extensionSettings = settingString
		}
		result = append(result, Extension{
			ExtensionName:     v.ExtensionName,
			Name:              flattenStringPtr(v.Name),
			ExtensionSettings: extensionSettings,
			InputDataSources:  flattenStringSlicePtr(v.InputDataSources),
			Streams:           flattenDataCollectionRuleDataSourceExtensionStreams(v.Streams),
		})
	}
	return result
}
