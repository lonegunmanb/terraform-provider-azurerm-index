package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2020-10-01/activitylogalertsapis"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenMonitorActivityLogAlertResourceHealth(input activitylogalertsapis.AlertRuleAllOfCondition, result map[string]interface{}) {
	rhResult := make(map[string]interface{})

	for _, condition := range input.AllOf {
		if condition.Field == nil && condition.AnyOf != nil && len(*condition.AnyOf) > 0 {
			values := []string{}
			for _, cond := range *condition.AnyOf {
				if cond.Field != nil && cond.Equals != nil {
					values = append(values, *cond.Equals)
				}
				switch strings.ToLower(*cond.Field) {
				case "properties.currenthealthstatus":
					rhResult["current"] = values
				case "properties.previoushealthstatus":
					rhResult["previous"] = values
				case "properties.cause":
					rhResult["reason"] = values
				}
			}
		}
	}

	result["resource_health"] = []interface{}{rhResult}
}
