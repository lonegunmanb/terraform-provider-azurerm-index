package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2022-10-01/autoscalesettings"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandAzureRmMonitorAutoScaleSettingRule(input []interface{}) []autoscalesettings.ScaleRule {
	rules := make([]autoscalesettings.ScaleRule, 0)

	for _, v := range input {
		ruleRaw := v.(map[string]interface{})

		triggersRaw := ruleRaw["metric_trigger"].([]interface{})
		triggerRaw := triggersRaw[0].(map[string]interface{})
		metricTrigger := autoscalesettings.MetricTrigger{
			MetricName:        triggerRaw["metric_name"].(string),
			MetricNamespace:   utils.String(triggerRaw["metric_namespace"].(string)),
			MetricResourceUri: triggerRaw["metric_resource_id"].(string),
			TimeGrain:         triggerRaw["time_grain"].(string),
			Statistic:         autoscalesettings.MetricStatisticType(triggerRaw["statistic"].(string)),
			TimeWindow:        triggerRaw["time_window"].(string),
			TimeAggregation:   autoscalesettings.TimeAggregationType(triggerRaw["time_aggregation"].(string)),
			Operator:          autoscalesettings.ComparisonOperationType(triggerRaw["operator"].(string)),
			Threshold:         triggerRaw["threshold"].(float64),
			Dimensions:        expandAzureRmMonitorAutoScaleSettingRuleDimensions(triggerRaw["dimensions"].([]interface{})),
			DividePerInstance: utils.Bool(triggerRaw["divide_by_instance_count"].(bool)),
		}

		actionsRaw := ruleRaw["scale_action"].([]interface{})
		actionRaw := actionsRaw[0].(map[string]interface{})
		scaleAction := autoscalesettings.ScaleAction{
			Direction: autoscalesettings.ScaleDirection(actionRaw["direction"].(string)),
			Type:      autoscalesettings.ScaleType(actionRaw["type"].(string)),
			Value:     utils.String(strconv.Itoa(actionRaw["value"].(int))),
			Cooldown:  actionRaw["cooldown"].(string),
		}

		rule := autoscalesettings.ScaleRule{
			MetricTrigger: metricTrigger,
			ScaleAction:   scaleAction,
		}

		rules = append(rules, rule)
	}

	return rules
}
