package github.com/hashicorp/terraform-provider-azurerm/internal/services/monitor
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/eventhubs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2023-03-11/datacollectionendpoints"
	"github.com/hashicorp/go-azure-sdk/resource-manager/insights/2023-03-11/datacollectionrules"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenDataCollectionRuleStreamDeclarations(input *map[string]datacollectionrules.StreamDeclaration) []StreamDeclaration {
	if input == nil {
		return make([]StreamDeclaration, 0)
	}

	result := make([]StreamDeclaration, 0)
	for name, stream := range *input {
		if stream.Columns == nil {
			continue
		}

		columns := make([]StreamDeclarationColumn, 0)
		for _, column := range *stream.Columns {
			if column.Name == nil || column.Type == nil {
				continue
			}
			columns = append(columns, StreamDeclarationColumn{
				Name: *column.Name,
				Type: string(*column.Type),
			})
		}

		streamDeclaration := StreamDeclaration{
			StreamName: name,
			Column:     columns,
		}
		result = append(result, streamDeclaration)
	}

	return result
}
