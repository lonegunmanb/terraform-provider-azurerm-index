package github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/backups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/capacitypools"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/volumegroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/volumes"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/volumesreplication"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	netAppModels "github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp/models"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func authorizeVolumeReplication(ctx context.Context, volumeList *[]volumegroups.VolumeGroupVolumeProperties, replicationClient *volumesreplication.VolumesReplicationClient, subscriptionId, resourceGroupName, accountName string) error {
	if volumeList == nil || replicationClient == nil {
		return nil
	}

	for _, volume := range pointer.From(volumeList) {
		if volume.Properties.DataProtection != nil && volume.Properties.DataProtection.Replication != nil {
			replication := volume.Properties.DataProtection.Replication
			if replication.EndpointType != nil &&
				strings.EqualFold(string(pointer.From(replication.EndpointType)), string(volumegroups.EndpointTypeDst)) {
				// Get the capacity pool for this volume
				capacityPoolId, err := capacitypools.ParseCapacityPoolID(*volume.Properties.CapacityPoolResourceId)
				if err != nil {
					return fmt.Errorf("parsing capacity pool ID %q: %+v", *volume.Properties.CapacityPoolResourceId, err)
				}

				// This is a secondary volume, create its ID
				secondaryId := volumes.NewVolumeID(subscriptionId,
					resourceGroupName,
					accountName,
					capacityPoolId.CapacityPoolName,
					getUserDefinedVolumeName(volume.Name),
				)

				// Getting primary resource id
				primaryId, err := volumesreplication.ParseVolumeID(pointer.From(replication.RemoteVolumeResourceId))
				if err != nil {
					return fmt.Errorf("parsing primary volume ID %q: %+v", pointer.From(replication.RemoteVolumeResourceId), err)
				}

				// Authorizing
				if err := replicationClient.VolumesAuthorizeReplicationThenPoll(ctx, pointer.From(primaryId), volumesreplication.AuthorizeRequest{
					RemoteVolumeResourceId: utils.String(secondaryId.ID()),
				}); err != nil {
					return fmt.Errorf("authorizing volume replication for volume %q: %+v", secondaryId.ID(), err)
				}
			}
		}
	}

	// Wait for volume replication authorization to complete for all destination volumes
	for _, volume := range pointer.From(volumeList) {
		if volume.Properties.DataProtection != nil && volume.Properties.DataProtection.Replication != nil &&
			strings.EqualFold(string(pointer.From(volume.Properties.DataProtection.Replication.EndpointType)), string(volumegroups.EndpointTypeDst)) {
			// Get the capacity pool for this volume
			capacityPoolId, err := capacitypools.ParseCapacityPoolID(*volume.Properties.CapacityPoolResourceId)
			if err != nil {
				return fmt.Errorf("parsing capacity pool ID %q: %+v", *volume.Properties.CapacityPoolResourceId, err)
			}

			// Create the destination volume ID for status checking
			destinationReplId := volumesreplication.NewVolumeID(subscriptionId,
				resourceGroupName,
				accountName,
				capacityPoolId.CapacityPoolName,
				getUserDefinedVolumeName(volume.Name),
			)

			// Wait for volume replication authorization to complete on the destination volume
			log.Printf("[DEBUG] Waiting for replication authorization on destination volume %s to complete", destinationReplId.ID())
			if err := waitForReplAuthorization(ctx, replicationClient, destinationReplId); err != nil {
				return err
			}
		}
	}

	return nil
}
