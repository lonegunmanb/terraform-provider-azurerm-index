package github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp
import (
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-01-01/netappaccounts"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	netAppValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandNetAppActiveDirectories(input []interface{}) *[]netappaccounts.ActiveDirectory {
	results := make([]netappaccounts.ActiveDirectory, 0)
	if input == nil {
		return &results
	}

	for _, item := range input {
		v := item.(map[string]interface{})
		dns := strings.Join(*utils.ExpandStringSlice(v["dns_servers"].([]interface{})), ",")

		result := netappaccounts.ActiveDirectory{
			Dns:                        utils.String(dns),
			Domain:                     utils.String(v["domain"].(string)),
			OrganizationalUnit:         utils.String(v["organizational_unit"].(string)),
			Password:                   utils.String(v["password"].(string)),
			SmbServerName:              utils.String(v["smb_server_name"].(string)),
			Username:                   utils.String(v["username"].(string)),
			Site:                       utils.String(v["site_name"].(string)),
			AdName:                     utils.String(v["kerberos_ad_name"].(string)),
			KdcIP:                      utils.String(v["kerberos_kdc_ip"].(string)),
			AesEncryption:              utils.Bool(v["aes_encryption_enabled"].(bool)),
			AllowLocalNfsUsersWithLdap: utils.Bool(v["local_nfs_users_with_ldap_allowed"].(bool)),
			LdapOverTLS:                utils.Bool(v["ldap_over_tls_enabled"].(bool)),
			ServerRootCACertificate:    utils.String(v["server_root_ca_certificate"].(string)),
			LdapSigning:                utils.Bool(v["ldap_signing_enabled"].(bool)),
		}

		results = append(results, result)
	}
	return &results
}
