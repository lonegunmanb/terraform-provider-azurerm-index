package github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/capacitypools"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/volumegroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/volumes"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	netAppModels "github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp/models"
	netAppValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r NetAppVolumeGroupOracleResource) CustomizeDiff() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			rd := metadata.ResourceDiff

			// Validate NFSv3 to NFSv4.1 protocol conversion restrictions for volume groups
			volumes := rd.Get("volume").([]interface{})
			for i := range volumes {
				protocolsKey := fmt.Sprintf("volume.%d.protocols", i)

				if rd.HasChange(protocolsKey) {
					old, new := rd.GetChange(protocolsKey)
					oldProtocols := old.([]interface{})
					newProtocols := new.([]interface{})

					// Convert to string slices for validation
					oldProtocolsStr := make([]string, len(oldProtocols))
					newProtocolsStr := make([]string, len(newProtocols))

					for j, v := range oldProtocols {
						oldProtocolsStr[j] = v.(string)
					}
					for j, v := range newProtocols {
						newProtocolsStr[j] = v.(string)
					}

					// Get the export policy rules configuration for this volume
					exportPolicyRulesKey := fmt.Sprintf("volume.%d.export_policy_rule", i)
					exportPolicyRules := rd.Get(exportPolicyRulesKey).([]interface{})

					// For volume groups, kerberos and data replication are not directly supported, so we pass empty values
					var kerberosEnabled bool
					var dataReplication []interface{}

					validationErrors := netAppValidate.ValidateNetAppVolumeProtocolConversion(oldProtocolsStr, newProtocolsStr, kerberosEnabled, dataReplication, exportPolicyRules)
					for _, err := range validationErrors {
						return err
					}
				}
			}

			return nil
		},
	}
}
