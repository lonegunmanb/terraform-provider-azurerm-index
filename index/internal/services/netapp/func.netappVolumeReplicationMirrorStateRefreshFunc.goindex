package github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/backups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/capacitypools"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/volumegroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/volumes"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/volumesreplication"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	netAppModels "github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp/models"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func netappVolumeReplicationMirrorStateRefreshFunc(ctx context.Context, client *volumesreplication.VolumesReplicationClient, id volumesreplication.VolumeId, desiredState string) pluginsdk.StateRefreshFunc {
	validStates := []string{"mirrored", "broken", "uninitialized"}

	// Validation for the desiredState being valid
	validState := false
	for _, state := range validStates {
		if strings.EqualFold(desiredState, state) {
			validState = true
			break
		}
	}
	if !validState {
		return func() (interface{}, string, error) {
			return nil, "", fmt.Errorf("invalid desired mirror state: %s", desiredState)
		}
	}

	return func() (interface{}, string, error) {
		// Possible Mirror States to be used as desiredStates:
		// mirrored, broken or uninitialized

		if !utils.SliceContainsValue(validStates, strings.ToLower(desiredState)) {
			return nil, "", fmt.Errorf("invalid desired mirror state was passed to check mirror replication state (%s), possible values: (%+v)", desiredState, volumesreplication.PossibleValuesForMirrorState())
		}

		code := "200"
		res, err := client.VolumesReplicationStatus(ctx, id)
		if err != nil {
			// Special handling for 409 Conflict errors with the specific "VolumeReplicationMissingFor" message
			if res.HttpResponse != nil && res.HttpResponse.StatusCode == 409 &&
				strings.Contains(err.Error(), "VolumeReplicationMissingFor") {
				// If replication no longer exists and we want the "broken" state
				// then we've reached our goal - replication is broken/removed
				if strings.EqualFold(desiredState, "broken") {
					return res, "204", nil
				}
				return nil, "", fmt.Errorf("retrieving replication status from %s: %s", id, err)
			}
			return nil, "", fmt.Errorf("retrieving replication status from %s: %s", id, err)
		}

		if res.Model != nil && res.Model.MirrorState != nil {
			mirrorState := string(*res.Model.MirrorState)
			// Check if the current state is the desired state
			if strings.EqualFold(strings.ToLower(mirrorState), strings.ToLower(desiredState)) {
				code = "204"
			}
		}

		return res, code, nil
	}
}
