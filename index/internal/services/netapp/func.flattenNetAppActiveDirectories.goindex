package github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp
import (
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-06-01/netappaccounts"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	netAppValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenNetAppActiveDirectories(input *netappaccounts.ActiveDirectory, prevPassword *string, prevCaCert *string) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	return []interface{}{
		map[string]interface{}{
			"dns_servers":                       utils.FlattenStringSliceWithDelimiter(input.Dns, ","),
			"domain":                            input.Domain,
			"organizational_unit":               input.OrganizationalUnit,
			"password":                          prevPassword,
			"smb_server_name":                   input.SmbServerName,
			"username":                          input.Username,
			"site_name":                         input.Site,
			"kerberos_ad_name":                  input.AdName,
			"kerberos_kdc_ip":                   input.KdcIP,
			"aes_encryption_enabled":            input.AesEncryption,
			"local_nfs_users_with_ldap_allowed": input.AllowLocalNfsUsersWithLdap,
			"ldap_over_tls_enabled":             input.LdapOverTLS,
			"server_root_ca_certificate":        prevCaCert,
			"ldap_signing_enabled":              input.LdapSigning,
		},
	}
}
