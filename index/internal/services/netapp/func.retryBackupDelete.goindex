package github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp
import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2024-03-01/backups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2024-03-01/backupvaults"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	netAppModels "github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp/models"
	netAppValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func retryBackupDelete(ctx context.Context, client *backups.BackupsClient, id backups.BackupId, retryAttempts, retryIntervalSec int) error {
	var lastErr error
	for attempt := 0; attempt < retryAttempts; attempt++ {
		if err := client.DeleteThenPoll(ctx, id); err == nil {
			if err := waitForBackupDeletion(ctx, client, id); err != nil {
				return fmt.Errorf("waiting for deletion of %s: %w", id.ID(), err)
			}
			return nil
		} else if strings.Contains(err.Error(), "Please retry after backup transfer is complete") {
			lastErr = err
			time.Sleep(time.Duration(retryIntervalSec) * time.Second)
		} else {
			return fmt.Errorf("deleting backup %s: %+v", id.ID(), err)
		}
	}

	return fmt.Errorf("failed to delete backup after %d attempts: %v", retryAttempts, lastErr)
}
