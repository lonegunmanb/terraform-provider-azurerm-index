package github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-01-01/backups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-01-01/volumegroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-01-01/volumes"
	"github.com/hashicorp/go-azure-sdk/resource-manager/netapp/2025-01-01/volumesreplication"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	netAppModels "github.com/hashicorp/terraform-provider-azurerm/internal/services/netapp/models"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandNetAppVolumeDataProtectionBackupPolicy(input []interface{}) *volumes.VolumePropertiesDataProtection {
	if len(input) == 0 || input == nil {
		return &volumes.VolumePropertiesDataProtection{}
	}

	backupPolicyObject := volumes.VolumeBackupProperties{}

	backupRaw := input[0].(map[string]interface{})

	if v, ok := backupRaw["backup_policy_id"]; ok {
		backupPolicyObject.BackupPolicyId = utils.String(v.(string))
	}

	if v, ok := backupRaw["policy_enabled"]; ok {
		backupPolicyObject.PolicyEnforced = utils.Bool(v.(bool))
	}

	if v, ok := backupRaw["backup_vault_id"]; ok {
		backupPolicyObject.BackupVaultId = utils.String(v.(string))
	}

	return &volumes.VolumePropertiesDataProtection{
		Backup: &backupPolicyObject,
	}
}
