package github.com/hashicorp/terraform-provider-azurerm/internal/services/devtestlabs
import (
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/devtestlab/2018-09-15/schedules"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	computeValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/devtestlabs/migration"
	devTestValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/devtestlabs/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceDevTestLabSchedulesCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).DevTestLabs.LabSchedulesClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := schedules.NewLabScheduleID(subscriptionId, d.Get("resource_group_name").(string), d.Get("lab_name").(string), d.Get("name").(string))

	if d.IsNewResource() {
		existing, err := client.Get(ctx, id, schedules.GetOperationOptions{})
		if err != nil {
			if !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %s", id, err)
			}
		}

		if !response.WasNotFound(existing.HttpResponse) {
			return tf.ImportAsExistsError("azurerm_dev_test_schedule", id.ID())
		}
	}

	location := azure.NormalizeLocation(d.Get("location").(string))

	schedule := schedules.Schedule{
		Location:   &location,
		Properties: schedules.ScheduleProperties{},
		Tags:       expandTags(d.Get("tags").(map[string]interface{})),
	}

	status := schedules.EnableStatusDisabled
	if d.Get("status").(string) == string(schedules.EnableStatusEnabled) {
		status = schedules.EnableStatusEnabled
	}
	schedule.Properties.Status = &status

	if taskType := d.Get("task_type").(string); taskType != "" {
		schedule.Properties.TaskType = &taskType
	}

	if timeZoneId := d.Get("time_zone_id").(string); timeZoneId != "" {
		schedule.Properties.TimeZoneId = &timeZoneId
	}

	if v, ok := d.GetOk("weekly_recurrence"); ok {
		weekRecurrence := expandDevTestScheduleRecurrenceWeekly(v)

		schedule.Properties.WeeklyRecurrence = weekRecurrence
	}

	if v, ok := d.GetOk("daily_recurrence"); ok {
		dailyRecurrence := expandDevTestScheduleRecurrenceDaily(v)
		schedule.Properties.DailyRecurrence = dailyRecurrence
	}

	if v, ok := d.GetOk("hourly_recurrence"); ok {
		hourlyRecurrence := expandDevTestScheduleRecurrenceHourly(v)

		schedule.Properties.HourlyRecurrence = hourlyRecurrence
	}

	if _, ok := d.GetOk("notification_settings"); ok {
		notificationSettings := expandDevTestScheduleNotificationSettings(d)
		schedule.Properties.NotificationSettings = notificationSettings
	}

	if _, err := client.CreateOrUpdate(ctx, id, schedule); err != nil {
		return err
	}

	d.SetId(id.ID())

	return resourceDevTestLabSchedulesRead(d, meta)
}
