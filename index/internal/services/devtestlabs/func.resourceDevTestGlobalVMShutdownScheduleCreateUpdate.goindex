package github.com/hashicorp/terraform-provider-azurerm/internal/services/devtestlabs
import (
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/devtestlab/2018-09-15/globalschedules"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	computeValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceDevTestGlobalVMShutdownScheduleCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).DevTestLabs.GlobalLabSchedulesClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	vmID := d.Get("virtual_machine_id").(string)
	vmId, err := commonids.ParseVirtualMachineID(vmID)
	if err != nil {
		return err
	}

	// Can't find any official documentation on this, but the API returns a 400 for any other name.
	// The best example I could find is here: https://social.msdn.microsoft.com/Forums/en-US/25a02403-dba9-4bcb-bdcc-1f4afcba5b65/powershell-script-to-autoshutdown-azure-virtual-machine?forum=WAVirtualMachinesforWindows
	name := "shutdown-computevm-" + vmId.VirtualMachineName
	id := globalschedules.NewScheduleID(vmId.SubscriptionId, vmId.ResourceGroupName, name)

	if d.IsNewResource() {
		existing, err := client.Get(ctx, id, globalschedules.GetOperationOptions{})
		if err != nil {
			if !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %s", id, err)
			}
		}

		if !response.WasNotFound(existing.HttpResponse) {
			return tf.ImportAsExistsError("azurerm_dev_test_global_vm_shutdown_schedule", id.ID())
		}
	}

	location := azure.NormalizeLocation(d.Get("location").(string))
	taskType := "ComputeVmShutdownTask"

	schedule := globalschedules.Schedule{
		Location: &location,
		Properties: globalschedules.ScheduleProperties{
			TargetResourceId: &vmID,
			TaskType:         &taskType,
		},
		Tags: expandTags(d.Get("tags").(map[string]interface{})),
	}

	statusEnabled := globalschedules.EnableStatusDisabled
	if d.Get("enabled").(bool) {
		statusEnabled = globalschedules.EnableStatusEnabled
	}
	schedule.Properties.Status = &statusEnabled

	if timeZoneId := d.Get("timezone").(string); timeZoneId != "" {
		schedule.Properties.TimeZoneId = &timeZoneId
	}

	if v, ok := d.GetOk("daily_recurrence_time"); ok {
		dailyRecurrence := expandDevTestGlobalVMShutdownScheduleRecurrenceDaily(v)
		schedule.Properties.DailyRecurrence = dailyRecurrence
	}

	if _, ok := d.GetOk("notification_settings"); ok {
		notificationSettings := expandDevTestGlobalVMShutdownScheduleNotificationSettings(d)
		schedule.Properties.NotificationSettings = notificationSettings
	}

	if _, err := client.CreateOrUpdate(ctx, id, schedule); err != nil {
		return err
	}

	d.SetId(id.ID())

	return resourceDevTestGlobalVMShutdownScheduleRead(d, meta)
}
