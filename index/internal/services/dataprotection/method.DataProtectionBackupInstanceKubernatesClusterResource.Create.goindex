package github.com/hashicorp/terraform-provider-azurerm/internal/services/dataprotection
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dataprotection/2024-04-01/backupinstances"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dataprotection/2024-04-01/backuppolicies"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	resourceParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/resource/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (r DataProtectionBackupInstanceKubernatesClusterResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model BackupInstanceKubernatesClusterModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.DataProtection.BackupInstanceClient

			vaultId, err := backupinstances.ParseBackupVaultID(model.VaultId)
			if err != nil {
				return err
			}

			id := backupinstances.NewBackupInstanceID(vaultId.SubscriptionId, vaultId.ResourceGroupName, vaultId.BackupVaultName, model.Name)
			existing, err := client.Get(ctx, id)
			if err != nil {
				if !response.WasNotFound(existing.HttpResponse) {
					return fmt.Errorf("checking for existing %s: %+v", id, err)
				}
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			policyId, err := backuppolicies.ParseBackupPolicyID(model.BackupPolicyId)
			if err != nil {
				return err
			}

			aksId, err := commonids.ParseKubernetesClusterID(model.KubernetesClusterId)
			if err != nil {
				return err
			}

			snapshotResourceGroupId := resourceParse.NewResourceGroupID(metadata.Client.Account.SubscriptionId, model.SnapshotResourceGroupName)
			parameters := backupinstances.BackupInstanceResource{
				Properties: &backupinstances.BackupInstance{
					DataSourceInfo: backupinstances.Datasource{
						DatasourceType:   pointer.To("Microsoft.ContainerService/managedClusters"),
						ObjectType:       pointer.To("Datasource"),
						ResourceID:       aksId.ID(),
						ResourceLocation: pointer.To(location.Normalize(model.Location)),
						ResourceName:     pointer.To(aksId.ManagedClusterName),
						ResourceType:     pointer.To("Microsoft.ContainerService/managedClusters"),
						ResourceUri:      pointer.To(aksId.ID()),
					},
					DataSourceSetInfo: &backupinstances.DatasourceSet{
						DatasourceType:   pointer.To("Microsoft.ContainerService/managedClusters"),
						ObjectType:       pointer.To("DatasourceSet"),
						ResourceID:       aksId.ID(),
						ResourceLocation: pointer.To(location.Normalize(model.Location)),
						ResourceName:     pointer.To(aksId.ManagedClusterName),
						ResourceType:     pointer.To("Microsoft.ContainerService/managedClusters"),
						ResourceUri:      pointer.To(aksId.ID()),
					},
					FriendlyName: pointer.To(id.BackupInstanceName),
					ObjectType:   "BackupInstance",
					PolicyInfo: backupinstances.PolicyInfo{
						PolicyId: policyId.ID(),
						PolicyParameters: &backupinstances.PolicyParameters{
							DataStoreParametersList: &[]backupinstances.DataStoreParameters{
								backupinstances.AzureOperationalStoreParameters{
									ResourceGroupId: pointer.To(snapshotResourceGroupId.ID()),
									DataStoreType:   backupinstances.DataStoreTypesOperationalStore,
								},
							},
							BackupDatasourceParametersList: expandBackupDatasourceParameters(model.BackupDatasourceParameters),
						},
					},
				},
			}

			if err := client.CreateOrUpdateThenPoll(ctx, id, parameters, backupinstances.DefaultCreateOrUpdateOperationOptions()); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
