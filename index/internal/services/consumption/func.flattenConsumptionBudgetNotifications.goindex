package github.com/hashicorp/terraform-provider-azurerm/internal/services/consumption
import (
	"context"
	"fmt"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/consumption/2019-10-01/budgets"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/consumption/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenConsumptionBudgetNotifications(input *map[string]budgets.Notification, scope string) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	notifications := make([]interface{}, 0)
	for _, n := range *input {
		block := make(map[string]interface{})

		block["enabled"] = n.Enabled

		operator := ""
		if v := n.Operator; v != "" {
			operator = string(v)
		}
		block["operator"] = operator

		block["threshold"] = n.Threshold

		thresholdType := string(budgets.ThresholdTypeActual)
		if v := n.ThresholdType; v != nil {
			thresholdType = string(*v)
		}
		block["threshold_type"] = thresholdType

		var emails []interface{}
		if v := n.ContactEmails; v != nil {
			emails = utils.FlattenStringSlice(&v)
		}
		block["contact_emails"] = emails

		if scope != "management_group_id" {
			var roles []interface{}
			if v := n.ContactRoles; v != nil {
				roles = utils.FlattenStringSlice(v)
			}
			block["contact_roles"] = roles

			var groups []interface{}
			if v := n.ContactGroups; v != nil {
				groups = utils.FlattenStringSlice(v)
			}
			block["contact_groups"] = groups
		}

		notifications = append(notifications, block)
	}

	return notifications
}
