package github.com/hashicorp/terraform-provider-azurerm/internal/services/consumption
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/consumption/2019-10-01/budgets"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/consumption/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceArmConsumptionBudgetResourceGroupDataSourceRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Consumption.BudgetsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := budgets.NewScopedBudgetID(d.Get("resource_group_id").(string), d.Get("name").(string))
	resp, err := client.Get(ctx, id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return fmt.Errorf("%s was not found", id)
		}
		return fmt.Errorf("making read request on %s: %+v", id, err)
	}

	d.SetId(id.ID())
	d.Set("name", id.BudgetName)
	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			d.Set("amount", props.Amount)
			d.Set("time_grain", string(props.TimeGrain))
			d.Set("time_period", flattenConsumptionBudgetTimePeriod(&props.TimePeriod))
			d.Set("notification", flattenConsumptionBudgetNotifications(props.Notifications, id.Scope))
			d.Set("filter", flattenConsumptionBudgetFilter(props.Filter))
		}
	}

	return nil
}
