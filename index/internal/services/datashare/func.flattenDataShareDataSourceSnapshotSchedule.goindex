package github.com/hashicorp/terraform-provider-azurerm/internal/services/datashare
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datashare/2019-11-01/account"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datashare/2019-11-01/share"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datashare/2019-11-01/synchronizationsetting"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datashare/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenDataShareDataSourceSnapshotSchedule(input []synchronizationsetting.ScheduledSynchronizationSetting) []interface{} {
	output := make([]interface{}, 0)

	for _, setting := range input {
		props := setting.Properties
		name := ""
		if props.UserName != nil {
			name = *props.UserName
		}

		output = append(output, map[string]interface{}{
			"name":       name,
			"recurrence": string(props.RecurrenceInterval),
			"start_time": props.SynchronizationTime,
		})
	}

	return output
}
