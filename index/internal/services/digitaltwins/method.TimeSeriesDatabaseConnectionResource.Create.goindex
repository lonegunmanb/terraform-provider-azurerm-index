package github.com/hashicorp/terraform-provider-azurerm/internal/services/digitaltwins
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/digitaltwins/2023-01-31/timeseriesdatabaseconnections"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/eventhubs"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/digitaltwins/validate"
	eventhubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/eventhub/validate"
	kustoValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/kusto/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (m TimeSeriesDatabaseConnectionResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, meta sdk.ResourceMetaData) error {
			client := meta.Client.DigitalTwins.TimeSeriesDatabaseConnectionsClient

			var model TimeSeriesDatabaseConnectionModel
			if err := meta.Decode(&model); err != nil {
				return err
			}

			digitalTwinsId, err := timeseriesdatabaseconnections.ParseDigitalTwinsInstanceID(model.DigitalTwinsId)
			if err != nil {
				return err
			}

			id := timeseriesdatabaseconnections.NewTimeSeriesDatabaseConnectionID(digitalTwinsId.SubscriptionId, digitalTwinsId.ResourceGroupName, digitalTwinsId.DigitalTwinsInstanceName, model.Name)

			existing, err := client.Get(ctx, id)
			if !response.WasNotFound(existing.HttpResponse) {
				if err != nil {
					return fmt.Errorf("retrieving %s: %+v", id, err)
				}
				return meta.ResourceRequiresImport(m.ResourceType(), id)
			}

			properties := timeseriesdatabaseconnections.AzureDataExplorerConnectionProperties{
				AdxDatabaseName:             model.KustoDatabaseName,
				AdxEndpointUri:              model.KustoClusterUri,
				AdxResourceId:               model.KustoClusterId,
				EventHubEndpointUri:         model.EventhubNamespaceEndpointUri,
				EventHubEntityPath:          model.EventhubName,
				EventHubNamespaceResourceId: model.EventhubNamespaceId,
			}

			if model.KustoTableName != "" {
				properties.AdxTableName = utils.String(model.KustoTableName)
			}

			if model.EventhubConsumerGroupName != "" {
				properties.EventHubConsumerGroup = utils.String(model.EventhubConsumerGroupName)
			}

			req := timeseriesdatabaseconnections.TimeSeriesDatabaseConnection{
				Properties: properties,
			}

			if err := client.CreateOrUpdateThenPoll(ctx, id, req); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			meta.SetID(id)
			return nil
		},
	}
}
