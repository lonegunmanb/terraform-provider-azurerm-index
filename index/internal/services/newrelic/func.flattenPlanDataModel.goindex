package github.com/hashicorp/terraform-provider-azurerm/internal/services/newrelic
import (
	"context"
	"fmt"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/newrelic/2024-03-01/monitors"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenPlanDataModel(input *monitors.PlanData) []PlanDataModel {
	var outputList []PlanDataModel
	if input == nil {
		return outputList
	}
	output := PlanDataModel{}
	if input.BillingCycle != nil {
		output.BillingCycle = *input.BillingCycle
	}

	if input.EffectiveDate != nil {
		output.EffectiveDate = *input.EffectiveDate
	}

	if input.PlanDetails != nil {
		output.PlanDetails = strings.TrimSuffix(*input.PlanDetails, PlanSuffix)
	}

	if input.UsageType != nil {
		output.UsageType = *input.UsageType
	}

	return append(outputList, output)
}
