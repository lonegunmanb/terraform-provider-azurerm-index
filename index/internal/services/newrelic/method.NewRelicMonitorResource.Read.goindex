package github.com/hashicorp/terraform-provider-azurerm/internal/services/newrelic
import (
	"context"
	"fmt"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/newrelic/2024-03-01/monitors"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r NewRelicMonitorResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.NewRelic.MonitorsClient

			id, err := monitors.ParseMonitorID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}

				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			var originalModel NewRelicMonitorModel
			if err = metadata.Decode(&originalModel); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			state := NewRelicMonitorModel{
				Name:              id.MonitorName,
				ResourceGroupName: id.ResourceGroupName,
				IngestionKey:      originalModel.IngestionKey,
			}

			if model := resp.Model; model != nil {
				state.Location = location.Normalize(model.Location)

				if err := metadata.ResourceData.Set("identity", identity.FlattenSystemAssigned(model.Identity)); err != nil {
					return fmt.Errorf("setting `identity`: %+v", err)
				}

				properties := &model.Properties
				if properties.AccountCreationSource != nil {
					state.AccountCreationSource = *properties.AccountCreationSource
				}

				if properties.NewRelicAccountProperties != nil {
					if properties.NewRelicAccountProperties.AccountInfo != nil {
						state.AccountId = pointer.From(properties.NewRelicAccountProperties.AccountInfo.AccountId)
					}

					if properties.NewRelicAccountProperties.OrganizationInfo != nil {
						state.OrganizationId = pointer.From(properties.NewRelicAccountProperties.OrganizationInfo.OrganizationId)
					}

					state.UserId = pointer.From(properties.NewRelicAccountProperties.UserId)
				}

				if properties.OrgCreationSource != nil {
					state.OrgCreationSource = *properties.OrgCreationSource
				}

				state.PlanData = flattenPlanDataModel(properties.PlanData)

				state.UserInfo = flattenUserInfoModel(properties.UserInfo)
			}

			return metadata.Encode(&state)
		},
	}
}
