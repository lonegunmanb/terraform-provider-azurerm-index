package github.com/hashicorp/terraform-provider-azurerm/internal/services/newrelic
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/newrelic/2024-03-01/monitors"
	"github.com/hashicorp/go-azure-sdk/resource-manager/newrelic/2024-03-01/tagrules"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r NewRelicTagRuleResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model NewRelicTagRuleModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.NewRelic.TagRulesClient
			monitorId, err := monitors.ParseMonitorID(model.NewRelicMonitorId)
			if err != nil {
				return err
			}

			id := tagrules.NewTagRuleID(monitorId.SubscriptionId, monitorId.ResourceGroupName, monitorId.MonitorName, "default")
			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			logRules := tagrules.LogRules{
				FilteringTags:        expandFilteringTagModelArray(model.LogTagFilter),
				SendAadLogs:          pointer.To(tagrules.SendAadLogsStatusDisabled),
				SendActivityLogs:     pointer.To(tagrules.SendActivityLogsStatusDisabled),
				SendSubscriptionLogs: pointer.To(tagrules.SendSubscriptionLogsStatusDisabled),
			}

			email, err := r.getEmail(ctx, metadata.Client.NewRelic.MonitorsClient, monitorId)
			if err != nil {
				return err
			}

			metricRules := tagrules.MetricRules{
				FilteringTags: expandFilteringTagModelArray(model.MetricTagFilter),
				SendMetrics:   pointer.To(tagrules.SendMetricsStatusDisabled),
				UserEmail:     &email,
			}

			if model.AadLogEnabled {
				logRules.SendAadLogs = pointer.To(tagrules.SendAadLogsStatusEnabled)
			}

			if model.ActivityLogEnabled {
				logRules.SendActivityLogs = pointer.To(tagrules.SendActivityLogsStatusEnabled)
			}

			if model.SubscriptionLogEnabled {
				logRules.SendSubscriptionLogs = pointer.To(tagrules.SendSubscriptionLogsStatusEnabled)
			}

			if model.MetricEnabled {
				metricRules.SendMetrics = pointer.To(tagrules.SendMetricsStatusEnabled)
			}

			properties := &tagrules.TagRule{
				Properties: tagrules.MonitoringTagRulesProperties{
					LogRules:    &logRules,
					MetricRules: &metricRules,
				},
			}

			if err := client.CreateOrUpdateThenPoll(ctx, id, *properties); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
