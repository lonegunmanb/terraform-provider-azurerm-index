package github.com/hashicorp/terraform-provider-azurerm/internal/services/confidentialledger
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/confidentialledger/2022-05-13/confidentialledger"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/confidentialledger/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceConfidentialLedgerUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).ConfidentialLedger.ConfidentialLedgerClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := confidentialledger.ParseLedgerID(d.Id())
	if err != nil {
		return err
	}

	existing, err := client.LedgerGet(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving existing %s: %+v", *id, err)
	}
	if existing.Model == nil {
		return fmt.Errorf("retrieving existing %s: model was nil", *id)
	}
	if existing.Model.Properties == nil {
		return fmt.Errorf("retrieving existing %s: `properties` was nil", *id)
	}

	ledger := confidentialledger.ConfidentialLedger{
		Location: existing.Model.Location,
		Properties: &confidentialledger.LedgerProperties{
			AadBasedSecurityPrincipals:  existing.Model.Properties.AadBasedSecurityPrincipals,
			CertBasedSecurityPrincipals: existing.Model.Properties.CertBasedSecurityPrincipals,
			LedgerType:                  existing.Model.Properties.LedgerType,
		},
		Tags: existing.Model.Tags,
	}

	if d.HasChange("azuread_based_service_principal") {
		aadBasedUsers := expandAADBasedSecurityPrincipal(d.Get("azuread_based_service_principal").([]interface{}))
		ledger.Properties.AadBasedSecurityPrincipals = aadBasedUsers
	}

	if d.HasChange("certificate_based_security_principal") {
		certBasedUsers := expandCertBasedSecurityPrincipal(d.Get("certificate_based_security_principal").([]interface{}))
		ledger.Properties.CertBasedSecurityPrincipals = certBasedUsers
	}

	if d.HasChange("tags") {
		ledger.Tags = tags.Expand(d.Get("tags").(map[string]interface{}))
	}

	if err := client.LedgerUpdateThenPoll(ctx, *id, ledger); err != nil {
		return fmt.Errorf("updating %s: %+v", *id, err)
	}

	return resourceConfidentialLedgerRead(d, meta)
}
