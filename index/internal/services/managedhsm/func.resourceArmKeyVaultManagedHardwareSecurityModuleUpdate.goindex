package github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm
import (
	"context"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/keyvault/2023-07-01/managedhsms"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidation "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/custompollers"
	managedHSMValidation "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	kv74 "github.com/jackofallops/kermit/sdk/keyvault/7.4/keyvault"
)
func resourceArmKeyVaultManagedHardwareSecurityModuleUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	kvClient := meta.(*clients.Client).ManagedHSMs
	hsmClient := kvClient.ManagedHsmClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := managedhsms.ParseManagedHSMID(d.Id())
	if err != nil {
		return err
	}

	resp, err := hsmClient.Get(ctx, *id)
	if err != nil || resp.Model == nil || resp.Model.Properties == nil || resp.Model.Properties.HsmUri == nil {
		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	model := resp.Model
	hasUpdate := false
	if d.HasChange("tags") {
		hasUpdate = true
		model.Tags = tags.Expand(d.Get("tags").(map[string]interface{}))
	}
	if d.HasChange("network_acls") {
		hasUpdate = true
		model.Properties.NetworkAcls = expandMHSMNetworkAcls(d.Get("network_acls").([]interface{}))
	}
	if d.HasChange("public_network_access_enabled") {
		hasUpdate = true
		publicNetworkAccessEnabled := managedhsms.PublicNetworkAccessEnabled
		if !d.Get("public_network_access_enabled").(bool) {
			publicNetworkAccessEnabled = managedhsms.PublicNetworkAccessDisabled
		}
		model.Properties.PublicNetworkAccess = pointer.To(publicNetworkAccessEnabled)
	}
	if hasUpdate {
		if err := hsmClient.CreateOrUpdateThenPoll(ctx, *id, *model); err != nil {
			return fmt.Errorf("updating %s tags: %+v", id, err)
		}
	}

	// security domain download to activate this module
	if ok := d.HasChange("security_domain_key_vault_certificate_ids"); ok {
		// get hsm uri
		resp, err := hsmClient.Get(ctx, *id)
		if err != nil || resp.Model == nil || resp.Model.Properties == nil || resp.Model.Properties.HsmUri == nil {
			return fmt.Errorf("got nil HSMUri for %s: %+v", id, err)
		}

		keyVaultClient := meta.(*clients.Client).KeyVault.ManagementClient
		encData, err := securityDomainDownload(ctx, kvClient.DataPlaneSecurityDomainsClient, *keyVaultClient, *resp.Model.Properties.HsmUri, d.Get("security_domain_key_vault_certificate_ids").([]interface{}), d.Get("security_domain_quorum").(int))
		if err != nil {
			return fmt.Errorf("downloading security domain for %q: %+v", id, err)
		}
		d.Set("security_domain_encrypted_data", encData)
	}

	return nil
}
