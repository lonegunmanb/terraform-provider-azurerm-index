package github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/parse
import (
	"fmt"
	"net/url"
	"strings"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
)
func ManagedHSMDataPlaneRoleAssignmentID(input string, domainSuffix *string) (*ManagedHSMDataPlaneRoleAssignmentId, error) {
	if input == "" {
		return nil, fmt.Errorf("`input` was empty")
	}
	if domainSuffix != nil && !strings.HasPrefix(strings.ToLower(*domainSuffix), "managedhsm.") {
		return nil, fmt.Errorf("internal-error: the domainSuffix for Managed HSM %q didn't contain `managedhsm.`", *domainSuffix)
	}

	uri, err := url.Parse(input)
	if err != nil {
		return nil, fmt.Errorf("parsing %q: %+v", input, err)
	}

	// we need the ManagedHSMName and DomainSuffix from the Host
	endpoint, err := parseDataPlaneEndpoint(uri, domainSuffix)
	if err != nil {
		// intentionally not wrapping this
		return nil, err
	}

	// and then the Scope and RoleAssignmentName from the URI
	if !strings.HasPrefix(uri.Path, "/") {
		// sanity-checking, but we're expecting at least a `//` on the front
		return nil, fmt.Errorf("expected the path to start with `//` but got %q", uri.Path)
	}
	pathRaw := strings.TrimPrefix(uri.Path, "/")
	path, err := parseManagedHSMRoleAssignmentFromPath(pathRaw)
	if err != nil {
		return nil, err
	}

	return &ManagedHSMDataPlaneRoleAssignmentId{
		ManagedHSMName:     endpoint.ManagedHSMName,
		DomainSuffix:       endpoint.DomainSuffix,
		Scope:              path.scope,
		RoleAssignmentName: path.roleAssignmentName,
	}, nil
}
