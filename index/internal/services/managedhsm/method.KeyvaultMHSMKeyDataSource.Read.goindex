package github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm
import (
	"context"
	"encoding/base64"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/keyvault/2023-07-01/managedhsms"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (k KeyvaultMHSMKeyDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: time.Minute * 5,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.ManagedHSMs.DataPlaneRoleDefinitionsClient
			domainSuffix, ok := metadata.Client.Account.Environment.ManagedHSM.DomainSuffix()
			if !ok {
				return fmt.Errorf("could not determine Managed HSM domain suffix for environment %q", metadata.Client.Account.Environment.Name)
			}

			var config KeyVaultMHSMKeyDataSourceModel
			if err := metadata.Decode(&config); err != nil {
				return err
			}

			managedHsmId, err := managedhsms.ParseManagedHSMID(config.ManagedHSMID)
			if err != nil {
				return err
			}
			id := parse.NewManagedHSMDataPlaneVersionlessKeyID(managedHsmId.ManagedHSMName, *domainSuffix, config.Name)

			resp, err := client.GetKey(ctx, id.BaseUri(), id.KeyName, "")
			if err != nil {
				if response.WasNotFound(resp.Response.Response) {
					return fmt.Errorf("key %q not found", config.Name)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			if key := resp.Key; key != nil {
				config.Name = id.KeyName
				config.ManagedHSMID = managedHsmId.ID()
				config.KeyType = string(key.Kty)
				config.KeyOpts = flattenKeyVaultKeyOptions(key.KeyOps)
				config.Curve = string(key.Crv)
				config.Tags = tags.Flatten(resp.Tags)

				versionedID, err := parse.ManagedHSMDataPlaneVersionedKeyID(*key.Kid, domainSuffix)
				if err != nil {
					return fmt.Errorf("parsing versioned ID: %+v", err)
				}
				config.VersionedId = versionedID.ID()
				config.Version = versionedID.KeyVersion

				if key.N != nil {
					nBytes, err := base64.RawURLEncoding.DecodeString(*key.N)
					if err != nil {
						return fmt.Errorf("could not decode N: %+v", err)
					}
					config.KeySize = int64(len(nBytes) * 8)
				}

				if attributes := resp.Attributes; attributes != nil {
					if v := attributes.NotBefore; v != nil {
						config.NotBeforeDate = time.Time(*v).Format(time.RFC3339)
					}

					if v := attributes.Expires; v != nil {
						config.ExpirationDate = time.Time(*v).Format(time.RFC3339)
					}
				}
			}

			metadata.SetID(id)
			return metadata.Encode(&config)
		},
	}
}
