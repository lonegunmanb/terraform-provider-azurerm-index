package github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	validate2 "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/jackofallops/kermit/sdk/keyvault/7.4/keyvault"
)
func (r KeyVaultMHSMKeyRotationPolicyResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.ManagedHSMs.DataPlaneKeysClient
			domainSuffix, ok := metadata.Client.Account.Environment.ManagedHSM.DomainSuffix()
			if !ok {
				return fmt.Errorf("could not determine Managed HSM domain suffix for environment %q", metadata.Client.Account.Environment.Name)
			}

			var config MHSMKeyRotationPolicyResourceSchema
			if err := metadata.Decode(&config); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			keyID, err := parse.ManagedHSMDataPlaneVersionlessKeyID(config.ManagedHSMKeyID, domainSuffix)
			if err != nil {
				return fmt.Errorf("parsing Managed HSM Key ID: %+v", err)
			}

			if _, err = client.GetKey(ctx, keyID.BaseUri(), keyID.KeyName, ""); err != nil {
				return fmt.Errorf("checking for the presence of an existing %s: %+v", keyID, err)
			}

			// check key has rotation policy
			respPolicy, err := client.GetKeyRotationPolicy(ctx, keyID.BaseUri(), keyID.KeyName)
			if err != nil {
				switch {
				case response.WasForbidden(respPolicy.Response.Response):
					// If client is not authorized to access the policy:
					return fmt.Errorf("current client lacks permissions to read Key Rotation Policy for Key %q: %v", keyID, err)

				case response.WasNotFound(respPolicy.Response.Response):
					break
				default:
					return err
				}
			}

			if respPolicy.Attributes != nil && respPolicy.Attributes.ExpiryTime != nil {
				if respPolicy.LifetimeActions != nil && len(*respPolicy.LifetimeActions) > 0 {
					return metadata.ResourceRequiresImport(r.ResourceType(), keyID)
				}
			}

			if _, err := client.UpdateKeyRotationPolicy(ctx, keyID.BaseUri(), keyID.KeyName, expandKeyRotationPolicy(config)); err != nil {
				return fmt.Errorf("creating HSM Key Rotation Policy for Key %q: %v", keyID, err)
			}

			metadata.SetID(keyID)
			return nil
		},
	}
}
