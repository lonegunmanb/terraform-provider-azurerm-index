package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/edgezones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationfabrics"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationrecoveryplans"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func validateRecoveryGroup(input []RecoveryGroupModel) (bool, error) {
	bootCount := 0
	shutdownCount := 0
	failoverCount := 0
	for _, group := range input {
		if group.GroupType == string(replicationrecoveryplans.RecoveryPlanGroupTypeBoot) {
			bootCount += 1
		}

		if group.GroupType == string(replicationrecoveryplans.RecoveryPlanGroupTypeFailover) {
			failoverCount += 1
			if len(group.ReplicatedProtectedItems) > 0 {
				return false, fmt.Errorf("`replicated_protected_items` must not be specified for `recovery_group` with `Failover` type.")
			}
		}

		if group.GroupType == string(replicationrecoveryplans.RecoveryPlanGroupTypeShutdown) {
			shutdownCount += 1
			if len(group.ReplicatedProtectedItems) > 0 {
				return false, fmt.Errorf("`replicated_protected_items` must not be specified for `recovery_group` with `Shutdown` type.")
			}
		}

		for _, act := range append(group.PreAction, group.PostAction...) {
			if act.ActionDetailType == "ManualActionDetails" && act.FabricLocation != "" {
				return false, fmt.Errorf("`fabric_location` must not be specified for `recovery_group` with `ManualActionDetails` type.")
			}
		}
	}

	if bootCount == 0 || shutdownCount == 0 || failoverCount == 0 {
		return false, fmt.Errorf("every group type needs at least one recovery group")
	}
	return true, nil
}
