package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/protectionpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandBackupProtectionPolicyVMWorkloadRetentionDailyFormat(input []int64) *protectionpolicies.DailyRetentionFormat {
	if len(input) == 0 {
		return nil
	}

	daily := protectionpolicies.DailyRetentionFormat{}

	days := make([]protectionpolicies.Day, 0)
	for _, item := range input {
		day := protectionpolicies.Day{
			Date: pointer.To(item),
		}

		if item == 0 {
			day.IsLast = utils.Bool(true)
		} else {
			day.IsLast = utils.Bool(false)
		}

		days = append(days, day)
	}
	daily.DaysOfTheMonth = &days

	return &daily
}
