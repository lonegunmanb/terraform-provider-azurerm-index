package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"errors"
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/recoveryservices/mgmt/2018-07-10/siterecovery" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-01/proximityplacementgroups"
	vmwaremachines "github.com/hashicorp/go-azure-sdk/resource-manager/migrate/2020-01-01/machines"
	vmwarerunasaccounts "github.com/hashicorp/go-azure-sdk/resource-manager/migrate/2020-01-01/runasaccounts"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservices/2024-01-01/vaults"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationfabrics"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationprotecteditems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationprotectioncontainers"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/azuresdkhacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (k VMWareReplicatedVmResource) CustomizeDiff() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			// these fields are not returned by API, and only used in creation.
			diff := metadata.ResourceDiff

			_, newStorageAcc := diff.GetChange("default_log_storage_account_id")
			_, newDiskType := diff.GetChange("default_recovery_disk_type")
			_, newDes := diff.GetChange("default_target_disk_encryption_set_id")
			oldDisks, newDisks := diff.GetChange("managed_disk")
			for _, disk := range oldDisks.([]interface{}) {
				disk := disk.(map[string]interface{})
				if newStorageAcc.(string) != "" && disk["log_storage_account_id"] != newStorageAcc.(string) {
					metadata.ResourceDiff.ForceNew("default_log_storage_account_id")
				}
				if newDiskType.(string) != "" && disk["target_disk_type"] != newDiskType.(string) {
					metadata.ResourceDiff.ForceNew("default_recovery_disk_type")
				}
				if newDes.(string) != "" && disk["target_disk_encryption_set_id"] != newDes.(string) {
					metadata.ResourceDiff.ForceNew("default_target_disk_encryption_set_id")
				}
			}

			if diff.HasChanges("managed_disk") {
				// if user has specified `managed_disk`, it forces new.
				// or it acts as an optional field.
				if len(newDisks.([]interface{})) != 0 {
					metadata.ResourceDiff.ForceNew("managed_disk")
				}
			}

			return nil
		},
		Timeout: 30 * time.Minute,
	}
}
