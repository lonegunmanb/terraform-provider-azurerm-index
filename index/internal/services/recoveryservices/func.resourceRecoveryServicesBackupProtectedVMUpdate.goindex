package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/protecteditems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2024-10-01/protectionpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceRecoveryServicesBackupProtectedVMUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).RecoveryServices.ProtectedItemsClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := protecteditems.ParseProtectedItemID(d.Id())
	if err != nil {
		return err
	}

	existing, err := client.Get(ctx, *id, protecteditems.GetOperationOptions{})
	if err != nil {
		return err
	}

	if existing.Model == nil {
		return fmt.Errorf("retrieving %s: `model` was nil", id)
	}

	if existing.Model.Properties == nil {
		return fmt.Errorf("retrieving %s: `properties` was nil", id)
	}

	if _, ok := existing.Model.Properties.(protecteditems.AzureIaaSComputeVMProtectedItem); !ok {
		return fmt.Errorf("retrieving %s: `properties` was not a VM Protected Item", id)
	}

	model := *existing.Model
	properties := existing.Model.Properties.(protecteditems.AzureIaaSComputeVMProtectedItem)
	updateProtectedBackup := false

	if d.HasChange("backup_policy_id") {
		properties.PolicyId = pointer.To(d.Get("backup_policy_id").(string))
		updateProtectedBackup = true
	}

	if d.HasChange("exclude_disk_luns") || d.HasChange("include_disk_luns") {
		properties.ExtendedProperties = expandDiskExclusion(d)
		updateProtectedBackup = true
	}

	model.Properties = properties

	if updateProtectedBackup {
		if err := client.CreateOrUpdateThenPoll(ctx, *id, model); err != nil {
			return fmt.Errorf("updating %s: %+v", id, err)
		}
	}

	protectionState := string(pointer.From(properties.ProtectionState))
	protectionStopped := false
	if d.HasChange("protection_state") {
		protectionState = d.Get("protection_state").(string)
		protectionStopped = strings.EqualFold(protectionState, string(protecteditems.ProtectionStateProtectionStopped))
	}

	// the protection state will be updated in the additional update.
	if protectionStopped {
		p := protecteditems.ProtectionState(protectionState)
		vmId := d.Get("source_vm_id").(string)
		updateInput := protecteditems.ProtectedItemResource{
			Properties: &protecteditems.AzureIaaSComputeVMProtectedItem{
				ProtectionState:  &p,
				SourceResourceId: utils.String(vmId),
			},
		}

		if err := client.CreateOrUpdateThenPoll(ctx, *id, updateInput); err != nil {
			return fmt.Errorf("updating %s: %+v", *id, err)
		}
	}

	return resourceRecoveryServicesBackupProtectedVMRead(d, meta)
}
