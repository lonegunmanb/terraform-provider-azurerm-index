package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservices/2024-01-01/vaults"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/backupprotecteditems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/backupresourcevaultconfigs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/protecteditems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationvaultsetting"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyvaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceRecoveryServicesVaultRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).RecoveryServices.VaultsClient
	cfgsClient := meta.(*clients.Client).RecoveryServices.VaultsConfigsClient
	vaultSettingsClient := meta.(*clients.Client).RecoveryServices.VaultsSettingsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := vaults.ParseVaultID(d.Id())
	if err != nil {
		return err
	}

	cfgId := backupresourcevaultconfigs.NewVaultID(id.SubscriptionId, id.ResourceGroupName, id.VaultName)

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.VaultName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.Normalize(model.Location))

		if sku := model.Sku; sku != nil {
			d.Set("sku", string(sku.Name))
		}

		if prop := model.Properties; prop != nil {
			immutability := vaults.ImmutabilityStateDisabled
			if prop.SecuritySettings != nil && prop.SecuritySettings.ImmutabilitySettings != nil {
				immutability = pointer.From(prop.SecuritySettings.ImmutabilitySettings.State)
			}
			d.Set("immutability", string(immutability))

			d.Set("public_network_access_enabled", flattenRecoveryServicesVaultPublicNetworkAccess(model.Properties.PublicNetworkAccess))

			d.Set("monitoring", flattenRecoveryServicesVaultMonitorSettings(prop.MonitoringSettings))

			storageModeType := vaults.StandardTierStorageRedundancyInvalid
			crossRegionRestoreEnabled := false
			if prop.RedundancySettings != nil {
				storageModeType = pointer.From(prop.RedundancySettings.StandardTierStorageRedundancy)
				if prop.RedundancySettings.CrossRegionRestore != nil {
					crossRegionRestoreEnabled = *prop.RedundancySettings.CrossRegionRestore == vaults.CrossRegionRestoreEnabled
				}
			}
			d.Set("cross_region_restore_enabled", crossRegionRestoreEnabled)
			d.Set("storage_mode_type", string(storageModeType))
		}

		cfg, err := cfgsClient.Get(ctx, cfgId)
		if err != nil {
			return fmt.Errorf("retrieving %s: %+v", cfgId, err)
		}

		softDeleteEnabled := false
		if cfg.Model != nil && cfg.Model.Properties != nil && cfg.Model.Properties.SoftDeleteFeatureState != nil {
			softDeleteEnabled = *cfg.Model.Properties.SoftDeleteFeatureState == backupresourcevaultconfigs.SoftDeleteFeatureStateEnabled
		}

		d.Set("soft_delete_enabled", softDeleteEnabled)

		flattenIdentity, err := identity.FlattenSystemAndUserAssignedMap(model.Identity)
		if err != nil {
			return fmt.Errorf("flattening `identity`: %+v", err)
		}
		if err := d.Set("identity", flattenIdentity); err != nil {
			return fmt.Errorf("setting `identity`: %+v", err)
		}

		encryption := flattenVaultEncryption(*model)
		if encryption != nil {
			d.Set("encryption", []interface{}{encryption})
		}

		vaultSettingsId := replicationvaultsetting.NewReplicationVaultSettingID(id.SubscriptionId, id.ResourceGroupName, id.VaultName, "default")
		vaultSetting, err := vaultSettingsClient.Get(ctx, vaultSettingsId)
		if err != nil {
			return fmt.Errorf("reading Recovery Service Vault Setting %s: %+v", id.String(), err)
		}

		classicVmwareReplicationEnabled := false
		if vaultSetting.Model != nil && vaultSetting.Model.Properties != nil {
			if v := vaultSetting.Model.Properties.VMwareToAzureProviderType; v != nil {
				classicVmwareReplicationEnabled = strings.EqualFold(*v, "vmware")
			}
		}
		d.Set("classic_vmware_replication_enabled", classicVmwareReplicationEnabled)

		return tags.FlattenAndSet(d, model.Tags)
	}

	return nil
}
