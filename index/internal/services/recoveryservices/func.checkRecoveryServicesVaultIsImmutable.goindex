package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservices/2024-01-01/vaults"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/protecteditems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2024-10-01/protectionpolicies"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func checkRecoveryServicesVaultIsImmutable(ctx context.Context, client *vaults.VaultsClient, vaultId vaults.VaultId) error {
	// While not ideal, if `protection_state` = `BackupsSuspended`, we get the recovery vault so we can ensure it's in an immutable state
	// We're doing this here because the error message provided by Azure if it is not in an immutable state is confusing.
	// Relevant issue: https://github.com/Azure/azure-rest-api-specs/issues/32688

	existingVault, err := client.Get(ctx, vaultId)
	if err != nil {
		if !response.WasNotFound(existingVault.HttpResponse) {
			return fmt.Errorf("checking for presence of Recovery Services Vault %s: %+v", vaultId, err)
		}
	}

	if existingVault.Model != nil &&
		existingVault.Model.Properties != nil &&
		existingVault.Model.Properties.SecuritySettings != nil &&
		existingVault.Model.Properties.SecuritySettings.ImmutabilitySettings != nil {
		immutabilityState := pointer.From(existingVault.Model.Properties.SecuritySettings.ImmutabilitySettings.State)
		if immutabilityState == vaults.ImmutabilityStateDisabled {
			return errors.New("`protection_state` cannot be set to `BackupsSuspended` while the Recovery Services Vault is not in an immutable (`Locked` / `Unlocked`) state")
		}
	}

	return nil
}
