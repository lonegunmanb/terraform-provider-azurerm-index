package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservices/2024-01-01/vaults"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/backupprotecteditems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/backupresourcevaultconfigs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/protecteditems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationvaultsetting"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyvaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandRecoveryServicesVaultMonitorSettings(input []interface{}) *vaults.MonitoringSettings {
	if len(input) == 0 {
		return nil
	}

	v := input[0].(map[string]interface{})

	allJobAlert := vaults.AlertsStateDisabled
	if v["alerts_for_all_job_failures_enabled"].(bool) {
		allJobAlert = vaults.AlertsStateEnabled
	}

	criticalOperation := vaults.AlertsStateDisabled
	if v["alerts_for_critical_operation_failures_enabled"].(bool) {
		criticalOperation = vaults.AlertsStateEnabled
	}

	return pointer.To(vaults.MonitoringSettings{
		AzureMonitorAlertSettings: pointer.To(vaults.AzureMonitorAlertSettings{
			AlertsForAllJobFailures: pointer.To(allJobAlert),
		}),
		ClassicAlertSettings: pointer.To(vaults.ClassicAlertSettings{
			AlertsForCriticalOperations: pointer.To(criticalOperation),
		}),
	})
}
