package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"errors"
	"fmt"
	"log"
	"regexp"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2024-10-01/protectionpolicies"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceBackupProtectionPolicyVMUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).RecoveryServices.ProtectionPoliciesClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := protectionpolicies.ParseBackupPolicyID(d.Id())
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating %s", id)

	// getting this ready now because its shared between *everything*, time is... complicated for this resource
	timeOfDay := d.Get("backup.0.time").(string)
	dateOfDay, err := time.Parse(time.RFC3339, fmt.Sprintf("%sT%s:00Z", time.Now().Format("2006-01-02"), timeOfDay))
	if err != nil {
		return fmt.Errorf("generating time from %q for %s: %+v", timeOfDay, id, err)
	}
	times := append(make([]string, 0), date.Time{Time: dateOfDay}.String())

	// Less than 7 daily backups is no longer supported for create/update
	if d.HasChange("retention_daily.0.count") && (d.Get("retention_daily.0.count").(int) > 1 && d.Get("retention_daily.0.count").(int) < 7) {
		return fmt.Errorf("the Azure API has recently changed behaviour so that provisioning a `count` for the `retention_daily` field can no longer be less than 7 days for new/updates to existing Backup Policies. Please ensure that `count` is greater than 7, currently %d", d.Get("retention_daily.0.count").(int))
	}

	existing, err := client.Get(ctx, *id)
	if err != nil {
		return err
	}

	if existing.Model == nil {
		return fmt.Errorf("retrieving %s: `model` was nil", id)
	}

	if existing.Model.Properties == nil {
		return fmt.Errorf("retrieving %s: `properties` was nil", id)
	}

	if _, ok := existing.Model.Properties.(protectionpolicies.AzureIaaSVMProtectionPolicy); !ok {
		return fmt.Errorf("retrieving %s: `properties` was not a AzureIaaSVMProtectionPolicy", id)
	}

	model := *existing.Model
	properties := existing.Model.Properties.(protectionpolicies.AzureIaaSVMProtectionPolicy)

	properties.InstantRpRetentionRangeInDays = nil
	if d.HasChange("instant_restore_retention_days") {
		days := d.Get("instant_restore_retention_days").(int)
		if properties.PolicyType != nil && protectionpolicies.IAASVMPolicyTypeVOne == *properties.PolicyType && days > 5 {
			return fmt.Errorf("`instant_restore_retention_days` must be less than or equal to `5` when `policy_type` is `V1`")
		}

		properties.InstantRpRetentionRangeInDays = pointer.To(int64(days))
	}

	if d.HasChange("tiering_policy") {
		properties.TieringPolicy = expandBackupProtectionPolicyVMTieringPolicy(d.Get("tiering_policy").([]interface{}))
	}

	if d.HasChange("timezone") {
		properties.TimeZone = utils.String(d.Get("timezone").(string))
	}

	if d.HasChange("instant_restore_resource_group") {
		properties.InstantRPDetails = expandBackupProtectionPolicyVMResourceGroup(d)
	}

	if d.HasChange("backup") {
		schedulePolicy, err := expandBackupProtectionPolicyVMSchedule(d, times)
		if err != nil {
			return err
		}
		properties.SchedulePolicy = schedulePolicy
	}

	if d.HasChange("retention_daily") || d.HasChange("backup.0.time") {
		if properties.RetentionPolicy == nil {
			properties.RetentionPolicy = &protectionpolicies.LongTermRetentionPolicy{}
		}
		retentionPolicy, ok := properties.RetentionPolicy.(protectionpolicies.LongTermRetentionPolicy)
		if !ok {
			properties.RetentionPolicy = &protectionpolicies.LongTermRetentionPolicy{}
		}

		retentionPolicy.DailySchedule = expandBackupProtectionPolicyVMRetentionDaily(d, times)
		properties.RetentionPolicy = retentionPolicy
	}

	if d.HasChange("retention_weekly") {
		if properties.RetentionPolicy == nil {
			properties.RetentionPolicy = &protectionpolicies.LongTermRetentionPolicy{}
		}
		retentionPolicy, ok := properties.RetentionPolicy.(protectionpolicies.LongTermRetentionPolicy)
		if !ok {
			properties.RetentionPolicy = &protectionpolicies.LongTermRetentionPolicy{}
		}

		retentionPolicy.WeeklySchedule = expandBackupProtectionPolicyVMRetentionWeekly(d, times)
		properties.RetentionPolicy = retentionPolicy
	}

	if d.HasChange("retention_monthly") {
		if properties.RetentionPolicy == nil {
			properties.RetentionPolicy = &protectionpolicies.LongTermRetentionPolicy{}
		}
		retentionPolicy, ok := properties.RetentionPolicy.(protectionpolicies.LongTermRetentionPolicy)
		if !ok {
			properties.RetentionPolicy = &protectionpolicies.LongTermRetentionPolicy{}
		}

		retentionPolicy.MonthlySchedule = expandBackupProtectionPolicyVMRetentionMonthly(d, times)
		properties.RetentionPolicy = retentionPolicy
	}

	if d.HasChange("retention_yearly") {
		if properties.RetentionPolicy == nil {
			properties.RetentionPolicy = &protectionpolicies.LongTermRetentionPolicy{}
		}
		retentionPolicy, ok := properties.RetentionPolicy.(protectionpolicies.LongTermRetentionPolicy)
		if !ok {
			properties.RetentionPolicy = &protectionpolicies.LongTermRetentionPolicy{}
		}

		retentionPolicy.YearlySchedule = expandBackupProtectionPolicyVMRetentionYearly(d, times)
		properties.RetentionPolicy = retentionPolicy
	}

	model.Properties = properties
	if _, err = client.CreateOrUpdate(ctx, *id, model, protectionpolicies.DefaultCreateOrUpdateOperationOptions()); err != nil {
		return fmt.Errorf("updating %s: %+v", id, err)
	}

	if err = resourceBackupProtectionPolicyVMWaitForUpdate(ctx, client, *id, d); err != nil {
		return err
	}

	d.SetId(id.ID())

	return resourceBackupProtectionPolicyVMRead(d, meta)
}
