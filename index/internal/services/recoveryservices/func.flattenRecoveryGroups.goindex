package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/edgezones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationfabrics"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationrecoveryplans"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenRecoveryGroups(input []replicationrecoveryplans.RecoveryPlanGroup) (shutdown []GenericRecoveryGroupModel, failover []GenericRecoveryGroupModel, boot []BootRecoveryGroupModel) {
	shutdown = make([]GenericRecoveryGroupModel, 0)
	failover = make([]GenericRecoveryGroupModel, 0)
	boot = make([]BootRecoveryGroupModel, 0)
	for _, groupItem := range input {
		switch groupItem.GroupType {
		case replicationrecoveryplans.RecoveryPlanGroupTypeShutdown:
			o := GenericRecoveryGroupModel{}
			if groupItem.StartGroupActions != nil {
				o.PreAction = flattenRecoveryPlanActions(groupItem.StartGroupActions)
			}
			if groupItem.EndGroupActions != nil {
				o.PostAction = flattenRecoveryPlanActions(groupItem.EndGroupActions)
			}
			shutdown = append(shutdown, o)
		case replicationrecoveryplans.RecoveryPlanGroupTypeFailover:
			o := GenericRecoveryGroupModel{}
			if groupItem.StartGroupActions != nil {
				o.PreAction = flattenRecoveryPlanActions(groupItem.StartGroupActions)
			}
			if groupItem.EndGroupActions != nil {
				o.PostAction = flattenRecoveryPlanActions(groupItem.EndGroupActions)
			}
			failover = append(failover, o)
		case replicationrecoveryplans.RecoveryPlanGroupTypeBoot:
			o := BootRecoveryGroupModel{}
			o.ReplicatedProtectedItems = flattenRecoveryPlanProtectedItems(groupItem.ReplicationProtectedItems)
			if groupItem.StartGroupActions != nil {
				o.PreAction = flattenRecoveryPlanActions(groupItem.StartGroupActions)
			}
			if groupItem.EndGroupActions != nil {
				o.PostAction = flattenRecoveryPlanActions(groupItem.EndGroupActions)
			}
			boot = append(boot, o)
		}
	}

	return shutdown, failover, boot
}
