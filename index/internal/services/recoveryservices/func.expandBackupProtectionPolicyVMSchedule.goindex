package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/protectionpolicies"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandBackupProtectionPolicyVMSchedule(d *pluginsdk.ResourceData, times []string) (protectionpolicies.SchedulePolicy, error) {
	if bb, ok := d.Get("backup").([]interface{}); ok && len(bb) > 0 {
		block := bb[0].(map[string]interface{})

		policyType := d.Get("policy_type").(string)
		if policyType == string(protectionpolicies.IAASVMPolicyTypeVOne) {
			schedule := protectionpolicies.SimpleSchedulePolicy{ // LongTermSchedulePolicy has no properties
				ScheduleRunTimes: &times,
			}

			if v, ok := block["frequency"].(string); ok {
				schedule.ScheduleRunFrequency = pointer.To(protectionpolicies.ScheduleRunType(v))
			}

			if v, ok := block["weekdays"].(*pluginsdk.Set); ok {
				days := make([]protectionpolicies.DayOfWeek, 0)
				for _, day := range v.List() {
					days = append(days, protectionpolicies.DayOfWeek(day.(string)))
				}
				schedule.ScheduleRunDays = &days
			}

			return schedule, nil
		} else {
			frequency := block["frequency"].(string)
			schedule := protectionpolicies.SimpleSchedulePolicyV2{
				ScheduleRunFrequency: pointer.To(protectionpolicies.ScheduleRunType(frequency)),
			}

			switch frequency {
			case string(protectionpolicies.ScheduleRunTypeHourly):
				interval, ok := block["hour_interval"].(int)
				if !ok {
					return nil, fmt.Errorf("`hour_interval` must be specified when `backup.0.frequency` is `Hourly`")
				}

				duration, ok := block["hour_duration"].(int)
				if !ok {
					return nil, fmt.Errorf("`hour_duration` must be specified when `backup.0.frequency` is `Hourly`")
				}

				if interval == 0 && duration == 0 {
					return nil, fmt.Errorf("`hour_interval` and `hour_duration` must be specified when `backup.0.frequency` is `Hourly`")
				}
				if interval == 0 {
					return nil, fmt.Errorf("`hour_interval` must be specified when `backup.0.frequency` is `Hourly`")
				}
				if duration == 0 {
					return nil, fmt.Errorf("`hour_duration` must be specified when `backup.0.frequency` is `Hourly`")
				}

				if duration%interval != 0 {
					return nil, fmt.Errorf("`hour_duration` must be multiplier of `hour_interval`")
				}

				schedule.HourlySchedule = &protectionpolicies.HourlySchedule{
					Interval:                pointer.To(int64(interval)),
					ScheduleWindowStartTime: &times[0],
					ScheduleWindowDuration:  pointer.To(int64(duration)),
				}
			case string(protectionpolicies.ScheduleRunTypeDaily):
				schedule.DailySchedule = &protectionpolicies.DailySchedule{
					ScheduleRunTimes: &times,
				}
			case string(protectionpolicies.ScheduleRunTypeWeekly):
				weekDays, ok := block["weekdays"].(*pluginsdk.Set)
				if !ok {
					return nil, fmt.Errorf("`weekdays` must be specified when `backup.0.frequency` is `Weekly`")
				}

				days := make([]protectionpolicies.DayOfWeek, 0)
				for _, day := range weekDays.List() {
					days = append(days, protectionpolicies.DayOfWeek(day.(string)))
				}

				schedule.WeeklySchedule = &protectionpolicies.WeeklySchedule{
					ScheduleRunDays:  &days,
					ScheduleRunTimes: &times,
				}
			default:
				return nil, fmt.Errorf("Unrecognized value for backup.0.frequency")
			}

			return schedule, nil
		}
	}

	return nil, nil
}
