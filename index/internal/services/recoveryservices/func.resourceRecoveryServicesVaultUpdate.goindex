package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservices/2024-01-01/vaults"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/backupprotecteditems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/backupresourcevaultconfigs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2023-02-01/protecteditems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicessiterecovery/2024-04-01/replicationvaultsetting"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyvaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceRecoveryServicesVaultUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).RecoveryServices.VaultsClient
	cfgsClient := meta.(*clients.Client).RecoveryServices.VaultsConfigsClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := vaults.NewVaultID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))
	cfgId := backupresourcevaultconfigs.NewVaultID(id.SubscriptionId, id.ResourceGroupName, id.VaultName)

	encryption, err := expandEncryption(d)
	if err != nil {
		return err
	}
	existing, err := client.Get(ctx, id)
	if err != nil {
		return fmt.Errorf("checking for presence of existing Recovery Service %s: %+v", id.String(), err)
	}
	if existing.Model == nil {
		return fmt.Errorf("checking for presence of existing Recovery Service %s: `model` was nil", id.String())
	}
	model := existing.Model

	if model.Properties != nil {
		prop := model.Properties
		if prop.Encryption != nil {
			if encryption == nil {
				return fmt.Errorf("once encryption with your own key has been enabled it's not possible to disable it")
			}
			if *encryption.InfrastructureEncryption != *prop.Encryption.InfrastructureEncryption {
				return fmt.Errorf("once `infrastructure_encryption_enabled` has been set it's not possible to change it")
			}
			if d.HasChange("sku") {
				// Once encryption has been enabled, calling `CreateOrUpdate` without it is not allowed.
				// But `sku` can only be updated by `CreateOrUpdate` and the support for `encryption` in `CreateOrUpdate` is still under preview (https://docs.microsoft.com/azure/backup/encryption-at-rest-with-cmk?tabs=portal#enable-encryption-using-customer-managed-keys-at-vault-creation-in-preview).
				// TODO remove this restriction and add `encryption` to below `sku` update block when `encryption` in `CreateOrUpdate` is GA
				return fmt.Errorf("`sku` cannot be changed when encryption with your own key has been enabled")
			}
		}
	}

	expandedIdentity, err := identity.ExpandSystemAndUserAssignedMap(d.Get("identity").([]interface{}))
	if err != nil {
		return fmt.Errorf("expanding `identity`: %+v", err)
	}

	if model.Identity != nil && !validateIdentityUpdate(*existing.Model.Identity, *expandedIdentity) {
		return fmt.Errorf("`Once `identity` specified, the managed identity must not be disabled (even temporarily). Disabling the managed identity may lead to inconsistent behavior. Details could be found on https://learn.microsoft.com/en-us/azure/backup/encryption-at-rest-with-cmk?tabs=portal#enable-system-assigned-managed-identity-for-the-vault")
	}

	storageMode := d.Get("storage_mode_type").(string)
	crossRegionRestore := d.Get("cross_region_restore_enabled").(bool)

	if crossRegionRestore && storageMode != string(vaults.StandardTierStorageRedundancyGeoRedundant) {
		return fmt.Errorf("cannot enable cross region restore when storage mode type is not %s. %s", string(vaults.StandardTierStorageRedundancyGeoRedundant), id.String())
	}

	enhanchedSecurityState := backupresourcevaultconfigs.EnhancedSecurityStateEnabled
	cfg := backupresourcevaultconfigs.BackupResourceVaultConfigResource{
		Properties: &backupresourcevaultconfigs.BackupResourceVaultConfig{
			EnhancedSecurityState: &enhanchedSecurityState, // always enabled
		},
	}

	// `sku` can only be updated by `CreateOrUpdate` but not `Update`, so use `CreateOrUpdate` with required and unchangeable properties
	if d.HasChange("sku") {
		sku := d.Get("sku").(string)
		vault := vaults.Vault{
			Location: d.Get("location").(string),
			Identity: expandedIdentity,
			Sku: &vaults.Sku{
				Name: vaults.SkuName(sku),
			},
			Properties: &vaults.VaultProperties{
				PublicNetworkAccess: expandRecoveryServicesVaultPublicNetworkAccess(d.Get("public_network_access_enabled").(bool)), // It's required to call CreateOrUpdate.
				MonitoringSettings:  expandRecoveryServicesVaultMonitorSettings(d.Get("monitoring").([]interface{})),
			},
		}

		if vaults.SkuName(sku) == vaults.SkuNameRSZero {
			vault.Sku.Tier = utils.String("Standard")
		}

		err = client.CreateOrUpdateThenPoll(ctx, id, vault)
		if err != nil {
			return fmt.Errorf("updating Recovery Service %s: %+v", id.String(), err)
		}
	}

	requireAdditionalUpdate := false
	additionalUpdatePatch := vaults.PatchVault{
		Properties: &vaults.VaultProperties{},
	}
	vault := vaults.PatchVault{
		Properties: &vaults.VaultProperties{},
	}

	if d.HasChange("public_network_access_enabled") {
		vault.Properties.PublicNetworkAccess = expandRecoveryServicesVaultPublicNetworkAccess(d.Get("public_network_access_enabled").(bool))
	}

	if d.HasChanges("monitoring") {
		vault.Properties.MonitoringSettings = expandRecoveryServicesVaultMonitorSettings(d.Get("monitoring").([]interface{}))
	}

	if d.HasChange("identity") {
		vault.Identity = expandedIdentity
	}

	if d.HasChange("encryption") {
		vault.Properties.Encryption = encryption
	}

	if d.HasChange("tags") {
		vault.Tags = tags.Expand(d.Get("tags").(map[string]interface{}))
	}

	if d.HasChange("immutability") {
		// The API does not allow to set the immutability from `Disabled` to `Locked` directly,
		// Hence we firstly make it `Unlocked`, and once created, we will update it to `Locked`.
		// Note: The `immutability` could be transitioned only in the limited directions.
		// Locked <- Unlocked <-> Disabled

		// When the service returns `null`, it equals `disabled`
		currentImmutability := pointer.To(vaults.ImmutabilityStateDisabled)
		if model.Properties != nil && model.Properties.SecuritySettings != nil && model.Properties.SecuritySettings.ImmutabilitySettings != nil && model.Properties.SecuritySettings.ImmutabilitySettings.State != nil {
			currentImmutability = model.Properties.SecuritySettings.ImmutabilitySettings.State
		}
		immutability := d.Get("immutability")
		if string(*currentImmutability) == string(vaults.ImmutabilityStateDisabled) && immutability == string(vaults.ImmutabilityStateLocked) {
			additionalUpdatePatch.Properties.SecuritySettings = expandRecoveryServicesVaultSecuritySettings(immutability)
			requireAdditionalUpdate = true
			immutability = string(vaults.ImmutabilityStateUnlocked)
		}
		vault.Properties.SecuritySettings = expandRecoveryServicesVaultSecuritySettings(immutability)
	}

	crossRegionRestoreEnabled := vaults.CrossRegionRestoreDisabled
	if crossRegionRestore {
		crossRegionRestoreEnabled = vaults.CrossRegionRestoreEnabled
	}

	if d.HasChanges("storage_mode_type", "cross_region_restore_enabled") {
		vault.Properties.RedundancySettings = &vaults.VaultPropertiesRedundancySettings{
			CrossRegionRestore:            &crossRegionRestoreEnabled,
			StandardTierStorageRedundancy: pointer.To(vaults.StandardTierStorageRedundancy(storageMode)),
		}
	}

	err = client.UpdateThenPoll(ctx, id, vault)
	if err != nil {
		return fmt.Errorf("updating  %s: %+v", id, err)
	}

	if requireAdditionalUpdate {
		err := client.UpdateThenPoll(ctx, id, additionalUpdatePatch)
		if err != nil {
			return fmt.Errorf("updating Recovery Service %s: %+v, but recovery vault was created, a manually import might be required", id.String(), err)
		}
	}

	// an update on vault will cause the vault config reset to default, so whether the config has change or not, it needs to be updated.
	var StateRefreshPendingStrings []string
	var StateRefreshTargetStrings []string
	if sd := d.Get("soft_delete_enabled").(bool); sd {
		state := backupresourcevaultconfigs.SoftDeleteFeatureStateEnabled
		cfg.Properties.SoftDeleteFeatureState = &state
		StateRefreshPendingStrings = []string{string(backupresourcevaultconfigs.SoftDeleteFeatureStateDisabled)}
		StateRefreshTargetStrings = []string{string(backupresourcevaultconfigs.SoftDeleteFeatureStateEnabled)}
	} else {
		state := backupresourcevaultconfigs.SoftDeleteFeatureStateDisabled
		cfg.Properties.SoftDeleteFeatureState = &state
		StateRefreshPendingStrings = []string{string(backupresourcevaultconfigs.SoftDeleteFeatureStateEnabled)}
		StateRefreshTargetStrings = []string{string(backupresourcevaultconfigs.SoftDeleteFeatureStateDisabled)}
	}

	_, err = cfgsClient.Update(ctx, cfgId, cfg)
	if err != nil {
		return err
	}

	// sometimes update sync succeed but READ returns with old value, so we refresh till the value is correct.
	// tracked by https://github.com/Azure/azure-rest-api-specs/issues/21548
	stateConf := &pluginsdk.StateChangeConf{
		Pending:                   StateRefreshPendingStrings,
		Target:                    StateRefreshTargetStrings,
		MinTimeout:                30 * time.Second,
		ContinuousTargetOccurence: 3,
		Refresh:                   resourceRecoveryServicesVaultSoftDeleteRefreshFunc(ctx, cfgsClient, cfgId),
	}

	stateConf.Timeout = d.Timeout(pluginsdk.TimeoutUpdate)

	if _, err := stateConf.WaitForStateContext(ctx); err != nil {
		return fmt.Errorf("waiting for on update for Recovery Service %s: %+v", id.String(), err)
	}

	d.SetId(id.ID())
	return resourceRecoveryServicesVaultRead(d, meta)
}
