package github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/recoveryservicesbackup/2024-10-01/protectionpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/recoveryservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandBackupProtectionPolicyVMWorkloadRetentionPolicy(input ProtectionPolicy, times []string) (protectionpolicies.RetentionPolicy, error) {
	if input.PolicyType == string(protectionpolicies.PolicyTypeFull) {
		retentionPolicy := protectionpolicies.LongTermRetentionPolicy{}

		if len(input.RetentionDaily) > 0 {
			retentionDaily := input.RetentionDaily[0]

			retentionPolicy.DailySchedule = &protectionpolicies.DailyRetentionSchedule{
				RetentionTimes: &times,
				RetentionDuration: &protectionpolicies.RetentionDuration{
					Count:        pointer.To(retentionDaily.Count),
					DurationType: pointer.To(protectionpolicies.RetentionDurationTypeDays),
				},
			}
		}

		if len(input.RetentionWeekly) > 0 {
			retentionWeekly := input.RetentionWeekly[0]

			retentionPolicy.WeeklySchedule = &protectionpolicies.WeeklyRetentionSchedule{
				RetentionTimes: &times,
				RetentionDuration: &protectionpolicies.RetentionDuration{
					Count:        pointer.To(retentionWeekly.Count),
					DurationType: pointer.To(protectionpolicies.RetentionDurationTypeWeeks),
				},
			}

			if v := retentionWeekly.Weekdays; len(v) > 0 {
				days := make([]protectionpolicies.DayOfWeek, 0)
				for _, day := range v {
					days = append(days, protectionpolicies.DayOfWeek(day))
				}
				retentionPolicy.WeeklySchedule.DaysOfTheWeek = &days
			}
		}

		if len(input.RetentionMonthly) > 0 {
			retentionMonthly := input.RetentionMonthly[0]

			if input.Backup[0].Frequency == string(protectionpolicies.ScheduleRunTypeWeekly) && retentionMonthly.FormatType != string(protectionpolicies.RetentionScheduleFormatWeekly) {
				return nil, fmt.Errorf("`retention_monthly.format_type` must be `Weekly` when `policy_type` is `Full` and `frequency` is `Weekly`")
			}

			if retentionMonthly.FormatType == string(protectionpolicies.RetentionScheduleFormatDaily) && (len(retentionMonthly.Monthdays) == 0) {
				return nil, fmt.Errorf("`retention_monthly.monthdays` must be set when `retention_monthly.format_type` is `Daily`")
			}

			if retentionMonthly.FormatType == string(protectionpolicies.RetentionScheduleFormatWeekly) && (len(retentionMonthly.Weeks) == 0 || len(retentionMonthly.Weekdays) == 0) {
				return nil, fmt.Errorf("`retention_monthly.weeks` and `retention_monthly.weekdays` must be set when `retention_monthly.format_type` is `Weekly`")
			}

			retentionPolicy.MonthlySchedule = &protectionpolicies.MonthlyRetentionSchedule{
				RetentionScheduleFormatType: pointer.To(protectionpolicies.RetentionScheduleFormat(retentionMonthly.FormatType)),
				RetentionScheduleDaily:      expandBackupProtectionPolicyVMWorkloadRetentionDailyFormat(retentionMonthly.Monthdays),
				RetentionScheduleWeekly:     expandBackupProtectionPolicyVMWorkloadRetentionWeeklyFormat(retentionMonthly.Weekdays, retentionMonthly.Weeks),
				RetentionTimes:              &times,
				RetentionDuration: &protectionpolicies.RetentionDuration{
					Count:        pointer.To(retentionMonthly.Count),
					DurationType: pointer.To(protectionpolicies.RetentionDurationTypeMonths),
				},
			}
		}

		if len(input.RetentionYearly) > 0 {
			retentionYearly := input.RetentionYearly[0]

			if input.Backup[0].Frequency == string(protectionpolicies.ScheduleRunTypeWeekly) && retentionYearly.FormatType != string(protectionpolicies.RetentionScheduleFormatWeekly) {
				return nil, fmt.Errorf("`retention_yearly.format_type` must be `Weekly` when `policy_type` is `Full` and `frequency` is `Weekly`")
			}

			if retentionYearly.FormatType == string(protectionpolicies.RetentionScheduleFormatDaily) && (len(retentionYearly.Monthdays) == 0) {
				return nil, fmt.Errorf("`retention_yearly.monthdays` must be set when `retention_yearly.format_type` is `Daily`")
			}

			if retentionYearly.FormatType == string(protectionpolicies.RetentionScheduleFormatWeekly) && (len(retentionYearly.Weeks) == 0 || len(retentionYearly.Weekdays) == 0) {
				return nil, fmt.Errorf("`retention_yearly.weeks` and `retention_yearly.weekdays` must be set when `retention_yearly.format_type` is `Weekly`")
			}

			retentionPolicy.YearlySchedule = &protectionpolicies.YearlyRetentionSchedule{
				RetentionScheduleFormatType: pointer.To(protectionpolicies.RetentionScheduleFormat(retentionYearly.FormatType)),
				RetentionScheduleDaily:      expandBackupProtectionPolicyVMWorkloadRetentionDailyFormat(retentionYearly.Monthdays),
				RetentionScheduleWeekly:     expandBackupProtectionPolicyVMWorkloadRetentionWeeklyFormat(retentionYearly.Weekdays, retentionYearly.Weeks),
				RetentionTimes:              &times,
				RetentionDuration: &protectionpolicies.RetentionDuration{
					Count:        pointer.To(retentionYearly.Count),
					DurationType: pointer.To(protectionpolicies.RetentionDurationTypeYears),
				},
			}

			if v := retentionYearly.Months; v != nil {
				months := make([]protectionpolicies.MonthOfYear, 0)
				for _, month := range v {
					months = append(months, protectionpolicies.MonthOfYear(month))
				}
				retentionPolicy.YearlySchedule.MonthsOfYear = &months
			}
		}

		return retentionPolicy, nil
	} else {
		retentionPolicy := protectionpolicies.SimpleRetentionPolicy{}

		if len(input.SimpleRetention) > 0 {
			simpleRetention := input.SimpleRetention[0]

			retentionPolicy.RetentionDuration = &protectionpolicies.RetentionDuration{
				Count:        pointer.To(simpleRetention.Count),
				DurationType: pointer.To(protectionpolicies.RetentionDurationTypeDays),
			}
		}

		return retentionPolicy, nil
	}
}
