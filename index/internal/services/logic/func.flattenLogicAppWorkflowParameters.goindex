package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"encoding/json"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/integrationaccounts"
	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/integrationserviceenvironments"
	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/workflows"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenLogicAppWorkflowParameters(d *pluginsdk.ResourceData, input *map[string]workflows.WorkflowParameter, paramDefs map[string]interface{}) (map[string]interface{}, error) {
	output := make(map[string]interface{})
	if input == nil {
		return output, nil
	}

	// Read the "parameters" from state, which is used to fill in the "sensitive" properties.
	paramInState := make(map[string]interface{})
	paramsRaw := d.Get("parameters")
	if params, ok := paramsRaw.(map[string]interface{}); ok {
		paramInState = params
	}

	for k, v := range *input {
		defRaw, ok := paramDefs[k]
		if !ok {
			// This should never happen.
			log.Printf("[WARN] The parameter %s is not defined in the Logic App Workflow", k)
			continue
		}

		def := defRaw.(map[string]interface{})
		t := workflows.ParameterType(def["type"].(string))

		var value string
		switch t {
		case workflows.ParameterTypeBool:
			if v.Value == nil {
				return nil, fmt.Errorf("the value of parameter %s is expected to be bool, but got nil", k)
			}
			valueRaw := *v.Value
			tv, ok := valueRaw.(bool)
			if !ok {
				return nil, fmt.Errorf("the value of parameter %s is expected to be bool, but got %T", k, v.Value)
			}
			value = "true"
			if !tv {
				value = "false"
			}
		case workflows.ParameterTypeFloat:
			if v.Value == nil {
				return nil, fmt.Errorf("the value of parameter %s is expected to be bool, but got nil", k)
			}
			valueRaw := *v.Value
			// Note that the json unmarshalled response doesn't differ between float and int, as json has only type number.
			tv, ok := valueRaw.(float64)
			if !ok {
				return nil, fmt.Errorf("the value of parameter %s is expected to be float64, but got %T", k, v.Value)
			}
			value = strconv.FormatFloat(tv, 'f', -1, 64)
		case workflows.ParameterTypeInt:
			if v.Value == nil {
				return nil, fmt.Errorf("the value of parameter %s is expected to be bool, but got nil", k)
			}
			valueRaw := *v.Value
			// Note that the json unmarshalled response doesn't differ between float and int, as json has only type number.
			tv, ok := valueRaw.(float64)
			if !ok {
				return nil, fmt.Errorf("the value of parameter %s is expected to be float64, but got %T", k, v.Value)
			}
			value = strconv.Itoa(int(tv))

		case workflows.ParameterTypeArray:
			if v.Value == nil {
				return nil, fmt.Errorf("the value of parameter %s is expected to be bool, but got nil", k)
			}
			valueRaw := *v.Value
			tv, ok := valueRaw.([]interface{})
			if !ok {
				return nil, fmt.Errorf("the value of parameter %s is expected to be []interface{}, but got %T", k, v.Value)
			}
			obj, err := json.Marshal(tv)
			if err != nil {
				return nil, fmt.Errorf("converting %+v from json: %v", tv, err)
			}
			value = string(obj)

		case workflows.ParameterTypeObject:
			if v.Value == nil {
				return nil, fmt.Errorf("the value of parameter %s is expected to be bool, but got nil", k)
			}
			valueRaw := *v.Value
			tv, ok := valueRaw.(map[string]interface{})
			if !ok {
				return nil, fmt.Errorf("the value of parameter %s is expected to be map[string]interface{}, but got %T", k, v.Value)
			}
			obj, err := json.Marshal(tv)
			if err != nil {
				return nil, fmt.Errorf("converting %+v from json: %v", tv, err)
			}
			value = string(obj)

		case workflows.ParameterTypeString:
			if v.Value == nil {
				return nil, fmt.Errorf("the value of parameter %s is expected to be bool, but got nil", k)
			}
			valueRaw := *v.Value
			tv, ok := valueRaw.(string)
			if !ok {
				return nil, fmt.Errorf("the value of parameter %s is expected to be string, but got %T", k, v.Value)
			}
			value = tv

		case workflows.ParameterTypeSecureString,
			workflows.ParameterTypeSecureObject:
			// This is not returned from API, we will try to read them from the state instead.
			if v, ok := paramInState[k]; ok {
				value = v.(string) // The value in state here is guaranteed to be a string, so directly cast the type.
			}
		}

		output[k] = value
	}

	return output, nil
}
