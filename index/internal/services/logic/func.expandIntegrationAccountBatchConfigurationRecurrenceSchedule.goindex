package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/integrationaccountbatchconfigurations"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/logic/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandIntegrationAccountBatchConfigurationRecurrenceSchedule(input []interface{}) *integrationaccountbatchconfigurations.RecurrenceSchedule {
	if len(input) == 0 {
		return nil
	}
	v := input[0].(map[string]interface{})

	result := integrationaccountbatchconfigurations.RecurrenceSchedule{}

	if hours := v["hours"].(*pluginsdk.Set).List(); len(hours) != 0 {
		result.Hours = utils.ExpandInt64Slice(hours)
	}

	if minutes := v["minutes"].(*pluginsdk.Set).List(); len(minutes) != 0 {
		result.Minutes = utils.ExpandInt64Slice(minutes)
	}

	if rawWeekDays := v["week_days"].(*pluginsdk.Set).List(); len(rawWeekDays) != 0 {
		weekDays := make([]integrationaccountbatchconfigurations.DaysOfWeek, 0)
		for _, item := range *(utils.ExpandStringSlice(rawWeekDays)) {
			weekDays = append(weekDays, (integrationaccountbatchconfigurations.DaysOfWeek)(item))
		}
		result.WeekDays = &weekDays
	}

	if monthDays := v["month_days"].(*pluginsdk.Set).List(); len(monthDays) != 0 {
		result.MonthDays = utils.ExpandInt64Slice(monthDays)
	}

	if monthlyOccurrence := v["monthly"].(*pluginsdk.Set).List(); len(monthlyOccurrence) != 0 {
		result.MonthlyOccurrences = expandIntegrationAccountBatchConfigurationRecurrenceScheduleOccurrences(monthlyOccurrence)
	}

	return &result
}
