package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"fmt"
	"log"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-01-01/resourceproviders"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/logic/validate"
	storageValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceLogicAppStandardRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).AppService.WebAppsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := commonids.ParseLogicAppId(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] %s was not found - removing from state", *id)
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.SiteName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("kind", pointer.From(model.Kind))
		d.Set("location", location.Normalize(model.Location))

		flattenedIdentity, err := identity.FlattenSystemAndUserAssignedMap(model.Identity)
		if err != nil {
			return fmt.Errorf("flattening `identity`: %+v", err)
		}
		if err := d.Set("identity", flattenedIdentity); err != nil {
			return fmt.Errorf("setting `identity`: %s", err)
		}

		if err := tags.FlattenAndSet(d, model.Tags); err != nil {
			return fmt.Errorf("setting `tags`: %+v", err)
		}

		if props := model.Properties; props != nil {
			servicePlanId, err := commonids.ParseAppServicePlanIDInsensitively(*props.ServerFarmId)
			if err != nil {
				return err
			}
			d.Set("app_service_plan_id", servicePlanId.ID())
			d.Set("enabled", pointer.From(props.Enabled))
			d.Set("default_hostname", pointer.From(props.DefaultHostName))
			d.Set("https_only", pointer.From(props.HTTPSOnly))
			d.Set("outbound_ip_addresses", pointer.From(props.OutboundIPAddresses))
			d.Set("possible_outbound_ip_addresses", pointer.From(props.PossibleOutboundIPAddresses))
			d.Set("client_affinity_enabled", pointer.From(props.ClientAffinityEnabled))
			d.Set("custom_domain_verification_id", pointer.From(props.CustomDomainVerificationId))
			d.Set("virtual_network_subnet_id", pointer.From(props.VirtualNetworkSubnetId))
			d.Set("vnet_content_share_enabled", pointer.From(props.VnetContentShareEnabled))
			d.Set("public_network_access", pointer.From(props.PublicNetworkAccess))

			clientCertMode := ""
			if props.ClientCertEnabled != nil && *props.ClientCertEnabled {
				clientCertMode = string(pointer.From(props.ClientCertMode))
			}
			d.Set("client_certificate_mode", clientCertMode)
		}
	}

	appSettingsResp, err := client.ListApplicationSettings(ctx, *id)
	if err != nil {
		return fmt.Errorf("listing application settings for %s: %+v", *id, err)
	}

	if model := appSettingsResp.Model; model != nil {
		appSettings := pointer.From(model.Properties)

		connectionString := appSettings["AzureWebJobsStorage"]

		// This teases out the necessary attributes from the storage connection string
		connectionStringParts := strings.Split(connectionString, ";")
		for _, part := range connectionStringParts {
			if strings.HasPrefix(part, "AccountName") {
				accountNameParts := strings.Split(part, "AccountName=")
				if len(accountNameParts) > 1 {
					d.Set("storage_account_name", accountNameParts[1])
				}
			}
			if strings.HasPrefix(part, "AccountKey") {
				accountKeyParts := strings.Split(part, "AccountKey=")
				if len(accountKeyParts) > 1 {
					d.Set("storage_account_access_key", accountKeyParts[1])
				}
			}
		}

		d.Set("version", appSettings["FUNCTIONS_EXTENSION_VERSION"])

		if _, ok := appSettings["AzureFunctionsJobHost__extensionBundle__id"]; ok {
			d.Set("use_extension_bundle", true)
			if val, ok := appSettings["AzureFunctionsJobHost__extensionBundle__version"]; ok {
				d.Set("bundle_version", val)
			}
		} else {
			d.Set("use_extension_bundle", false)
			d.Set("bundle_version", "[1.*, 2.0.0)")
		}

		d.Set("storage_account_share_name", appSettings["WEBSITE_CONTENTSHARE"])

		// Remove all the settings that are created by this resource so we don't to have to specify in app_settings
		// block whenever we use azurerm_logic_app_standard.
		delete(appSettings, "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING")
		delete(appSettings, "APP_KIND")
		delete(appSettings, "AzureFunctionsJobHost__extensionBundle__id")
		delete(appSettings, "AzureFunctionsJobHost__extensionBundle__version")
		delete(appSettings, "AzureWebJobsDashboard")
		delete(appSettings, "AzureWebJobsStorage")
		delete(appSettings, "FUNCTIONS_EXTENSION_VERSION")
		delete(appSettings, "WEBSITE_CONTENTSHARE")

		if err = d.Set("app_settings", appSettings); err != nil {
			return err
		}
	}

	connectionStringsResp, err := client.ListConnectionStrings(ctx, *id)
	if err != nil {
		return fmt.Errorf("listing connection strings for %s: %+v", *id, err)
	}

	if model := connectionStringsResp.Model; model != nil {
		if err = d.Set("connection_string", flattenLogicAppStandardConnectionStrings(model.Properties)); err != nil {
			return err
		}
	}

	ftpBasicAuth, err := client.GetFtpAllowed(ctx, *id)
	if err != nil || ftpBasicAuth.Model == nil {
		return fmt.Errorf("retrieving FTP publish basic authentication policy for %s: %+v", id, err)
	}

	if props := ftpBasicAuth.Model.Properties; props != nil {
		d.Set("ftp_publish_basic_authentication_enabled", props.Allow)
	}

	scmBasicAuth, err := client.GetScmAllowed(ctx, *id)
	if err != nil || scmBasicAuth.Model == nil {
		return fmt.Errorf("retrieving SCM publish basic authentication policy for %s: %+v", id, err)
	}

	if props := scmBasicAuth.Model.Properties; props != nil {
		d.Set("scm_publish_basic_authentication_enabled", props.Allow)
	}

	siteCredentials, err := helpers.ListPublishingCredentials(ctx, client, *id)
	if err != nil {
		return fmt.Errorf("listing publishing credentials for %s: %+v", *id, err)
	}

	if err = d.Set("site_credential", flattenLogicAppStandardSiteCredential(siteCredentials)); err != nil {
		return err
	}

	configResp, err := client.GetConfiguration(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving the configuration for %s: %+v", *id, err)
	}

	if model := configResp.Model; model != nil {
		siteConfig := flattenLogicAppStandardSiteConfig(model.Properties)
		if err = d.Set("site_config", siteConfig); err != nil {
			return err
		}
	}

	return nil
}
