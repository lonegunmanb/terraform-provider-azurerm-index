package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-01-01/resourceproviders"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/logic/validate"
	storageValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandLogicAppStandardSiteConfigForCreate(d []helpers.LogicAppSiteConfig, metadata sdk.ResourceMetaData) (*webapps.SiteConfig, error) {
	siteConfig := &webapps.SiteConfig{}
	if len(d) == 0 {
		return siteConfig, nil
	}

	config := d[0]

	siteConfig.AlwaysOn = pointer.To(config.AlwaysOn)
	siteConfig.HTTP20Enabled = pointer.To(config.HTTP2Enabled)
	siteConfig.FunctionsRuntimeScaleMonitoringEnabled = pointer.To(config.RuntimeScaleMonitoringEnabled)
	siteConfig.Use32BitWorkerProcess = pointer.To(config.Use32BitWorkerProcess)
	siteConfig.WebSocketsEnabled = pointer.To(config.WebSocketsEnabled)

	if config.LinuxFxVersion != "" {
		siteConfig.LinuxFxVersion = pointer.To(config.LinuxFxVersion)
	}

	if len(config.Cors) > 0 {
		siteConfig.Cors = helpers.ExpandCorsSettings(config.Cors)
	}

	ipr, err := helpers.ExpandIpRestrictions(config.IpRestriction)
	if err != nil {
		return nil, err
	}
	siteConfig.IPSecurityRestrictions = ipr

	ipr, err = helpers.ExpandIpRestrictions(config.SCMIPRestriction)
	if err != nil {
		return nil, err
	}
	siteConfig.ScmIPSecurityRestrictions = ipr

	siteConfig.ScmIPSecurityRestrictionsUseMain = pointer.To(config.SCMUseMainIpRestriction)

	siteConfig.ScmMinTlsVersion = pointer.ToEnum[webapps.SupportedTlsVersions](config.SCMMinTLSVersion)
	siteConfig.ScmType = pointer.ToEnum[webapps.ScmType](config.SCMType)
	siteConfig.MinTlsVersion = pointer.ToEnum[webapps.SupportedTlsVersions](config.MinTLSVersion)

	siteConfig.FtpsState = pointer.ToEnum[webapps.FtpsState](config.FTPSState)

	if metadata.ResourceData.GetRawConfig().AsValueMap()["site_config"].AsValueSlice()[0].AsValueMap()["pre_warmed_instance_count"].IsKnown() {
		siteConfig.PreWarmedInstanceCount = pointer.To(config.PreWarmedInstanceCount)
	}
	siteConfig.HealthCheckPath = pointer.To(config.HealthCheckPath)

	if metadata.ResourceData.GetRawConfig().AsValueMap()["site_config"].AsValueSlice()[0].AsValueMap()["elastic_instance_minimum"].IsKnown() && config.ElasticInstanceMinimum > 0 {
		siteConfig.MinimumElasticInstanceCount = pointer.To(config.ElasticInstanceMinimum)
	}

	if metadata.ResourceData.GetRawConfig().AsValueMap()["site_config"].AsValueSlice()[0].AsValueMap()["app_scale_limit"].IsKnown() {
		siteConfig.FunctionAppScaleLimit = pointer.To(config.AppScaleLimit)
	}

	siteConfig.NetFrameworkVersion = pointer.To(config.DotnetFrameworkVersion)
	siteConfig.VnetRouteAllEnabled = pointer.To(config.VNETRouteAllEnabled)

	siteConfig.PublicNetworkAccess = pointer.To(metadata.ResourceData.Get("public_network_access").(string))
	if !features.FivePointOh() {
		siteConfig.PublicNetworkAccess = pointer.To(reconcilePNA(metadata))
	}

	return siteConfig, nil
}
