package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"fmt"
	"log"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/workflows"
	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/workflowtriggers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/logic/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func retrieveLogicAppTrigger(d *pluginsdk.ResourceData, meta interface{}, id workflowtriggers.TriggerId) (*map[string]interface{}, *workflows.Workflow, *string, error) {
	workflowId := workflows.NewWorkflowID(id.SubscriptionId, id.ResourceGroupName, id.WorkflowName)

	t, app, err := retrieveLogicAppComponent(d, meta, "Trigger", "triggers", workflowId, id.TriggerName)

	if err != nil || t == nil {
		return nil, nil, nil, err
	}

	trigger := *t
	tType := trigger["type"]
	if tType == nil {
		return nil, nil, nil, fmt.Errorf("[ERROR] `type` was nil for %s", id.ID())
	}

	log.Printf("[DEBUG] trigger type is %s", tType.(string))

	if IsCallbackType(tType.(string)) {
		url, err := retreiveLogicAppTriggerCallbackUrl(d, meta, id)
		if err != nil {
			return nil, nil, nil, err
		}

		if url == nil {
			return nil, nil, nil, fmt.Errorf("[ERROR] `callback_url` was nil for %s", id.ID())
		}

		return t, app, url, err
	}

	return t, app, nil, err
}
