package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/integrationaccountbatchconfigurations"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/logic/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenIntegrationAccountBatchConfigurationWorkflowTriggerRecurrence(input *integrationaccountbatchconfigurations.WorkflowTriggerRecurrence) []interface{} {
	if input == nil {
		return make([]interface{}, 0)
	}

	var endTime string
	if input.EndTime != nil {
		endTime = *input.EndTime
	}

	var frequency integrationaccountbatchconfigurations.RecurrenceFrequency
	if input.Frequency != nil && *input.Frequency != "" {
		frequency = *input.Frequency
	}

	var interval int64
	if input.Interval != nil {
		interval = *input.Interval
	}

	var startTime string
	if input.StartTime != nil {
		startTime = *input.StartTime
	}

	var timeZone string
	if input.TimeZone != nil {
		timeZone = *input.TimeZone
	}

	return []interface{}{
		map[string]interface{}{
			"end_time":   endTime,
			"frequency":  frequency,
			"interval":   interval,
			"schedule":   flattenIntegrationAccountBatchConfigurationRecurrenceSchedule(input.Schedule),
			"start_time": startTime,
			"time_zone":  timeZone,
		},
	}
}
