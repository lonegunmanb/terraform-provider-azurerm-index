package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/integrationaccountbatchconfigurations"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/logic/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandIntegrationAccountBatchConfigurationBatchReleaseCriteria(input []interface{}) integrationaccountbatchconfigurations.BatchReleaseCriteria {
	result := integrationaccountbatchconfigurations.BatchReleaseCriteria{}
	if len(input) == 0 {
		return result
	}
	v := input[0].(map[string]interface{})

	if batchSize := v["batch_size"].(int); batchSize != 0 {
		result.BatchSize = utils.Int64(int64(batchSize))
	}

	if messageCount := v["message_count"].(int); messageCount != 0 {
		result.MessageCount = utils.Int64(int64(messageCount))
	}

	if recurrence := v["recurrence"].([]interface{}); len(recurrence) != 0 {
		result.Recurrence = expandIntegrationAccountBatchConfigurationWorkflowTriggerRecurrence(recurrence)
	}

	return result
}
