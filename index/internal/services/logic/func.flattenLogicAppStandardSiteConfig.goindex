package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"fmt"
	"log"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-01-01/resourceproviders"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/logic/validate"
	storageValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenLogicAppStandardSiteConfig(input *webapps.SiteConfig) []interface{} {
	results := make([]interface{}, 0)
	result := make(map[string]interface{})

	if input == nil {
		log.Printf("[DEBUG] SiteConfig is nil")
		return results
	}

	result["always_on"] = pointer.From(input.AlwaysOn)
	result["use_32_bit_worker_process"] = pointer.From(input.Use32BitWorkerProcess)
	result["websockets_enabled"] = pointer.From(input.WebSocketsEnabled)
	result["linux_fx_version"] = pointer.From(input.LinuxFxVersion)
	result["http2_enabled"] = pointer.From(input.HTTP20Enabled)
	result["pre_warmed_instance_count"] = pointer.From(input.PreWarmedInstanceCount)

	result["ip_restriction"] = flattenLogicAppStandardIpRestriction(input.IPSecurityRestrictions)

	result["scm_ip_restriction"] = flattenLogicAppStandardIpRestriction(input.ScmIPSecurityRestrictions)

	result["scm_use_main_ip_restriction"] = pointer.From(input.ScmIPSecurityRestrictionsUseMain)

	result["scm_type"] = string(pointer.From(input.ScmType))
	result["scm_min_tls_version"] = string(pointer.From(input.ScmMinTlsVersion))

	result["min_tls_version"] = string(pointer.From(input.MinTlsVersion))
	result["ftps_state"] = string(pointer.From(input.FtpsState))

	result["cors"] = flattenLogicAppStandardCorsSettings(input.Cors)

	result["auto_swap_slot_name"] = pointer.From(input.AutoSwapSlotName)

	result["health_check_path"] = pointer.From(input.HealthCheckPath)

	result["elastic_instance_minimum"] = pointer.From(input.MinimumElasticInstanceCount)

	result["app_scale_limit"] = pointer.From(input.FunctionAppScaleLimit)

	result["runtime_scale_monitoring_enabled"] = pointer.From(input.FunctionsRuntimeScaleMonitoringEnabled)

	result["dotnet_framework_version"] = pointer.From(input.NetFrameworkVersion)

	result["vnet_route_all_enabled"] = pointer.From(input.VnetRouteAllEnabled)

	publicNetworkAccessEnabled := true
	if input.PublicNetworkAccess != nil {
		publicNetworkAccessEnabled = !strings.EqualFold(pointer.From(input.PublicNetworkAccess), helpers.PublicNetworkAccessDisabled)
	}

	if !features.FivePointOh() {
		result["public_network_access_enabled"] = publicNetworkAccessEnabled
	}

	results = append(results, result)
	return results
}
