package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-01-01/resourceproviders"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/logic/validate"
	storageValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenLogicAppStandardSiteConfig(input *webapps.SiteConfig) []helpers.LogicAppSiteConfig {
	results := make([]helpers.LogicAppSiteConfig, 0)
	result := helpers.LogicAppSiteConfig{}

	if input == nil {
		log.Printf("[DEBUG] SiteConfig is nil")
		return results
	}

	result.AlwaysOn = pointer.From(input.AlwaysOn)
	result.Use32BitWorkerProcess = pointer.From(input.Use32BitWorkerProcess)
	result.WebSocketsEnabled = pointer.From(input.WebSocketsEnabled)
	result.LinuxFxVersion = pointer.From(input.LinuxFxVersion)
	result.HTTP2Enabled = pointer.From(input.HTTP20Enabled)
	result.PreWarmedInstanceCount = pointer.From(input.PreWarmedInstanceCount)
	result.IpRestriction = helpers.FlattenIpRestrictions(input.IPSecurityRestrictions)
	result.SCMIPRestriction = helpers.FlattenIpRestrictions(input.ScmIPSecurityRestrictions)

	result.SCMUseMainIpRestriction = pointer.From(input.ScmIPSecurityRestrictionsUseMain)

	result.SCMType = pointer.FromEnum(input.ScmType)
	result.SCMMinTLSVersion = pointer.FromEnum(input.ScmMinTlsVersion)

	result.MinTLSVersion = pointer.FromEnum(input.MinTlsVersion)
	result.FTPSState = pointer.FromEnum(input.FtpsState)

	result.Cors = helpers.FlattenCorsSettings(input.Cors)

	result.AutoSwapSlotName = pointer.From(input.AutoSwapSlotName)

	result.HealthCheckPath = pointer.From(input.HealthCheckPath)

	result.ElasticInstanceMinimum = pointer.From(input.MinimumElasticInstanceCount)

	result.AppScaleLimit = pointer.From(input.FunctionAppScaleLimit)

	result.RuntimeScaleMonitoringEnabled = pointer.From(input.FunctionsRuntimeScaleMonitoringEnabled)

	result.DotnetFrameworkVersion = pointer.From(input.NetFrameworkVersion)

	result.VNETRouteAllEnabled = pointer.From(input.VnetRouteAllEnabled)

	if !features.FivePointOh() {
		result.PublicNetworkAccessEnabled = strings.EqualFold(pointer.From(input.PublicNetworkAccess), helpers.PublicNetworkAccessEnabled)
	}

	results = append(results, result)
	return results
}
