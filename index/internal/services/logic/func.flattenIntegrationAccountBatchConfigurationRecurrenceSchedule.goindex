package github.com/hashicorp/terraform-provider-azurerm/internal/services/logic
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/integrationaccountbatchconfigurations"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/logic/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenIntegrationAccountBatchConfigurationRecurrenceSchedule(input *integrationaccountbatchconfigurations.RecurrenceSchedule) []interface{} {
	if input == nil {
		return make([]interface{}, 0)
	}

	var weekDays []interface{}
	if input.WeekDays != nil {
		weekDaysCast := make([]string, 0)
		for _, item := range *input.WeekDays {
			weekDaysCast = append(weekDaysCast, (string)(item))
		}
		weekDays = utils.FlattenStringSlice(&weekDaysCast)
	}

	return []interface{}{
		map[string]interface{}{
			"hours":      utils.FlattenInt64Slice(input.Hours),
			"minutes":    utils.FlattenInt64Slice(input.Minutes),
			"month_days": utils.FlattenInt64Slice(input.MonthDays),
			"monthly":    flattenIntegrationAccountBatchConfigurationRecurrenceScheduleOccurrence(input.MonthlyOccurrences),
			"week_days":  weekDays,
		},
	}
}
