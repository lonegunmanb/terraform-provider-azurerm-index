package github.com/hashicorp/terraform-provider-azurerm/internal/services/resource
import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"regexp"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2020-06-01/resources" // nolint: staticcheck
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2022-09-01/providers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/resource/client"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func deleteItemsProvisionedByTemplate(ctx context.Context, client *client.Client, properties resources.DeploymentPropertiesExtended, subscriptionId string) error {
	if properties.Providers == nil {
		return fmt.Errorf("`properties.Providers` was nil - insufficient data to clean up this Template Deployment")
	}
	if properties.OutputResources == nil {
		return fmt.Errorf("`properties.OutputResources` was nil - insufficient data to clean up this Template Deployment")
	}

	providersClient := client.ResourceProvidersClient
	resourcesClient := client.LegacyResourcesClient

	log.Printf("[DEBUG] Determining the API Versions used for Resources provisioned in this Template..")
	resourceProviderApiVersions, err := determineResourceProviderAPIVersionsForResources(ctx, providersClient, *properties.Providers, subscriptionId)
	if err != nil {
		return fmt.Errorf("determining API Versions for Resource Providers: %+v", err)
	}

	log.Printf("[DEBUG] Deleting the resources provisioned in this Template..")
	nestedResources := *properties.OutputResources
	deletedResources := make(map[string]bool)
	deadline, ok := ctx.Deadline()
	if !ok {
		return fmt.Errorf("could not retrieve context deadline")
	}

	return pluginsdk.Retry(time.Until(deadline), func() *pluginsdk.RetryError {
		deletedTimes := 0
		var errorList []error
		for _, nestedResource := range nestedResources {
			if nestedResource.ID == nil {
				continue
			}

			if _, exists := deletedResources[*nestedResource.ID]; exists {
				continue
			}

			err = deleteNestedResource(ctx, resourcesClient, resourceProviderApiVersions, nestedResource)
			if err != nil {
				errorList = append(errorList, err)
			} else {
				deletedResources[*nestedResource.ID] = true
				deletedTimes++
			}
		}

		if deletedTimes > 0 {
			return pluginsdk.RetryableError(fmt.Errorf("may exist nested resources to delete, retrying"))
		}

		// If `deletedTimes` is 0, it means all resources have been successfully deleted if the `errorList` is empty, or the remaining resources cannot be deleted
		if len(errorList) > 0 {
			return pluginsdk.NonRetryableError(fmt.Errorf("%+v", errorList[0]))
		}

		return nil
	})
}
