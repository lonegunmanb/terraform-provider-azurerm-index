package github.com/hashicorp/terraform-provider-azurerm/internal/services/resource
import (
	"bytes"
	"context"
	"fmt"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2020-10-01/deploymentscripts"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	resourceValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/resource/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenEnvironmentVariableModelArray(inputList *[]deploymentscripts.EnvironmentVariable, originalList []EnvironmentVariableModel) []EnvironmentVariableModel {
	if inputList == nil {
		return []EnvironmentVariableModel{}
	}

	outputList := make([]EnvironmentVariableModel, 0, len(*inputList))
	for _, input := range *inputList {
		output := EnvironmentVariableModel{
			Name: input.Name,
		}

		if input.Value != nil {
			output.Value = *input.Value
		}

		outputList = append(outputList, output)
	}

	originalSecureValues := make(map[string]string)
	for _, v := range originalList {
		if v.SecureValue != "" {
			originalSecureValues[v.Name] = v.SecureValue
		}
	}

	for i := range outputList {
		if v, exists := originalSecureValues[outputList[i].Name]; exists {
			outputList[i].SecureValue = v
		}
	}

	return outputList
}
