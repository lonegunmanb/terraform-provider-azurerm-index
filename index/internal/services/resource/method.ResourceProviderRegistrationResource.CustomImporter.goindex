package github.com/hashicorp/terraform-provider-azurerm/internal/services/resource
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2021-07-01/features"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2022-09-01/providers"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders"
	"github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/resource/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ResourceProviderRegistrationResource) CustomImporter() sdk.ResourceRunFunc {
	return func(ctx context.Context, metadata sdk.ResourceMetaData) error {
		client := metadata.Client.Resource.ResourceProvidersClient
		account := metadata.Client.Account

		id, err := providers.ParseSubscriptionProviderID(metadata.ResourceData.Id())
		if err != nil {
			return err
		}

		provider, err := client.Get(ctx, *id, providers.DefaultGetOperationOptions())
		if err != nil {
			return fmt.Errorf("retrieving %s: %+v", *id, err)
		}

		namespace := ""
		registrationState := ""
		if model := provider.Model; model != nil {
			if model.Namespace != nil {
				namespace = *model.Namespace
			}
			if model.RegistrationState != nil {
				registrationState = *model.RegistrationState
			}
		}
		if namespace != id.ProviderName {
			return fmt.Errorf("importing %s: expected %q but got %q", *id, id.ProviderName, namespace)
		}

		if !strings.EqualFold(registrationState, "Registered") {
			return fmt.Errorf("importing %s: Resource Provider must be registered to be imported", id.ProviderName)
		}

		if err := r.checkIfManagedByTerraform(id.ProviderName, account); err != nil {
			return fmt.Errorf("importing %s: %+v", *id, err)
		}

		return nil
	}
}
