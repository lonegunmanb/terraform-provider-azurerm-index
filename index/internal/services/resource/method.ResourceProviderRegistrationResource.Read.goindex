package github.com/hashicorp/terraform-provider-azurerm/internal/services/resource
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2021-07-01/features"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2022-09-01/providers"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders"
	"github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/resource/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ResourceProviderRegistrationResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Resource.ResourceProvidersClient
			featureClient := metadata.Client.Resource.FeaturesClient
			account := metadata.Client.Account

			id, err := providers.ParseSubscriptionProviderID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			if err := r.checkIfManagedByTerraform(id.ProviderName, account); err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id, providers.DefaultGetOperationOptions())
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}

				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			registrationState := ""
			if model := resp.Model; model != nil && model.RegistrationState != nil {
				registrationState = *model.RegistrationState
			}
			if !strings.EqualFold(registrationState, "Registered") {
				log.Printf("[WARN] %s was not registered - removing from state", id)
				return metadata.MarkAsGone(id)
			}

			resourceProviderFeatureId := features.NewProviders2ID(id.SubscriptionId, id.ProviderName)
			result, err := featureClient.ListComplete(ctx, resourceProviderFeatureId)
			if err != nil {
				return fmt.Errorf("retrieving features for %s: %+v", *id, err)
			}
			features := make([]ResourceProviderRegistrationFeatureModel, 0)
			for _, item := range result.Items {
				if item.Properties != nil && item.Properties.State != nil && item.Name != nil {
					featureName := (*item.Name)[len(id.ProviderName)+1:]
					switch *item.Properties.State {
					case Registering, Registered:
						features = append(features, ResourceProviderRegistrationFeatureModel{Name: featureName, Registered: true})
					case Unregistering, Unregistered:
						features = append(features, ResourceProviderRegistrationFeatureModel{Name: featureName, Registered: false})
					}
				}
			}

			return metadata.Encode(&ResourceProviderRegistrationModel{
				Name:     id.ProviderName,
				Features: features,
			})
		},
		Timeout: 5 * time.Minute,
	}
}
