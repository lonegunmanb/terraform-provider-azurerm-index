package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/virtualnetworks"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-01-01/appserviceenvironments"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/web/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func checkNetworkConfigUpdate(ctx context.Context, client *appserviceenvironments.AppServiceEnvironmentsClient, id commonids.AppServiceEnvironmentId, values appserviceenvironments.AseV3NetworkingConfigurationProperties) pluginsdk.StateRefreshFunc {
	return func() (result interface{}, state string, err error) {
		resp, err := client.GetAseV3NetworkingConfiguration(ctx, id)
		if err != nil || resp.Model == nil || resp.Model.Properties == nil {
			return nil, "", err
		}

		props := *resp.Model.Properties

		debugEnabledReq := pointer.From(values.RemoteDebugEnabled)
		newPECReq := pointer.From(values.AllowNewPrivateEndpointConnections)

		debugEnableResp := pointer.From(props.RemoteDebugEnabled)
		newPECResp := pointer.From(props.AllowNewPrivateEndpointConnections)

		if debugEnableResp != debugEnabledReq || newPECResp != newPECReq {
			return props, "Pending", nil
		}

		return props, "Succeeded", nil
	}
}
