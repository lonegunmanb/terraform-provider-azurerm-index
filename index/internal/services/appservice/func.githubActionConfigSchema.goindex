package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice
import (
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func githubActionConfigSchema() *pluginsdk.Schema {
	return &pluginsdk.Schema{
		Type:     pluginsdk.TypeList,
		MaxItems: 1,
		ForceNew: true,
		Optional: true,
		Elem: &pluginsdk.Resource{
			Schema: map[string]*pluginsdk.Schema{
				"container_configuration": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &pluginsdk.Resource{
						Schema: map[string]*pluginsdk.Schema{
							"registry_url": {
								Type:        pluginsdk.TypeString,
								Required:    true,
								ForceNew:    true,
								Description: "The server URL for the container registry where the build will be hosted.",
								// ValidateFunc: validation.IsURLWithHTTPorHTTPS,
							},

							"image_name": {
								Type:        pluginsdk.TypeString,
								Required:    true,
								ForceNew:    true,
								Description: "The image name for the build.",
								// ValidateFunc: validate.NoEmptyStrings,
							},

							"registry_username": {
								Type:        pluginsdk.TypeString,
								Optional:    true,
								ForceNew:    true,
								Description: "The username used to upload the image to the container registry.",
							},

							"registry_password": {
								Type:        pluginsdk.TypeString,
								Optional:    true,
								ForceNew:    true,
								Sensitive:   true,
								Description: "The password used to upload the image to the container registry.",
							},
						},
					},
				},

				"code_configuration": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					MaxItems: 1,
					ForceNew: true,
					Elem: &pluginsdk.Resource{
						Schema: map[string]*pluginsdk.Schema{
							"runtime_stack": {
								Type:     pluginsdk.TypeString,
								Required: true,
								ForceNew: true,
								ValidateFunc: validation.StringInSlice([]string{
									"dotnetcore", // For all .Net builds on all O/S
									"spring",     // Java on Java, JBOSSEAP
									"tomcat",     // Java on Tomcat
									"node",       // Node, all versions
									"python",     // Python, all versions
								}, false),
								Description: "The value to use for the Runtime Stack in the workflow file content for code base apps.",
							},

							"runtime_version": {
								Type:         pluginsdk.TypeString,
								Required:     true,
								ForceNew:     true,
								ValidateFunc: validation.StringIsNotEmpty,
								Description:  "The value to use for the Runtime Version in the workflow file content for code base apps.",
							},
						},
					},
				},

				"generate_workflow_file": {
					Type:        pluginsdk.TypeBool,
					Optional:    true,
					ForceNew:    true,
					Default:     true,
					Description: "Should the service generate the GitHub Action Workflow file. Defaults to `true`",
				},

				"linux_action": {
					Type:        pluginsdk.TypeBool,
					Computed:    true,
					Description: "Denotes this action uses a Linux base image.",
				},
			},
		},
	}
}
