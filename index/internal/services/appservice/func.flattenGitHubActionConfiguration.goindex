package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice
import (
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenGitHubActionConfiguration(input *webapps.GitHubActionConfiguration) []GithubActionConfiguration {
	output := make([]GithubActionConfiguration, 0)
	if input == nil {
		return output
	}

	isLinux := false
	if v := input.IsLinux; v != nil {
		isLinux = *v
	}
	genWorkflow := false
	if v := input.GenerateWorkflowFile; v != nil {
		genWorkflow = *v
	}
	ghConfig := GithubActionConfiguration{
		UsesLinux:            isLinux,
		GenerateWorkflowFile: genWorkflow,
	}

	if codeConfig := input.CodeConfiguration; codeConfig != nil {
		ghCodeConfig := []GitHubActionCodeConfig{{
			RuntimeStack:   pointer.From(codeConfig.RuntimeStack),
			RuntimeVersion: pointer.From(codeConfig.RuntimeVersion),
		}}
		ghConfig.CodeConfig = ghCodeConfig
	}

	if containerConfig := input.ContainerConfiguration; containerConfig != nil {
		ghContainerConfig := []GitHubActionContainerConfig{{
			RegistryPassword: pointer.From(containerConfig.Password),
			RegistryUsername: pointer.From(containerConfig.Username),
			RegistryURL:      pointer.From(containerConfig.ServerURL),
			ImageName:        pointer.From(containerConfig.ImageName),
		}}
		ghConfig.ContainerConfig = ghContainerConfig
	}

	output = append(output, ghConfig)

	return output
}
