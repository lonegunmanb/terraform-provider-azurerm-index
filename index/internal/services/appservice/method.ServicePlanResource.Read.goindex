package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice
import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/appserviceplans"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/validate"
	webValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/web/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ServicePlanResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.AppService.ServicePlanClient
			id, err := commonids.ParseAppServicePlanID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			servicePlan, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(servicePlan.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			state := ServicePlanModel{
				Name:          id.ServerFarmName,
				ResourceGroup: id.ResourceGroupName,
			}

			if model := servicePlan.Model; model != nil {
				state.Location = location.Normalize(model.Location)
				state.Kind = pointer.From(model.Kind)

				// sku read
				if sku := model.Sku; sku != nil {
					if sku.Name != nil {
						state.Sku = *sku.Name
						if sku.Capacity != nil {
							state.WorkerCount = *sku.Capacity
						}
					}
				}

				// props read
				if props := model.Properties; props != nil {
					state.OSType = OSTypeWindows
					if props.HyperV != nil && *props.HyperV {
						state.OSType = OSTypeWindowsContainer
					}
					if props.Reserved != nil && *props.Reserved {
						state.OSType = OSTypeLinux
					}

					if ase := props.HostingEnvironmentProfile; ase != nil && ase.Id != nil {
						state.AppServiceEnvironmentId = *ase.Id
					}

					if pointer.From(props.ElasticScaleEnabled) && state.Sku != "" && helpers.PlanIsPremium(state.Sku) {
						state.PremiumPlanAutoScaleEnabled = pointer.From(props.ElasticScaleEnabled)
					}

					state.PerSiteScaling = pointer.From(props.PerSiteScaling)
					state.Reserved = pointer.From(props.Reserved)
					state.ZoneBalancing = pointer.From(props.ZoneRedundant)
					state.MaximumElasticWorkerCount = pointer.From(props.MaximumElasticWorkerCount)
				}
				state.Tags = pointer.From(model.Tags)
			}

			return metadata.Encode(&state)
		},
	}
}
