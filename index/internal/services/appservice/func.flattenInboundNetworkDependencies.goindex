package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/virtualnetworks"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-01-01/appserviceenvironments"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/web/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenInboundNetworkDependencies(ctx context.Context, client *appserviceenvironments.AppServiceEnvironmentsClient, id *commonids.AppServiceEnvironmentId) (*[]AppServiceV3InboundDependencies, error) {
	inboundNetworking, err := client.GetInboundNetworkDependenciesEndpointsComplete(ctx, *id)
	if err != nil {
		return nil, fmt.Errorf("reading paged results for Inbound Network Dependencies for %s: %+v", id, err)
	}

	results := make([]AppServiceV3InboundDependencies, 0, len(inboundNetworking.Items))
	for _, v := range inboundNetworking.Items {
		if err != nil {
			return nil, fmt.Errorf("reading Inbound Network dependencies for %s: %+v", id, err)
		}
		result := AppServiceV3InboundDependencies{
			Description: pointer.From(v.Description),
		}

		if v.Endpoints != nil {
			result.IPAddresses = *v.Endpoints
		}

		if v.Ports != nil {
			result.Ports = *v.Ports
		}

		results = append(results, result)
	}

	return &results, nil
}
