package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/virtualnetworks"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-01-01/appserviceenvironments"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/web/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r AppServiceEnvironmentV3Resource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,

		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.AppService.AppServiceEnvironmentClient
			id, err := commonids.ParseAppServiceEnvironmentID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			existing, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(existing.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			state := AppServiceEnvironmentV3Model{
				Name:          id.HostingEnvironmentName,
				ResourceGroup: id.ResourceGroupName,
			}

			if model := existing.Model; model != nil {
				state.Location = location.Normalize(model.Location)
				if props := model.Properties; props != nil {
					state.SubnetId = props.VirtualNetwork.Id
					state.InternalLoadBalancingMode = string(pointer.From(props.InternalLoadBalancingMode))
					state.DedicatedHostCount = pointer.From(props.DedicatedHostCount)
					state.PricingTier = pointer.From(props.MultiSize)
					state.ClusterSetting = flattenClusterSettingsModel(props.ClusterSettings)
					state.DnsSuffix = pointer.From(props.DnsSuffix)
					state.IpSSLAddressCount = pointer.From(props.IPsslAddressCount)
					state.ZoneRedundant = pointer.From(props.ZoneRedundant)
				}

				existingNetwork, err := client.GetAseV3NetworkingConfiguration(ctx, *id)
				if err != nil {
					return fmt.Errorf("reading network configuration for %s: %+v", *id, err)
				}

				if networkModel := existingNetwork.Model; networkModel != nil {
					if props := networkModel.Properties; props != nil {
						state.WindowsOutboundIPAddresses = pointer.From(props.WindowsOutboundIPAddresses)
						state.LinuxOutboundIPAddresses = pointer.From(props.LinuxOutboundIPAddresses)
						state.InternalInboundIPAddresses = pointer.From(props.InternalInboundIPAddresses)
						state.ExternalInboundIPAddresses = pointer.From(props.ExternalInboundIPAddresses)
						state.AllowNewPrivateEndpointConnections = pointer.From(props.AllowNewPrivateEndpointConnections)
						state.RemoteDebuggingEnabled = pointer.From(props.RemoteDebugEnabled)
					}
				}
				inboundNetworkDependencies, err := flattenInboundNetworkDependencies(ctx, client, id)
				if err != nil {
					return err
				}

				state.InboundNetworkDependencies = *inboundNetworkDependencies

				state.Tags = pointer.From(model.Tags)
			}

			return metadata.Encode(&state)
		},
	}
}
