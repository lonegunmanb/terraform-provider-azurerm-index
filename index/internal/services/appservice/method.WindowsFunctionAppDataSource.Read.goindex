package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice
import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (d WindowsFunctionAppDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.AppService.WebAppsClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var functionApp WindowsFunctionAppDataSourceModel
			if err := metadata.Decode(&functionApp); err != nil {
				return err
			}

			baseID := commonids.NewAppServiceID(subscriptionId, functionApp.ResourceGroup, functionApp.Name)
			id, err := commonids.ParseFunctionAppID(baseID.ID())
			if err != nil {
				return err
			}

			existing, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(existing.HttpResponse) {
					return fmt.Errorf("Windows %s not found", id)
				}
				return fmt.Errorf("checking for presence of existing Windows %s: %+v", id, err)
			}

			if existing.Model == nil || existing.Model.Properties == nil {
				return fmt.Errorf("reading properties of Windows %s", id)
			}

			functionApp.Name = id.SiteName
			functionApp.ResourceGroup = id.ResourceGroupName
			if model := existing.Model; model != nil {
				functionApp.Location = location.Normalize(model.Location)
				functionApp.Tags = pointer.From(model.Tags)
				functionApp.Kind = pointer.From(model.Kind)

				if props := model.Properties; props != nil {
					servicePlanId, err := commonids.ParseAppServicePlanIDInsensitively(pointer.From(props.ServerFarmId))
					if err != nil {
						return fmt.Errorf("reading Service Plan Id for %s: %+v", id, err)
					}
					functionApp.ServicePlanId = servicePlanId.ID()
					functionApp.Enabled = pointer.From(props.Enabled)
					functionApp.ClientCertMode = string(pointer.From(props.ClientCertMode))
					functionApp.ClientCertExclusionPaths = pointer.From(props.ClientCertExclusionPaths)
					functionApp.DailyMemoryTimeQuota = pointer.From(props.DailyMemoryTimeQuota)
					functionApp.CustomDomainVerificationId = pointer.From(props.CustomDomainVerificationId)
					functionApp.DefaultHostname = pointer.From(props.DefaultHostName)
					functionApp.VirtualNetworkBackupRestoreEnabled = pointer.From(props.VnetBackupRestoreEnabled)
					functionApp.VirtualNetworkSubnetId = pointer.From(props.VirtualNetworkSubnetId)
					functionApp.PublicNetworkAccess = !strings.EqualFold(pointer.From(props.PublicNetworkAccess), helpers.PublicNetworkAccessDisabled)

					if hostingEnv := props.HostingEnvironmentProfile; hostingEnv != nil {
						functionApp.HostingEnvId = pointer.From(hostingEnv.Id)
					}

					if v := props.OutboundIPAddresses; v != nil {
						functionApp.OutboundIPAddresses = *v
						functionApp.OutboundIPAddressList = strings.Split(*v, ",")
					}

					if v := props.PossibleOutboundIPAddresses; v != nil {
						functionApp.PossibleOutboundIPAddresses = *v
						functionApp.PossibleOutboundIPAddressList = strings.Split(*v, ",")
					}

					functionApp.HttpsOnly = pointer.From(props.HTTPSOnly)
					functionApp.ClientCertEnabled = pointer.From(props.ClientCertEnabled)
				}

				basicAuthFTP := true
				if basicAuthFTPResp, err := client.GetFtpAllowed(ctx, *id); err != nil || basicAuthFTPResp.Model.Properties == nil {
					return fmt.Errorf("retrieving state of FTP Basic Auth for %s: %+v", id, err)
				} else if csmProps := basicAuthFTPResp.Model.Properties; csmProps != nil {
					basicAuthFTP = csmProps.Allow
				}

				basicAuthWebDeploy := true
				if basicAuthWebDeployResp, err := client.GetScmAllowed(ctx, *id); err != nil || basicAuthWebDeployResp.Model.Properties == nil {
					return fmt.Errorf("retrieving state of WebDeploy Basic Auth for %s: %+v", id, err)
				} else if csmProps := basicAuthWebDeployResp.Model.Properties; csmProps != nil {
					basicAuthWebDeploy = csmProps.Allow
				}

				functionApp.PublishingFTPBasicAuthEnabled = basicAuthFTP
				functionApp.PublishingDeployBasicAuthEnabled = basicAuthWebDeploy

				appSettingsResp, err := client.ListApplicationSettings(ctx, *id)
				if err != nil {
					return fmt.Errorf("reading App Settings for Windows %s: %+v", id, err)
				}

				connectionStrings, err := client.ListConnectionStrings(ctx, *id)
				if err != nil {
					return fmt.Errorf("reading Connection String information for Windows %s: %+v", id, err)
				}

				stickySettings, err := client.ListSlotConfigurationNames(ctx, *id)
				if err != nil {
					return fmt.Errorf("reading Sticky Settings for Windows %s: %+v", id, err)
				}

				siteCredentials, err := helpers.ListPublishingCredentials(ctx, client, *id)
				if err != nil {
					return fmt.Errorf("listing Site Publishing Credential information for %s: %+v", id, err)
				}

				auth, err := client.GetAuthSettings(ctx, *id)
				if err != nil {
					return fmt.Errorf("reading Auth Settings for Windows %s: %+v", id, err)
				}

				var authV2 webapps.SiteAuthSettingsV2
				authV2Resp, err := client.GetAuthSettingsV2(ctx, *id)
				if err != nil {
					return fmt.Errorf("reading authV2 settings for Linux %s: %+v", id, err)
				}
				authV2 = *authV2Resp.Model

				backup, err := client.GetBackupConfiguration(ctx, *id)
				if err != nil {
					if !response.WasNotFound(backup.HttpResponse) {
						return fmt.Errorf("reading Backup Settings for Windows %s: %+v", id, err)
					}
				}

				logs, err := client.GetDiagnosticLogsConfiguration(ctx, *id)
				if err != nil {
					return fmt.Errorf("reading logs configuration for Windows %s: %+v", id, err)
				}

				configResp, err := client.GetConfiguration(ctx, *id)
				if err != nil || configResp.Model == nil {
					return fmt.Errorf("making Read request on AzureRM Function App Configuration %q: %+v", id.SiteName, err)
				}

				siteConfig, err := helpers.FlattenSiteConfigWindowsFunctionApp(configResp.Model.Properties)
				if err != nil {
					return fmt.Errorf("reading Site Config for Windows %s: %+v", id, err)
				}

				functionApp.SiteConfig = []helpers.SiteConfigWindowsFunctionApp{*siteConfig}

				functionApp.unpackWindowsFunctionAppSettings(appSettingsResp.Model)

				functionApp.ConnectionStrings = helpers.FlattenConnectionStrings(connectionStrings.Model)

				functionApp.SiteCredentials = helpers.FlattenSiteCredentials(siteCredentials)

				functionApp.AuthSettings = helpers.FlattenAuthSettings(auth.Model)

				functionApp.AuthV2Settings = helpers.FlattenAuthV2Settings(authV2)

				functionApp.Backup = helpers.FlattenBackupConfig(backup.Model)

				functionApp.SiteConfig[0].AppServiceLogs = helpers.FlattenFunctionAppAppServiceLogs(logs.Model)

				functionApp.StickySettings = helpers.FlattenStickySettings(stickySettings.Model.Properties)

				flattenedIdentity, err := identity.FlattenSystemAndUserAssignedMapToModel(model.Identity)
				if err != nil {
					return fmt.Errorf("flattening `identity`: %+v", err)
				}

				functionApp.Identity = pointer.From(flattenedIdentity)

				metadata.SetID(id)

				if err := metadata.Encode(&functionApp); err != nil {
					return fmt.Errorf("encoding: %+v", err)
				}
			}

			return nil
		},
	}
}
