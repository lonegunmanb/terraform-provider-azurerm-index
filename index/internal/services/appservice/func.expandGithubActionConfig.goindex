package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice
import (
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandGithubActionConfig(input []GithubActionConfiguration, usesLinux bool) *webapps.GitHubActionConfiguration {
	if len(input) == 0 {
		return nil
	}

	ghActionConfig := input[0]
	output := &webapps.GitHubActionConfiguration{
		CodeConfiguration:      nil,
		ContainerConfiguration: nil,
		IsLinux:                pointer.To(usesLinux),
		GenerateWorkflowFile:   pointer.To(ghActionConfig.GenerateWorkflowFile),
	}

	if len(ghActionConfig.CodeConfig) != 0 {
		codeConfig := ghActionConfig.CodeConfig[0]
		output.CodeConfiguration = &webapps.GitHubActionCodeConfiguration{
			RuntimeStack:   pointer.To(codeConfig.RuntimeStack),
			RuntimeVersion: pointer.To(codeConfig.RuntimeVersion),
		}
	}

	if len(ghActionConfig.ContainerConfig) != 0 {
		containerConfig := ghActionConfig.ContainerConfig[0]
		output.ContainerConfiguration = &webapps.GitHubActionContainerConfiguration{
			ServerURL: pointer.To(containerConfig.RegistryURL),
			ImageName: pointer.To(containerConfig.ImageName),
			Username:  pointer.To(containerConfig.RegistryUsername),
			Password:  pointer.To(containerConfig.RegistryPassword),
		}
	}

	return output
}
