package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/jackofallops/kermit/sdk/web/2022-09-01/web"
)
func expandAuthV2LoginSettings(input []AuthV2Login) *webapps.Login {
	if len(input) == 0 {
		return nil
	}
	login := input[0]
	result := &webapps.Login{
		Routes: &webapps.LoginRoutes{},
		TokenStore: &webapps.TokenStore{
			Enabled:          pointer.To(login.TokenStoreEnabled),
			FileSystem:       &webapps.FileSystemTokenStore{},
			AzureBlobStorage: &webapps.BlobStorageTokenStore{},
		},
		PreserveURLFragmentsForLogins: pointer.To(login.PreserveURLFragmentsForLogins),
		Nonce: &webapps.Nonce{
			ValidateNonce:           pointer.To(login.ValidateNonce),
			NonceExpirationInterval: pointer.To(login.NonceExpirationTime),
		},
		CookieExpiration: &webapps.CookieExpiration{
			Convention:       pointer.To(webapps.CookieExpirationConvention(login.CookieExpirationConvention)),
			TimeToExpiration: pointer.To(login.CookieExpirationTime),
		},
	}

	if login.TokenFilesystemPath != "" || login.TokenBlobStorageSAS != "" {
		result.TokenStore.Enabled = pointer.To(true)
		if login.TokenFilesystemPath != "" {
			result.TokenStore.FileSystem = &webapps.FileSystemTokenStore{
				Directory: pointer.To(login.TokenFilesystemPath),
			}
		}
		if login.TokenBlobStorageSAS != "" {
			result.TokenStore.AzureBlobStorage = &webapps.BlobStorageTokenStore{
				SasURLSettingName: pointer.To(login.TokenBlobStorageSAS),
			}
		}
	}

	if login.LogoutEndpoint != "" {
		result.Routes = &webapps.LoginRoutes{
			LogoutEndpoint: pointer.To(login.LogoutEndpoint),
		}
	}
	result.TokenStore.TokenRefreshExtensionHours = pointer.To(login.TokenRefreshExtension)
	if login.TokenFilesystemPath != "" {
		result.TokenStore.FileSystem = &webapps.FileSystemTokenStore{
			Directory: pointer.To(login.TokenFilesystemPath),
		}
	}
	if login.TokenBlobStorageSAS != "" {
		result.TokenStore.AzureBlobStorage = &webapps.BlobStorageTokenStore{
			SasURLSettingName: pointer.To(login.TokenBlobStorageSAS),
		}
	}
	result.AllowedExternalRedirectURLs = pointer.To(login.AllowedExternalRedirectURLs)

	return result
}
