package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"math"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func AuthSettingsSchema() *pluginsdk.Schema {
	return &pluginsdk.Schema{
		Type:     pluginsdk.TypeList,
		Optional: true,
		MaxItems: 1,
		DiffSuppressFunc: func(k, o, n string, d *pluginsdk.ResourceData) bool {
			if k != "auth_settings.#" {
				return false
			}

			oldVal, _ := d.GetChange("auth_settings")
			if oldVal == nil {
				return false
			}

			oldAuth := oldVal.([]any)
			if len(oldAuth) > 0 {
				if oldAuthMap, ok := oldAuth[0].(map[string]any); ok {
					// Suppress removal of `auth_settings` block if `auth_settings` was disabled (either explicitly or by omitting `auth_settings` block)
					if !oldAuthMap["enabled"].(bool) && o == "1" && n == "0" {
						return true
					}
				}
			}

			return false
		},
		DiffSuppressOnRefresh: true,
		Elem: &pluginsdk.Resource{
			Schema: map[string]*pluginsdk.Schema{
				"enabled": {
					Type:        pluginsdk.TypeBool,
					Required:    true,
					Description: "Should the Authentication / Authorization feature be enabled?",
				},

				"additional_login_parameters": {
					Type:     pluginsdk.TypeMap,
					Optional: true,
					Elem: &pluginsdk.Schema{
						Type: pluginsdk.TypeString,
					},
					Description: "Specifies a map of Login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.",
				},

				"allowed_external_redirect_urls": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					Computed: true,
					Elem: &pluginsdk.Schema{
						Type:         pluginsdk.TypeString,
						ValidateFunc: validation.StringIsNotEmpty,
					},
					Description: "Specifies a list of External URLs that can be redirected to as part of logging in or logging out of the Windows Web App.",
				},

				"default_provider": {
					Type:     pluginsdk.TypeString,
					Optional: true,
					Computed: true, // Once set, cannot be unset
					ValidateFunc: validation.StringInSlice([]string{
						string(webapps.BuiltInAuthenticationProviderAzureActiveDirectory),
						string(webapps.BuiltInAuthenticationProviderFacebook),
						string(webapps.BuiltInAuthenticationProviderGithub),
						string(webapps.BuiltInAuthenticationProviderGoogle),
						string(webapps.BuiltInAuthenticationProviderMicrosoftAccount),
						string(webapps.BuiltInAuthenticationProviderTwitter),
					}, false),
					Description: "The default authentication provider to use when multiple providers are configured. Possible values include: `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount`, `Twitter`, `Github`.",
				},

				"issuer": {
					Type:         pluginsdk.TypeString,
					Optional:     true,
					ValidateFunc: validation.IsURLWithScheme([]string{"http", "https"}),
					Description:  "The OpenID Connect Issuer URI that represents the entity which issues access tokens.",
				},

				"runtime_version": {
					Type:        pluginsdk.TypeString,
					Optional:    true,
					Computed:    true,
					Description: "The RuntimeVersion of the Authentication / Authorization feature in use.",
				},

				"token_refresh_extension_hours": {
					Type:        pluginsdk.TypeFloat,
					Optional:    true,
					Default:     72,
					Description: "The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.",
					DiffSuppressFunc: func(k, o, n string, d *pluginsdk.ResourceData) bool {
						// If `auth_settings` is not defined in config, the Create request doesn't send an `auth_settings` request.
						// Azure returns nothing for `tokenRefreshExtensionHours`, and the zero-value is set into state.
						// This then causes a diff on subsequent plans where Terraform wants to change from `0` to the default of `72`. So we'll suppress it.
						authSettingsVal, authSettingsDiags := d.GetRawConfigAt(sdk.ConstructCtyPath("auth_settings"))
						if !authSettingsDiags.HasError() && authSettingsVal.IsKnown() {
							return authSettingsVal.LengthInt() == 0 && o == "0" && n == "72"
						}

						return false
					},
					DiffSuppressOnRefresh: true,
				},

				"token_store_enabled": {
					Type:        pluginsdk.TypeBool,
					Optional:    true,
					Default:     false,
					Description: "Should the Windows Web App durably store platform-specific security tokens that are obtained during login flows? Defaults to `false`.",
				},

				"unauthenticated_client_action": {
					Type:     pluginsdk.TypeString,
					Optional: true,
					Computed: true, // Once set, cannot be removed
					ValidateFunc: validation.StringInSlice([]string{
						string(webapps.UnauthenticatedClientActionAllowAnonymous),
						string(webapps.UnauthenticatedClientActionRedirectToLoginPage),
					}, false),
					Description: "The action to take when an unauthenticated client attempts to access the app. Possible values include: `RedirectToLoginPage`, `AllowAnonymous`.",
				},

				"active_directory": AadAuthSettingsSchema(),

				"facebook": FacebookAuthSettingsSchema(),

				"github": GithubAuthSettingsSchema(),

				"google": GoogleAuthSettingsSchema(),

				"microsoft": MicrosoftAuthSettingsSchema(),

				"twitter": TwitterAuthSettingsSchema(),
			},
		},
	}
}
