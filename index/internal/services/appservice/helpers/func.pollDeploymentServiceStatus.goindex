package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func pollDeploymentServiceStatus(ctx context.Context, host string, user string, passwd string) error {
	warmupEndpoint := fmt.Sprintf("%s/deployments?warmup=true", host)

	statusReq, err := http.NewRequestWithContext(ctx, http.MethodGet, warmupEndpoint, http.NoBody)
	if err != nil {
		return err
	}

	statusReq.SetBasicAuth(user, passwd)

	pollerType := custompollers.NewAppServiceDeploymentServicePoller(statusReq)
	poller := pollers.NewPoller(pollerType, 10*time.Second, pollers.DefaultNumberOfDroppedConnectionsToAllow)

	if err = poller.PollUntilDone(ctx); err != nil {
		return fmt.Errorf("waiting for deployment service to be ready: %+v", err)
	}

	return nil
}
