package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"math"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func CorsSettingsSchema() *pluginsdk.Schema {
	return &pluginsdk.Schema{
		Type:     pluginsdk.TypeList,
		Optional: true,
		MaxItems: 1,
		DiffSuppressFunc: func(k, _, _ string, d *schema.ResourceData) bool {
			stateCors, planCors := d.GetChange("site_config.0.cors")
			if stateCors == nil || planCors == nil {
				return false
			}
			stateAttrs := stateCors.([]interface{})
			planAttrs := planCors.([]interface{})

			// Fixes https://github.com/hashicorp/terraform-provider-azurerm/issues/22879
			// If the plan wants to set default values and the state is empty; suppress diff
			if len(stateAttrs) == 0 && len(planAttrs) > 0 && planAttrs[0] != nil {
				planAttr := planAttrs[0].(map[string]interface{})

				newAllowedOrigins, ok := planAttr["allowed_origins"].(*schema.Set)
				if !ok {
					return false
				}

				newSupportCreds, ok := planAttr["support_credentials"].(bool)
				if !ok {
					return false
				}

				if newAllowedOrigins.Len() == 0 && !newSupportCreds {
					return true
				}
			}

			return false
		},
		Elem: &pluginsdk.Resource{
			Schema: map[string]*pluginsdk.Schema{
				"allowed_origins": {
					Type:     pluginsdk.TypeSet,
					Optional: true,
					MinItems: 1,
					Elem: &pluginsdk.Schema{
						Type: pluginsdk.TypeString,
					},
					Description: "Specifies a list of origins that should be allowed to make cross-origin calls.",
				},

				"support_credentials": {
					Type:        pluginsdk.TypeBool,
					Optional:    true,
					Default:     false,
					Description: "Are credentials allowed in CORS requests? Defaults to `false`.",
				},
			},
		},
	}
}
