package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func FlattenBackupConfig(backupRequest *webapps.BackupRequest) []Backup {
	if backupRequest == nil || backupRequest.Properties == nil {
		return []Backup{}
	}
	props := *backupRequest.Properties
	backup := Backup{
		StorageAccountURL: props.StorageAccountURL,
	}
	if props.BackupName != nil {
		backup.Name = *props.BackupName
	}

	if props.Enabled != nil {
		backup.Enabled = *props.Enabled
	}

	if schedule := props.BackupSchedule; schedule != nil {
		backupSchedule := BackupSchedule{
			FrequencyUnit:        string(schedule.FrequencyUnit),
			FrequencyInterval:    schedule.FrequencyInterval,
			KeepAtLeastOneBackup: schedule.KeepAtLeastOneBackup,
			RetentionPeriodDays:  schedule.RetentionPeriodInDays,
		}

		startTimeAsTime, err := time.Parse(time.RFC3339, *schedule.StartTime)
		if err == nil {
			if schedule.StartTime != nil && !startTimeAsTime.IsZero() {
				backupSchedule.StartTime = startTimeAsTime.Format(time.RFC3339)
			}
		}

		if schedule.LastExecutionTime != nil {
			lastExecutionTimeAsTime, err := time.Parse(time.RFC3339, *schedule.LastExecutionTime)
			if err == nil {
				if schedule.LastExecutionTime != nil && !lastExecutionTimeAsTime.IsZero() {
					backupSchedule.LastExecutionTime = lastExecutionTimeAsTime.Format(time.RFC3339)
				}
			}
		}

		backup.Schedule = []BackupSchedule{backupSchedule}
	}

	return []Backup{backup}
}
