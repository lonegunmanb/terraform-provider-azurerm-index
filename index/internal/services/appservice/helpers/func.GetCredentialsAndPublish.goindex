package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func GetCredentialsAndPublish(ctx context.Context, client *webapps.WebAppsClient, appID commonids.AppServiceId, sourceFile string) error {
	site, err := client.Get(ctx, appID)
	if err != nil || site.Model == nil {
		return fmt.Errorf("reading site %s to perform zip deploy: %+v", appID.SiteName, err)
	}
	props := *site.Model.Properties
	if sslStates := props.HostNameSslStates; sslStates != nil {
		for _, v := range *sslStates {
			if v.Name != nil && *v.Name != "" && pointer.From(v.HostType) == webapps.HostTypeRepository {
				user, passwd, err := GetSitePublishingCredentials(ctx, client, appID)
				if err != nil {
					return err
				}
				httpsHost := fmt.Sprintf("https://%s", *v.Name)

				if err := PublishZipDeployLocalFileKuduPush(ctx, httpsHost, *user, *passwd, client.Client.UserAgent, sourceFile); err != nil {
					return fmt.Errorf("publishing source (%s) to site %s: %+v", sourceFile, appID, err)
				}

				continue
			}
		}
	} else {
		return fmt.Errorf("could not determine SCM Site name for Site %s for Zip Deployment", appID)
	}

	return nil
}
