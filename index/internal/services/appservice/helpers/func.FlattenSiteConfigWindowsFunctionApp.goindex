package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"strconv"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	apimValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func FlattenSiteConfigWindowsFunctionApp(functionAppSiteConfig *webapps.SiteConfig) (*SiteConfigWindowsFunctionApp, error) {
	if functionAppSiteConfig == nil {
		return nil, fmt.Errorf("flattening site config: SiteConfig was nil")
	}

	result := &SiteConfigWindowsFunctionApp{
		AlwaysOn:                      pointer.From(functionAppSiteConfig.AlwaysOn),
		AppCommandLine:                pointer.From(functionAppSiteConfig.AppCommandLine),
		AppScaleLimit:                 pointer.From(functionAppSiteConfig.FunctionAppScaleLimit),
		Cors:                          FlattenCorsSettings(functionAppSiteConfig.Cors),
		DetailedErrorLogging:          pointer.From(functionAppSiteConfig.DetailedErrorLoggingEnabled),
		HealthCheckPath:               pointer.From(functionAppSiteConfig.HealthCheckPath),
		Http2Enabled:                  pointer.From(functionAppSiteConfig.HTTP20Enabled),
		WindowsFxVersion:              pointer.From(functionAppSiteConfig.WindowsFxVersion),
		LoadBalancing:                 string(pointer.From(functionAppSiteConfig.LoadBalancing)),
		ManagedPipelineMode:           string(pointer.From(functionAppSiteConfig.ManagedPipelineMode)),
		NumberOfWorkers:               pointer.From(functionAppSiteConfig.NumberOfWorkers),
		ScmType:                       string(pointer.From(functionAppSiteConfig.ScmType)),
		FtpsState:                     string(pointer.From(functionAppSiteConfig.FtpsState)),
		RuntimeScaleMonitoring:        pointer.From(functionAppSiteConfig.FunctionsRuntimeScaleMonitoringEnabled),
		MinTlsVersion:                 string(pointer.From(functionAppSiteConfig.MinTlsVersion)),
		ScmMinTlsVersion:              string(pointer.From(functionAppSiteConfig.ScmMinTlsVersion)),
		PreWarmedInstanceCount:        pointer.From(functionAppSiteConfig.PreWarmedInstanceCount),
		ElasticInstanceMinimum:        pointer.From(functionAppSiteConfig.MinimumElasticInstanceCount),
		Use32BitWorker:                pointer.From(functionAppSiteConfig.Use32BitWorkerProcess),
		WebSockets:                    pointer.From(functionAppSiteConfig.WebSocketsEnabled),
		ScmUseMainIpRestriction:       pointer.From(functionAppSiteConfig.ScmIPSecurityRestrictionsUseMain),
		RemoteDebugging:               pointer.From(functionAppSiteConfig.RemoteDebuggingEnabled),
		RemoteDebuggingVersion:        strings.ToUpper(pointer.From(functionAppSiteConfig.RemoteDebuggingVersion)),
		VnetRouteAllEnabled:           pointer.From(functionAppSiteConfig.VnetRouteAllEnabled),
		IpRestrictionDefaultAction:    string(pointer.From(functionAppSiteConfig.IPSecurityRestrictionsDefaultAction)),
		ScmIpRestrictionDefaultAction: string(pointer.From(functionAppSiteConfig.ScmIPSecurityRestrictionsDefaultAction)),
	}

	if v := functionAppSiteConfig.ApiDefinition; v != nil && v.Url != nil {
		result.ApiDefinition = *v.Url
	}

	if v := functionAppSiteConfig.ApiManagementConfig; v != nil && v.Id != nil {
		result.ApiManagementConfigId = *v.Id
	}

	if functionAppSiteConfig.IPSecurityRestrictions != nil {
		result.IpRestriction = FlattenIpRestrictions(functionAppSiteConfig.IPSecurityRestrictions)
	}

	if functionAppSiteConfig.ScmIPSecurityRestrictions != nil {
		result.ScmIpRestriction = FlattenIpRestrictions(functionAppSiteConfig.ScmIPSecurityRestrictions)
	}

	if v := functionAppSiteConfig.DefaultDocuments; v != nil {
		result.DefaultDocuments = *v
	}

	powershellVersion := ""
	if p := functionAppSiteConfig.PowerShellVersion; p != nil {
		powershellVersion = *p
		if powershellVersion == "~7" {
			powershellVersion = "7"
		}
	}

	result.ApplicationStack = []ApplicationStackWindowsFunctionApp{{
		DotNetVersion:         pointer.From(functionAppSiteConfig.NetFrameworkVersion),
		DotNetIsolated:        false, // set this later from app_settings
		NodeVersion:           "",    // Need to get this from app_settings later
		JavaVersion:           pointer.From(functionAppSiteConfig.JavaVersion),
		PowerShellCoreVersion: powershellVersion,
		CustomHandler:         false, // set this later from app_settings
	}}

	return result, nil
}
