package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"strconv"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	apimValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func ExpandSiteConfigLinuxFunctionAppSlot(siteConfig []SiteConfigLinuxFunctionAppSlot, existing *webapps.SiteConfig, metadata sdk.ResourceMetaData, version string, storageString string, storageUsesMSI bool) (*webapps.SiteConfig, error) {
	if len(siteConfig) == 0 {
		return nil, nil
	}

	expanded := &webapps.SiteConfig{}
	if existing != nil {
		expanded = existing
		// need to zero fxversion to re-calculate based on changes below or removing app_stack doesn't apply
		expanded.LinuxFxVersion = pointer.To("")
	}

	appSettings := make([]webapps.NameValuePair, 0)

	appSettings = append(appSettings, webapps.NameValuePair{
		Name:  pointer.To("FUNCTIONS_EXTENSION_VERSION"),
		Value: pointer.To(version),
	})

	if storageUsesMSI {
		appSettings = append(appSettings, webapps.NameValuePair{
			Name:  pointer.To("AzureWebJobsStorage__accountName"),
			Value: pointer.To(storageString),
		})
	} else {
		appSettings = append(appSettings, webapps.NameValuePair{
			Name:  pointer.To("AzureWebJobsStorage"),
			Value: pointer.To(storageString),
		})
	}

	linuxSlotSiteConfig := siteConfig[0]

	if metadata.ResourceData.HasChange("site_config.0.health_check_path") || metadata.ResourceData.HasChange("site_config.0.health_check_eviction_time_in_min") {
		v := strconv.FormatInt(linuxSlotSiteConfig.HealthCheckEvictionTime, 10)
		if v == "0" || linuxSlotSiteConfig.HealthCheckPath == "" {
			appSettings = updateOrAppendAppSettings(appSettings, "WEBSITE_HEALTHCHECK_MAXPINGFAILURES", v, true)
		} else {
			appSettings = updateOrAppendAppSettings(appSettings, "WEBSITE_HEALTHCHECK_MAXPINGFAILURES", v, false)
		}
	}

	expanded.AlwaysOn = pointer.To(linuxSlotSiteConfig.AlwaysOn)

	if metadata.ResourceData.HasChange("site_config.0.auto_swap_slot_name") {
		expanded.AutoSwapSlotName = pointer.To(linuxSlotSiteConfig.AutoSwapSlotName)
	}

	if metadata.ResourceData.HasChange("site_config.0.app_scale_limit") {
		expanded.FunctionAppScaleLimit = pointer.To(linuxSlotSiteConfig.AppScaleLimit)
	}

	if linuxSlotSiteConfig.AppInsightsConnectionString != "" {
		appSettings = append(appSettings, webapps.NameValuePair{
			Name:  pointer.To("APPLICATIONINSIGHTS_CONNECTION_STRING"),
			Value: pointer.To(linuxSlotSiteConfig.AppInsightsConnectionString),
		})
	}

	if linuxSlotSiteConfig.AppInsightsInstrumentationKey != "" {
		appSettings = append(appSettings, webapps.NameValuePair{
			Name:  pointer.To("APPINSIGHTS_INSTRUMENTATIONKEY"),
			Value: pointer.To(linuxSlotSiteConfig.AppInsightsInstrumentationKey),
		})
	}

	if metadata.ResourceData.HasChange("site_config.0.api_management_api_id") {
		expanded.ApiManagementConfig = &webapps.ApiManagementConfig{
			Id: pointer.To(linuxSlotSiteConfig.ApiManagementConfigId),
		}
	}

	if metadata.ResourceData.HasChange("site_config.0.api_definition_url") {
		expanded.ApiDefinition = &webapps.ApiDefinitionInfo{
			Url: pointer.To(linuxSlotSiteConfig.ApiDefinition),
		}
	}

	if metadata.ResourceData.HasChange("site_config.0.app_command_line") {
		expanded.AppCommandLine = pointer.To(linuxSlotSiteConfig.AppCommandLine)
	}

	if len(linuxSlotSiteConfig.ApplicationStack) > 0 {
		linuxAppStack := linuxSlotSiteConfig.ApplicationStack[0]
		if linuxAppStack.DotNetVersion != "" {
			if linuxAppStack.DotNetIsolated {
				appSettings = append(appSettings, webapps.NameValuePair{
					Name:  pointer.To("FUNCTIONS_WORKER_RUNTIME"),
					Value: pointer.To("dotnet-isolated"),
				})
				expanded.LinuxFxVersion = pointer.To(fmt.Sprintf("DOTNET-ISOLATED|%s", linuxAppStack.DotNetVersion))
			} else {
				appSettings = append(appSettings, webapps.NameValuePair{
					Name:  pointer.To("FUNCTIONS_WORKER_RUNTIME"),
					Value: pointer.To("dotnet"),
				})
				expanded.LinuxFxVersion = pointer.To(fmt.Sprintf("DOTNET|%s", linuxAppStack.DotNetVersion))
			}
		}

		if linuxAppStack.NodeVersion != "" {
			appSettings = append(appSettings, webapps.NameValuePair{
				Name:  pointer.To("FUNCTIONS_WORKER_RUNTIME"),
				Value: pointer.To("node"),
			})
			appSettings = append(appSettings, webapps.NameValuePair{
				Name:  pointer.To("WEBSITE_NODE_DEFAULT_VERSION"),
				Value: pointer.To(linuxAppStack.NodeVersion),
			})
			expanded.LinuxFxVersion = pointer.To(fmt.Sprintf("NODE|%s", linuxAppStack.NodeVersion))
		}

		if linuxAppStack.PythonVersion != "" {
			appSettings = append(appSettings, webapps.NameValuePair{
				Name:  pointer.To("FUNCTIONS_WORKER_RUNTIME"),
				Value: pointer.To("python"),
			})
			expanded.LinuxFxVersion = pointer.To(fmt.Sprintf("Python|%s", linuxAppStack.PythonVersion))
		}

		if linuxAppStack.JavaVersion != "" {
			appSettings = append(appSettings, webapps.NameValuePair{
				Name:  pointer.To("FUNCTIONS_WORKER_RUNTIME"),
				Value: pointer.To("java"),
			})
			expanded.LinuxFxVersion = pointer.To(fmt.Sprintf("Java|%s", linuxAppStack.JavaVersion))
		}

		if linuxAppStack.PowerShellCoreVersion != "" {
			appSettings = append(appSettings, webapps.NameValuePair{
				Name:  pointer.To("FUNCTIONS_WORKER_RUNTIME"),
				Value: pointer.To("powershell"),
			})
			expanded.LinuxFxVersion = pointer.To(fmt.Sprintf("PowerShell|%s", linuxAppStack.PowerShellCoreVersion))
		}

		if linuxAppStack.CustomHandler {
			appSettings = append(appSettings, webapps.NameValuePair{
				Name:  pointer.To("FUNCTIONS_WORKER_RUNTIME"),
				Value: pointer.To("custom"),
			})
			expanded.LinuxFxVersion = pointer.To("") // Custom needs an explicit empty string here
		}

		if len(linuxAppStack.Docker) == 1 {
			dockerConfig := linuxAppStack.Docker[0]
			appSettings = append(appSettings, webapps.NameValuePair{
				Name:  pointer.To("DOCKER_REGISTRY_SERVER_URL"),
				Value: pointer.To(dockerConfig.RegistryURL),
			})
			appSettings = append(appSettings, webapps.NameValuePair{
				Name:  pointer.To("DOCKER_REGISTRY_SERVER_USERNAME"),
				Value: pointer.To(dockerConfig.RegistryUsername),
			})
			appSettings = append(appSettings, webapps.NameValuePair{
				Name:  pointer.To("DOCKER_REGISTRY_SERVER_PASSWORD"),
				Value: pointer.To(dockerConfig.RegistryPassword),
			})
			expanded.LinuxFxVersion = pointer.To(fmt.Sprintf("DOCKER|%s/%s:%s", dockerConfig.RegistryURL, dockerConfig.ImageName, dockerConfig.ImageTag))
		}
	} else {
		appSettings = append(appSettings, webapps.NameValuePair{
			Name:  pointer.To("FUNCTIONS_WORKER_RUNTIME"),
			Value: pointer.To(""),
		})
		expanded.LinuxFxVersion = pointer.To("")
	}

	expanded.AcrUseManagedIdentityCreds = pointer.To(linuxSlotSiteConfig.UseManagedIdentityACR)

	if metadata.ResourceData.HasChange("site_config.0.elastic_instance_minimum") {
		expanded.MinimumElasticInstanceCount = pointer.To(linuxSlotSiteConfig.ElasticInstanceMinimum)
	}

	expanded.VnetRouteAllEnabled = pointer.To(linuxSlotSiteConfig.VnetRouteAllEnabled)

	if metadata.ResourceData.HasChange("site_config.0.container_registry_managed_identity_client_id") {
		expanded.AcrUserManagedIdentityID = pointer.To(linuxSlotSiteConfig.ContainerRegistryMSI)
	}

	if metadata.ResourceData.HasChange("site_config.0.default_documents") {
		expanded.DefaultDocuments = &linuxSlotSiteConfig.DefaultDocuments
	}

	expanded.HTTP20Enabled = pointer.To(linuxSlotSiteConfig.Http2Enabled)

	if metadata.ResourceData.HasChange("site_config.0.ip_restriction") {
		ipRestrictions, err := ExpandIpRestrictions(linuxSlotSiteConfig.IpRestriction)
		if err != nil {
			return nil, err
		}
		expanded.IPSecurityRestrictions = ipRestrictions
	}

	if metadata.ResourceData.HasChange("site_config.0.ip_restriction_default_action") {
		expanded.IPSecurityRestrictionsDefaultAction = pointer.To(webapps.DefaultAction(linuxSlotSiteConfig.IpRestrictionDefaultAction))
	}

	expanded.ScmIPSecurityRestrictionsUseMain = pointer.To(linuxSlotSiteConfig.ScmUseMainIpRestriction)

	if metadata.ResourceData.HasChange("site_config.0.scm_ip_restriction") {
		scmIpRestrictions, err := ExpandIpRestrictions(linuxSlotSiteConfig.ScmIpRestriction)
		if err != nil {
			return nil, err
		}
		expanded.ScmIPSecurityRestrictions = scmIpRestrictions
	}

	if metadata.ResourceData.HasChange("site_config.0.scm_ip_restriction_default_action") {
		expanded.ScmIPSecurityRestrictionsDefaultAction = pointer.To(webapps.DefaultAction(linuxSlotSiteConfig.ScmIpRestrictionDefaultAction))
	}

	if metadata.ResourceData.HasChange("site_config.0.load_balancing_mode") {
		expanded.LoadBalancing = pointer.To(webapps.SiteLoadBalancing(linuxSlotSiteConfig.LoadBalancing))
	}

	if metadata.ResourceData.HasChange("site_config.0.managed_pipeline_mode") {
		expanded.ManagedPipelineMode = pointer.To(webapps.ManagedPipelineMode(linuxSlotSiteConfig.ManagedPipelineMode))
	}

	if metadata.ResourceData.HasChange("site_config.0.remote_debugging_enabled") {
		expanded.RemoteDebuggingEnabled = pointer.To(linuxSlotSiteConfig.RemoteDebugging)
	}

	if metadata.ResourceData.HasChange("site_config.0.remote_debugging_version") {
		expanded.RemoteDebuggingVersion = pointer.To(linuxSlotSiteConfig.RemoteDebuggingVersion)
	}

	if metadata.ResourceData.HasChange("site_config.0.runtime_scale_monitoring_enabled") {
		expanded.FunctionsRuntimeScaleMonitoringEnabled = pointer.To(linuxSlotSiteConfig.RuntimeScaleMonitoring)
	}

	expanded.Use32BitWorkerProcess = pointer.To(linuxSlotSiteConfig.Use32BitWorker)

	expanded.WebSocketsEnabled = pointer.To(linuxSlotSiteConfig.WebSockets)

	if metadata.ResourceData.HasChange("site_config.0.ftps_state") {
		expanded.FtpsState = pointer.To(webapps.FtpsState(linuxSlotSiteConfig.FtpsState))
	}

	if metadata.ResourceData.HasChange("site_config.0.health_check_path") {
		expanded.HealthCheckPath = pointer.To(linuxSlotSiteConfig.HealthCheckPath)
	}

	if metadata.ResourceData.HasChange("site_config.0.worker_count") {
		expanded.NumberOfWorkers = pointer.To(linuxSlotSiteConfig.WorkerCount)
	}

	if metadata.ResourceData.HasChange("site_config.0.minimum_tls_version") {
		expanded.MinTlsVersion = pointer.To(webapps.SupportedTlsVersions(linuxSlotSiteConfig.MinTlsVersion))
	}

	if metadata.ResourceData.HasChange("site_config.0.scm_minimum_tls_version") {
		expanded.ScmMinTlsVersion = pointer.To(webapps.SupportedTlsVersions(linuxSlotSiteConfig.ScmMinTlsVersion))
	}

	if metadata.ResourceData.HasChange("site_config.0.cors") {
		cors := ExpandCorsSettings(linuxSlotSiteConfig.Cors)
		expanded.Cors = cors
	}

	if metadata.ResourceData.HasChange("site_config.0.pre_warmed_instance_count") {
		expanded.PreWarmedInstanceCount = pointer.To(linuxSlotSiteConfig.PreWarmedInstanceCount)
	}

	expanded.AppSettings = &appSettings

	return expanded, nil
}
