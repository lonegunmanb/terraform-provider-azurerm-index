package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func applicationLogSchema() *pluginsdk.Schema {
	return &pluginsdk.Schema{
		Type:     pluginsdk.TypeList,
		Optional: true,
		MaxItems: 1,
		Elem: &pluginsdk.Resource{
			Schema: map[string]*pluginsdk.Schema{
				"file_system_level": {
					Type:     pluginsdk.TypeString,
					Required: true,
					ValidateFunc: validation.StringInSlice([]string{ // webapps.LoglevelOff is the implied value when this block is removed.
						string(webapps.LogLevelError),
						string(webapps.LogLevelOff),
						string(webapps.LogLevelInformation),
						string(webapps.LogLevelVerbose),
						string(webapps.LogLevelWarning),
					}, false),
				},

				"azure_blob_storage": appLogBlobStorageSchema(),
			},
		},
		DiffSuppressFunc: func(k, _, _ string, d *schema.ResourceData) bool {
			stateLogs, planLogs := d.GetChange("logs.0.application_logs")
			if stateLogs == nil || planLogs == nil {
				return false
			}
			stateAttrs := stateLogs.([]interface{})
			planAttrs := planLogs.([]interface{})

			// If the plan wants to set default values and the state is empty; suppress diff
			if len(stateAttrs) == 0 && len(planAttrs) > 0 && planAttrs[0] != nil {
				planAttr := planAttrs[0].(map[string]interface{})
				newFileSystemLevel, ok := planAttr["file_system_level"].(string)
				if !ok {
					return false
				}

				// if something is in `azure_blob_storage`, then we don't suppress the diff as we don't allow the default values for `azure_blob_storage` to be passed in
				newAzureBlobStorage, ok := planAttr["azure_blob_storage"].([]interface{})
				if !ok || len(newAzureBlobStorage) != 0 {
					return false
				}

				if newFileSystemLevel == string(webapps.LogLevelOff) {
					return true
				}
			}

			return false
		},
	}
}
