package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func decodeApplicationStackLinux(fxString string) ApplicationStackLinux {
	parts := strings.Split(fxString, "|")
	result := ApplicationStackLinux{}
	if len(parts) != 2 {
		return result
	}

	switch FxStringPrefix(strings.ToUpper(parts[0])) {
	case FxStringPrefixDotNetIsolated, FxStringPrefixDotNet, FxStringPrefixDotNetCore:
		result.NetFrameworkVersion = parts[1]

	case FxStringPrefixGo:
		result.GoVersion = parts[1]

	case FxStringPrefixNode:
		result.NodeVersion = parts[1]

	case FxStringPrefixJava:
		result.JavaServer = LinuxJavaServerJava
		javaParts := strings.Split(parts[1], "-")
		if strings.HasPrefix(parts[1], "8") {
			result.JavaVersion = "8"
		}
		if strings.HasPrefix(javaParts[0], "11") {
			result.JavaVersion = "11"
		}
		if strings.HasPrefix(javaParts[0], "17") {
			result.JavaVersion = "17"
		}
		if strings.HasPrefix(javaParts[0], "21") {
			result.JavaVersion = "21"
		}
		result.JavaServerVersion = javaParts[0]

	case FxStringPrefixTomcat:
		result.JavaServer = LinuxJavaServerTomcat
		javaParts := strings.Split(parts[1], "-")
		if len(javaParts) == 2 {
			result.JavaServerVersion = javaParts[0]
			javaVersion := strings.TrimPrefix(javaParts[1], "jre")
			javaVersion = strings.TrimPrefix(javaVersion, "java")
			result.JavaVersion = javaVersion
		}

	case FxStringPrefixJBoss:
		result.JavaServer = LinuxJavaServerJboss
		javaParts := strings.Split(parts[1], "-")
		if len(javaParts) == 2 {
			result.JavaServerVersion = javaParts[0]
			javaVersion := strings.TrimPrefix(javaParts[1], "jre")
			javaVersion = strings.TrimPrefix(javaVersion, "java")
			result.JavaVersion = javaVersion
		}

	case FxStringPrefixPhp:
		result.PhpVersion = parts[1]

	case FxStringPrefixPython:
		result.PythonVersion = parts[1]

	case FxStringPrefixRuby:
		result.RubyVersion = parts[1]
	}

	return result
}
