package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"math"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func ExpandIpRestrictions(restrictions []IpRestriction) (*[]webapps.IPSecurityRestriction, error) {
	expanded := make([]webapps.IPSecurityRestriction, 0)
	if len(restrictions) == 0 {
		return &expanded, nil
	}

	for _, v := range restrictions {
		if err := v.Validate(); err != nil {
			return nil, err
		}

		var restriction webapps.IPSecurityRestriction
		if v.Name != "" {
			restriction.Name = utils.String(v.Name)
		}

		if v.IpAddress != "" {
			restriction.IPAddress = utils.String(v.IpAddress)
		}

		if v.ServiceTag != "" {
			restriction.IPAddress = utils.String(v.ServiceTag)
			restriction.Tag = pointer.To(webapps.IPFilterTagServiceTag)
		}

		if v.VnetSubnetId != "" {
			restriction.VnetSubnetResourceId = utils.String(v.VnetSubnetId)
		}

		if v.Description != "" {
			restriction.Description = pointer.To(v.Description)
		}

		restriction.Priority = pointer.To(v.Priority)

		restriction.Action = pointer.To(v.Action)

		restriction.Headers = expandIpRestrictionHeaders(v.Headers)

		expanded = append(expanded, restriction)
	}

	return &expanded, nil
}
