package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"math"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func FlattenIpRestrictions(ipRestrictionsList *[]webapps.IPSecurityRestriction) []IpRestriction {
	if ipRestrictionsList == nil {
		return []IpRestriction{}
	}

	ipRestrictions := make([]IpRestriction, 0, len(*ipRestrictionsList))
	for _, v := range *ipRestrictionsList {
		ipRestriction := IpRestriction{}

		if v.Name != nil {
			ipRestriction.Name = *v.Name
		}

		if v.IPAddress != nil {
			if *v.IPAddress == "Any" {
				continue
			}

			if v.Tag != nil && *v.Tag == webapps.IPFilterTagServiceTag {
				ipRestriction.ServiceTag = *v.IPAddress
			} else {
				ipRestriction.IpAddress = *v.IPAddress
			}
		}

		if v.VnetSubnetResourceId != nil {
			ipRestriction.VnetSubnetId = *v.VnetSubnetResourceId
		}

		if v.Priority != nil {
			ipRestriction.Priority = *v.Priority
		}

		if v.Action != nil {
			ipRestriction.Action = *v.Action
		}

		ipRestriction.Headers = flattenIpRestrictionHeaders(pointer.From(v.Headers))
		if v.Description != nil {
			ipRestriction.Description = *v.Description
		}

		ipRestrictions = append(ipRestrictions, ipRestriction)
	}

	return ipRestrictions
}
