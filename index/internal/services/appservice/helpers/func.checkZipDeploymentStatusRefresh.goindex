package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func checkZipDeploymentStatusRefresh(r *http.Request) pluginsdk.StateRefreshFunc {
	return func() (interface{}, string, error) {
		resp, err := http.DefaultClient.Do(r)
		if err != nil {
			return nil, "", err
		}

		if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusAccepted {
			return nil, "", fmt.Errorf("failed to read Zip Deployment status: %s", resp.Status)
		}
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, "", fmt.Errorf("reading status response body for Zip Deploy")
		}

		body := make(map[string]interface{})
		err = json.Unmarshal(respBody, &body)
		if err != nil {
			return nil, "", fmt.Errorf("could not parse status response for Zip Deploy")
		}

		if statusRaw, ok := body["status"]; ok && statusRaw != nil {
			if status, ok := statusRaw.(float64); ok {
				switch status {
				case zipDeployError:
					return nil, "", fmt.Errorf("zip deployment failed")
				case zipDeployComplete:
					return status, "complete", nil
				default:
					return status, "pending", nil
				}
			}
		}

		return nil, "", fmt.Errorf("could not determine status from deployment response")
	}
}
