package github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/helpers
import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/web/2023-12-01/webapps"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appservice/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/jackofallops/kermit/sdk/web/2022-09-01/web"
)
func AadAuthV2SettingsSchema() *pluginsdk.Schema {
	return &pluginsdk.Schema{
		Type:     pluginsdk.TypeList,
		Optional: true,
		MaxItems: 1,
		AtLeastOneOf: []string{
			"auth_settings_v2.0.apple_v2",
			"auth_settings_v2.0.active_directory_v2",
			"auth_settings_v2.0.azure_static_web_app_v2",
			"auth_settings_v2.0.custom_oidc_v2",
			"auth_settings_v2.0.facebook_v2",
			"auth_settings_v2.0.github_v2",
			"auth_settings_v2.0.google_v2",
			"auth_settings_v2.0.microsoft_v2",
			"auth_settings_v2.0.twitter_v2",
		},
		Elem: &pluginsdk.Resource{
			Schema: map[string]*pluginsdk.Schema{
				"client_id": {
					Type:         pluginsdk.TypeString,
					Required:     true,
					ValidateFunc: validation.StringIsNotEmpty,
					Description:  "The ID of the Client to use to authenticate with Azure Active Directory.",
				},

				"tenant_auth_endpoint": {
					Type:         pluginsdk.TypeString,
					Required:     true,
					ValidateFunc: validation.IsURLWithHTTPorHTTPS,
					Description:  "The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`.",
				},

				"client_secret_setting_name": {
					Type:         pluginsdk.TypeString,
					Optional:     true,
					ValidateFunc: validation.StringIsNotEmpty,
					ConflictsWith: []string{
						"auth_settings_v2.0.active_directory_v2.0.client_secret_certificate_thumbprint",
					},
					Description: "The App Setting name that contains the client secret of the Client.",
				},

				"client_secret_certificate_thumbprint": {
					Type:         pluginsdk.TypeString,
					Optional:     true,
					ValidateFunc: validation.StringIsNotEmpty,
					ConflictsWith: []string{
						"auth_settings_v2.0.active_directory_v2.0.client_secret_setting_name",
					},
					Description: "The thumbprint of the certificate used for signing purposes.",
				},

				"jwt_allowed_groups": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					Elem: &pluginsdk.Schema{
						Type:         pluginsdk.TypeString,
						ValidateFunc: validation.StringIsNotEmpty,
					},
					Description: "A list of Allowed Groups in the JWT Claim.",
				},

				"jwt_allowed_client_applications": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					Elem: &pluginsdk.Schema{
						Type:         pluginsdk.TypeString,
						ValidateFunc: validation.StringIsNotEmpty,
					},
					Description: "A list of Allowed Client Applications in the JWT Claim.",
				},

				"www_authentication_disabled": {
					Type:        pluginsdk.TypeBool,
					Optional:    true,
					Description: "Should the www-authenticate provider should be omitted from the request? Defaults to `false`",
				},

				"allowed_groups": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					Elem: &pluginsdk.Schema{
						Type:         pluginsdk.TypeString,
						ValidateFunc: validation.StringIsNotEmpty,
					},
					Description: "The list of allowed Group Names for the Default Authorisation Policy.",
				},

				"allowed_identities": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					Elem: &pluginsdk.Schema{
						Type:         pluginsdk.TypeString,
						ValidateFunc: validation.StringIsNotEmpty, // TODO - Can we use identity Validation here?
					},
					Description: "The list of allowed Identities for the Default Authorisation Policy.",
				},

				"allowed_applications": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					Elem: &pluginsdk.Schema{
						Type:         pluginsdk.TypeString,
						ValidateFunc: validation.StringIsNotEmpty, // TODO - Can we use identity Validation here?
					},
					Description: "The list of allowed Applications for the Default Authorisation Policy.",
				},

				"login_parameters": {
					Type:     pluginsdk.TypeMap,
					Optional: true,
					Elem: &pluginsdk.Schema{
						Type: pluginsdk.TypeString,
					},
					Description: "A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.",
				},

				"allowed_audiences": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					Elem: &pluginsdk.Schema{
						Type: pluginsdk.TypeString,
					},
					Description: "Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.",
				},
			},
		},
	}
}
