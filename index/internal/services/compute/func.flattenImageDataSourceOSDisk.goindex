package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"fmt"
	"log"
	"regexp"
	"sort"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-01/images"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenImageDataSourceOSDisk(input *images.ImageOSDisk) []interface{} {
	output := make([]interface{}, 0)

	if input != nil {
		blobUri := ""
		if uri := input.BlobUri; uri != nil {
			blobUri = *uri
		}
		caching := ""
		if input.Caching != nil {
			caching = string(*input.Caching)
		}
		diskSizeGB := 0
		if input.DiskSizeGB != nil {
			diskSizeGB = int(*input.DiskSizeGB)
		}
		managedDiskId := ""
		if disk := input.ManagedDisk; disk != nil && disk.Id != nil {
			managedDiskId = *disk.Id
		}
		output = append(output, map[string]interface{}{
			"blob_uri":        blobUri,
			"caching":         caching,
			"managed_disk_id": managedDiskId,
			"os_type":         string(input.OsType),
			"os_state":        string(input.OsState),
			"size_gb":         diskSizeGB,
		})
	}

	return output
}
