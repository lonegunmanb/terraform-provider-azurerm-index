package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-02/diskencryptionsets"
	"github.com/hashicorp/go-azure-sdk/sdk/environments"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/client"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	managedHsmHelpers "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/helpers"
	managedHsmParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/parse"
	managedHsmValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/keyvault/7.4/keyvault"
)
func resourceDiskEncryptionSetRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Compute.DiskEncryptionSetsClient
	env := meta.(*clients.Client).Account.Environment
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := commonids.ParseDiskEncryptionSetID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[INFO] Disk Encryption Set %q does not exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("reading Disk Encryption Set %q (Resource Group %q): %+v", id.DiskEncryptionSetName, id.ResourceGroupName, err)
	}

	d.Set("name", id.DiskEncryptionSetName)
	d.Set("resource_group_name", id.ResourceGroupName)

	model := resp.Model
	if model == nil {
		return fmt.Errorf("reading Disk Encryption Set : %+v", err)
	}

	if l := model.Location; l != "" {
		d.Set("location", location.Normalize(l))
	}

	if props := model.Properties; props != nil {
		var keyVaultKey *keyVaultParse.NestedItemId

		RotationToLatestKeyVersionEnabled := pointer.From(props.RotationToLatestKeyVersionEnabled)
		d.Set("auto_key_rotation_enabled", RotationToLatestKeyVersionEnabled)

		if props.ActiveKey != nil && props.ActiveKey.KeyURL != "" {
			keyVaultURI := props.ActiveKey.KeyURL

			isHSMURI, instanceName, domainSuffix, err := managedHsmHelpers.IsManagedHSMURI(env, keyVaultURI)
			if err != nil {
				return err
			}

			switch {
			case !isHSMURI:
				{
					keyVaultKey, err = keyVaultParse.ParseOptionallyVersionedNestedItemID(props.ActiveKey.KeyURL)
					if err != nil {
						return err
					}

					// This "should" never happen, but if keyVaultKey does not get assigned above it
					// would cause a panic when referenced below, so check to make sure it was
					// assigned or not...
					if keyVaultKey == nil {
						return fmt.Errorf("`KeyForDiskEncryptionSet.ActiveKey` was nil")
					}
					d.Set("key_vault_key_url", keyVaultKey.ID())

					// NOTE: Since the auto rotation changes the version information when the key is rotated
					// we need to persist the versionless key ID to the state file else terraform will always
					// try to revert to the original version of the key once it has been rotated...
					// Issue #22864
					if RotationToLatestKeyVersionEnabled {
						d.Set("key_vault_key_id", keyVaultKey.VersionlessID())
					} else {
						d.Set("key_vault_key_id", keyVaultKey.ID())
					}
				}

			case isHSMURI:
				{
					keyId, err := managedHsmParse.ManagedHSMDataPlaneVersionedKeyID(keyVaultURI, &domainSuffix)
					if err != nil {
						return err
					}

					// See comment above and issue #22864
					if RotationToLatestKeyVersionEnabled {
						versionlessKeyId := managedHsmParse.NewManagedHSMDataPlaneVersionlessKeyID(instanceName, domainSuffix, keyId.KeyName)
						d.Set("managed_hsm_key_id", versionlessKeyId.ID())
					} else {
						d.Set("managed_hsm_key_id", keyId.ID())
					}
				}
			}
		}

		encryptionType := string(diskencryptionsets.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey)
		if props.EncryptionType != nil {
			encryptionType = string(*props.EncryptionType)
		}
		d.Set("encryption_type", encryptionType)

		federatedClientId := ""
		if props.FederatedClientId != nil {
			federatedClientId = *props.FederatedClientId
		}
		d.Set("federated_client_id", federatedClientId)
	}

	flattenedIdentity, err := identity.FlattenSystemAndUserAssignedMap(model.Identity)
	if err != nil {
		return fmt.Errorf("flattening `identity`: %+v", err)
	}

	if err := d.Set("identity", flattenedIdentity); err != nil {
		return fmt.Errorf("setting `identity`: %+v", err)
	}

	return tags.FlattenAndSet(d, model.Tags)
}
