package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-01/images"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceImageCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Compute.ImagesClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := images.NewImageID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))
	if d.IsNewResource() {
		existing, err := client.Get(ctx, id, images.DefaultGetOperationOptions())
		if err != nil {
			if !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}
		}

		if !response.WasNotFound(existing.HttpResponse) {
			return tf.ImportAsExistsError("azurerm_image", id.ID())
		}
	}

	props := images.ImageProperties{
		HyperVGeneration: pointer.To(images.HyperVGenerationTypes(d.Get("hyper_v_generation").(string))),
	}

	sourceVM := images.SubResource{}
	if v, ok := d.GetOk("source_virtual_machine_id"); ok {
		sourceVM.Id = pointer.To(v.(string))
	}

	storageProfile := images.ImageStorageProfile{
		OsDisk:        expandImageOSDisk(d.Get("os_disk").([]interface{})),
		DataDisks:     expandImageDataDisks(d.Get("data_disk").([]interface{})),
		ZoneResilient: utils.Bool(d.Get("zone_resilient").(bool)),
	}

	// either source VM or storage profile can be specified, but not both
	if sourceVM.Id == nil {
		// if both sourceVM and storageProfile are empty, return an error
		if storageProfile.OsDisk == nil && (storageProfile.DataDisks == nil || len(*storageProfile.DataDisks) == 0) {
			return fmt.Errorf("[ERROR] Cannot create image when both source VM and storage profile are empty")
		}

		props.StorageProfile = &storageProfile
	} else {
		// creating an image from source VM
		props.SourceVirtualMachine = &sourceVM
	}

	payload := images.Image{
		Location:   location.Normalize(d.Get("location").(string)),
		Properties: &props,
		Tags:       tags.Expand(d.Get("tags").(map[string]interface{})),
	}
	if err := client.CreateOrUpdateThenPoll(ctx, id, payload); err != nil {
		return fmt.Errorf("creating/updating %s: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceImageRead(d, meta)
}
