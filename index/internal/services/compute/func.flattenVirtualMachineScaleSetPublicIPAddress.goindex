package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"bytes"
	"encoding/json"
	"fmt"
	"math"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-03/galleryapplicationversions"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-07-01/virtualmachinescalesets"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/applicationsecuritygroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/networksecuritygroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/publicipprefixes"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenVirtualMachineScaleSetPublicIPAddress(input virtualmachinescalesets.VirtualMachineScaleSetPublicIPAddressConfiguration) map[string]interface{} {
	ipTags := make([]interface{}, 0)
	var domainNameLabel, publicIPPrefixId, version string
	var idleTimeoutInMinutes int

	if props := input.Properties; props != nil {
		if props.IPTags != nil {
			for _, rawTag := range *props.IPTags {
				var tag, tagType string

				if rawTag.IPTagType != nil {
					tagType = *rawTag.IPTagType
				}

				if rawTag.Tag != nil {
					tag = *rawTag.Tag
				}

				ipTags = append(ipTags, map[string]interface{}{
					"tag":  tag,
					"type": tagType,
				})
			}
		}
		if props.DnsSettings != nil {
			domainNameLabel = props.DnsSettings.DomainNameLabel
		}

		if props.PublicIPPrefix != nil && props.PublicIPPrefix.Id != nil {
			publicIPPrefixId = *props.PublicIPPrefix.Id
		}

		if props.PublicIPAddressVersion != nil {
			version = string(pointer.From(props.PublicIPAddressVersion))
		}

		if props.IdleTimeoutInMinutes != nil {
			idleTimeoutInMinutes = int(*props.IdleTimeoutInMinutes)
		}
	}

	return map[string]interface{}{
		"name":                    input.Name,
		"domain_name_label":       domainNameLabel,
		"idle_timeout_in_minutes": idleTimeoutInMinutes,
		"ip_tag":                  ipTags,
		"public_ip_prefix_id":     publicIPPrefixId,
		"version":                 version,
	}
}
