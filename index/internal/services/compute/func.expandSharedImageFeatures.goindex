package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-03/galleryimages"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2023-07-03/galleryimageversions"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func expandSharedImageFeatures(d *pluginsdk.ResourceData) *[]galleryimages.GalleryImageFeature {
	var features []galleryimages.GalleryImageFeature
	if d.Get("accelerated_network_support_enabled").(bool) {
		features = append(features, galleryimages.GalleryImageFeature{
			Name:  pointer.To("IsAcceleratedNetworkSupported"),
			Value: pointer.To("true"),
		})
	}

	if d.Get("disk_controller_type_nvme_enabled").(bool) {
		features = append(features, galleryimages.GalleryImageFeature{
			Name:  pointer.To("DiskControllerTypes"),
			Value: pointer.To("SCSI, NVMe"),
		})
	}

	if tvmSupported := d.Get("trusted_launch_supported").(bool); tvmSupported {
		features = append(features, galleryimages.GalleryImageFeature{
			Name:  pointer.To("SecurityType"),
			Value: pointer.To("TrustedLaunchSupported"),
		})
	}

	if tvmEnabled := d.Get("trusted_launch_enabled").(bool); tvmEnabled {
		features = append(features, galleryimages.GalleryImageFeature{
			Name:  pointer.To("SecurityType"),
			Value: pointer.To("TrustedLaunch"),
		})
	}

	if cvmSupported := d.Get("confidential_vm_supported").(bool); cvmSupported {
		features = append(features, galleryimages.GalleryImageFeature{
			Name:  pointer.To("SecurityType"),
			Value: pointer.To("ConfidentialVmSupported"),
		})
	}

	if cvmEnabled := d.Get("confidential_vm_enabled").(bool); cvmEnabled {
		features = append(features, galleryimages.GalleryImageFeature{
			Name:  pointer.To("SecurityType"),
			Value: pointer.To("ConfidentialVM"),
		})
	}

	if hibernationEnabled := d.Get("hibernation_enabled").(bool); hibernationEnabled {
		features = append(features, galleryimages.GalleryImageFeature{
			Name:  pointer.To("IsHibernateSupported"),
			Value: pointer.To(strconv.FormatBool(hibernationEnabled)),
		})
	}

	return &features
}
