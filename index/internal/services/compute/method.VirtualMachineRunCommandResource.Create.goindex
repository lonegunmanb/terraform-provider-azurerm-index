package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2023-03-01/virtualmachineruncommands"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (r VirtualMachineRunCommandResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Compute.VirtualMachineRunCommandsClient

			var config VirtualMachineRunCommandResourceSchema
			if err := metadata.Decode(&config); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			subscriptionId := metadata.Client.Account.SubscriptionId

			virtualMachineId, err := commonids.ParseVirtualMachineID(config.VirtualMachineId)
			if err != nil {
				return err
			}

			id := virtualmachineruncommands.NewVirtualMachineRunCommandID(subscriptionId, virtualMachineId.ResourceGroupName, virtualMachineId.VirtualMachineName, config.Name)

			existing, err := client.GetByVirtualMachine(ctx, id, virtualmachineruncommands.DefaultGetByVirtualMachineOperationOptions())
			if err != nil {
				if !response.WasNotFound(existing.HttpResponse) {
					return fmt.Errorf("checking for the presence of an existing %s: %+v", id, err)
				}
			}
			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			payload := virtualmachineruncommands.VirtualMachineRunCommand{
				Location: location.Normalize(config.Location),
				Tags:     tags.Expand(config.Tags),
				Properties: &virtualmachineruncommands.VirtualMachineRunCommandProperties{
					ErrorBlobManagedIdentity:  expandVirtualMachineRunCommandBlobManagedIdentity(config.ErrorBlobManagedIdentity),
					ErrorBlobUri:              pointer.To(config.ErrorBlobUri),
					OutputBlobManagedIdentity: expandVirtualMachineRunCommandBlobManagedIdentity(config.OutputBlobManagedIdentity),
					OutputBlobUri:             pointer.To(config.OutputBlobUri),
					Parameters:                expandVirtualMachineRunCommandInputParameter(config.Parameter),
					ProtectedParameters:       expandVirtualMachineRunCommandInputParameter(config.ProtectedParameter),
					RunAsPassword:             pointer.To(config.RunAsPassword),
					RunAsUser:                 pointer.To(config.RunAsUser),
					Source:                    expandVirtualMachineRunCommandSource(config.Source),

					TimeoutInSeconds: pointer.To(int64(metadata.ResourceData.Timeout(pluginsdk.TimeoutCreate).Seconds())),

					// set API returning error if command run fails
					TreatFailureAsDeploymentFailure: pointer.To(true),
					AsyncExecution:                  pointer.To(false),
				},
			}

			result, err := client.CreateOrUpdate(ctx, id, payload)
			if err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			// the resource still exists if polling fails
			metadata.SetID(id)

			if err := result.Poller.PollUntilDone(ctx); err != nil {
				return fmt.Errorf("running the command: %+v", err)
			}

			return nil
		},
	}
}
