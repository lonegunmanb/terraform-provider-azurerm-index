package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2023-03-01/virtualmachineruncommands"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func expandVirtualMachineRunCommandSource(input []VirtualMachineRunCommandScriptSourceSchema) *virtualmachineruncommands.VirtualMachineRunCommandScriptSource {
	if len(input) == 0 {
		return nil
	}

	output := &virtualmachineruncommands.VirtualMachineRunCommandScriptSource{
		ScriptUriManagedIdentity: expandVirtualMachineRunCommandBlobManagedIdentity(input[0].ScriptUriManagedIdentity),
	}

	if input[0].CommandId != "" {
		output.CommandId = pointer.To(input[0].CommandId)
	}
	if input[0].Script != "" {
		output.Script = pointer.To(input[0].Script)
	}
	if input[0].ScriptUri != "" {
		output.ScriptUri = pointer.To(input[0].ScriptUri)
	}

	return output
}
