package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"math"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-03/galleryapplicationversions"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2023-04-02/disks"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-03-01/virtualmachines"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenVirtualMachineOSDisk(ctx context.Context, disksClient *disks.DisksClient, input *virtualmachines.OSDisk) ([]interface{}, error) {
	if input == nil {
		return []interface{}{}, nil
	}

	diffDiskSettings := make([]interface{}, 0)
	if input.DiffDiskSettings != nil {
		placement := string(virtualmachines.DiffDiskPlacementCacheDisk)
		if input.DiffDiskSettings.Placement != nil {
			placement = string(*input.DiffDiskSettings.Placement)
		}

		diffDiskSettings = append(diffDiskSettings, map[string]interface{}{
			"option":    string(pointer.From(input.DiffDiskSettings.Option)),
			"placement": placement,
		})
	}

	diskSizeGb := 0
	if input.DiskSizeGB != nil && *input.DiskSizeGB != 0 {
		diskSizeGb = int(*input.DiskSizeGB)
	}

	var name string
	if input.Name != nil {
		name = *input.Name
	}

	diskEncryptionSetId := ""
	storageAccountType := ""
	secureVMDiskEncryptionSetId := ""
	securityEncryptionType := ""
	osDiskId := ""

	if input.ManagedDisk != nil {
		storageAccountType = string(pointer.From(input.ManagedDisk.StorageAccountType))

		if input.ManagedDisk.Id != nil {
			id, err := commonids.ParseManagedDiskIDInsensitively(*input.ManagedDisk.Id)
			if err != nil {
				return nil, err
			}

			disk, err := disksClient.Get(ctx, *id)
			if err != nil {
				// turns out ephemeral disks aren't returned/available here
				if !response.WasNotFound(disk.HttpResponse) {
					return nil, err
				}
			}

			// Ephemeral Disks get an ARM ID but aren't available via the regular API
			// ergo fingers crossed we've got it from the resource because ¯\_(ツ)_/¯
			// where else we'd be able to pull it from
			if !response.WasNotFound(disk.HttpResponse) {
				// whilst this is available as `input.ManagedDisk.StorageAccountType` it's not returned there
				// however it's only available there for ephemeral os disks
				if disk.Model.Sku != nil && storageAccountType == "" {
					storageAccountType = string(*disk.Model.Sku.Name)
				}

				// same goes for Disk Size GB apparently
				if diskSizeGb == 0 && disk.Model.Properties != nil && disk.Model.Properties.DiskSizeGB != nil {
					diskSizeGb = int(*disk.Model.Properties.DiskSizeGB)
				}

				// same goes for Disk Encryption Set Id apparently
				if disk.Model.Properties.Encryption != nil && disk.Model.Properties.Encryption.DiskEncryptionSetId != nil {
					diskEncryptionSetId = *disk.Model.Properties.Encryption.DiskEncryptionSetId
				}
			}

			osDiskId = id.ID()
		}

		if securityProfile := input.ManagedDisk.SecurityProfile; securityProfile != nil {
			securityEncryptionType = string(pointer.From(securityProfile.SecurityEncryptionType))
			if securityProfile.DiskEncryptionSet != nil && securityProfile.DiskEncryptionSet.Id != nil {
				secureVMDiskEncryptionSetId = *securityProfile.DiskEncryptionSet.Id
			}
		}
	}

	writeAcceleratorEnabled := false
	if input.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled = *input.WriteAcceleratorEnabled
	}
	return []interface{}{
		map[string]interface{}{
			"caching":                          string(pointer.From(input.Caching)),
			"diff_disk_settings":               diffDiskSettings,
			"disk_encryption_set_id":           diskEncryptionSetId,
			"disk_size_gb":                     diskSizeGb,
			"id":                               osDiskId,
			"name":                             name,
			"storage_account_type":             storageAccountType,
			"secure_vm_disk_encryption_set_id": secureVMDiskEncryptionSetId,
			"security_encryption_type":         securityEncryptionType,
			"write_accelerator_enabled":        writeAcceleratorEnabled,
		},
	}, nil
}
