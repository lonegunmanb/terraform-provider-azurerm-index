package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"encoding/json"
	"fmt"
	"regexp"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-11-01/virtualmachinescalesets"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/applicationsecuritygroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/networksecuritygroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/publicipprefixes"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandOrchestratedVirtualMachineScaleSetOsProfileWithWindowsConfiguration(input map[string]interface{}, customData string) *virtualmachinescalesets.VirtualMachineScaleSetOSProfile {
	osProfile := virtualmachinescalesets.VirtualMachineScaleSetOSProfile{}
	winConfig := virtualmachinescalesets.WindowsConfiguration{}
	patchSettings := virtualmachinescalesets.PatchSettings{}

	if len(input) > 0 {
		osProfile.CustomData = pointer.To(customData)
		osProfile.AdminUsername = pointer.To(input["admin_username"].(string))
		osProfile.AdminPassword = pointer.To(input["admin_password"].(string))

		if computerPrefix := input["computer_name_prefix"].(string); computerPrefix != "" {
			osProfile.ComputerNamePrefix = pointer.To(computerPrefix)
		}

		if secrets := input["secret"].([]interface{}); len(secrets) > 0 {
			osProfile.Secrets = expandWindowsSecretsVMSS(secrets)
		}

		if additionalUnattendContents := input["additional_unattend_content"].([]interface{}); len(additionalUnattendContents) > 0 {
			winConfig.AdditionalUnattendContent = expandWindowsConfigurationAdditionalUnattendContent(input["additional_unattend_content"].([]interface{}))
		}
		winConfig.EnableAutomaticUpdates = pointer.To(input["enable_automatic_updates"].(bool))
		winConfig.ProvisionVMAgent = pointer.To(input["provision_vm_agent"].(bool))
		winRmListenersRaw := input["winrm_listener"].(*pluginsdk.Set).List()
		winConfig.WinRM = expandWinRMListenerVMSS(winRmListenersRaw)

		// Automatic VM Guest Patching and Hotpatching settings
		patchSettings.AssessmentMode = pointer.To(virtualmachinescalesets.WindowsPatchAssessmentMode(input["patch_assessment_mode"].(string)))
		patchSettings.PatchMode = pointer.To(virtualmachinescalesets.WindowsVMGuestPatchMode(input["patch_mode"].(string)))
		patchSettings.EnableHotpatching = pointer.To(input["hotpatching_enabled"].(bool))
		winConfig.PatchSettings = &patchSettings

		// due to a change in RP behavor, it will now throw and error if we pass an empty
		// string add check to only include it if it is actually defined in the config file
		timeZone := input["timezone"].(string)
		if timeZone != "" {
			winConfig.TimeZone = pointer.To(timeZone)
		}
	}

	osProfile.WindowsConfiguration = &winConfig

	return &osProfile
}
