package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-03-01/virtualmachines"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-03-01/virtualmachinescalesetvms"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-11-01/virtualmachinescalesets"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/networkinterfaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/vmsspublicipaddresses"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func dataSourceVirtualMachineScaleSetRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Compute.VirtualMachineScaleSetsClient
	instancesClient := meta.(*clients.Client).Compute.VirtualMachineScaleSetVMsClient
	virtualMachinesClient := meta.(*clients.Client).Compute.VirtualMachinesClient
	networkInterfacesClient := meta.(*clients.Client).Network.NetworkInterfacesClient
	publicIPAddressesClient := meta.(*clients.Client).Network.PublicIPAddresses
	vmssPublicIpAddressesClient := meta.(*clients.Client).Network.VMSSPublicIPAddressesClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := virtualmachinescalesets.NewVirtualMachineScaleSetID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))

	resp, err := client.Get(ctx, id, virtualmachinescalesets.DefaultGetOperationOptions())
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return fmt.Errorf("%s was not found", id)
		}

		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	d.SetId(id.ID())

	if model := resp.Model; model != nil {
		d.Set("location", location.Normalize(model.Location))

		identityFlattened, err := identity.FlattenSystemAndUserAssignedMap(model.Identity)
		if err != nil {
			return fmt.Errorf("flattening `identity`: %+v", err)
		}
		if err := d.Set("identity", identityFlattened); err != nil {
			return fmt.Errorf("setting `identity`: %+v", err)
		}

		if props := model.Properties; props != nil {
			if profile := props.VirtualMachineProfile; profile != nil {
				if nwProfile := profile.NetworkProfile; nwProfile != nil {
					flattenedNics := FlattenVirtualMachineScaleSetNetworkInterface(nwProfile.NetworkInterfaceConfigurations)
					if err := d.Set("network_interface", flattenedNics); err != nil {
						return fmt.Errorf("setting `network_interface`: %+v", err)
					}
				}
			}
		}
	}

	instances := make([]interface{}, 0)
	virtualMachineScaleSetId := virtualmachinescalesetvms.NewVirtualMachineScaleSetID(subscriptionId, id.ResourceGroupName, id.VirtualMachineScaleSetName)

	// If the VMSS is in Uniform Orchestration Mode, we can use instanceView for the VMSS instances
	// Flexible VMSS instances cannot use instanceView from the VMSS API
	// Instead we need to use the VM API for instanceView
	optionsVMSS := virtualmachinescalesetvms.DefaultListOperationOptions()
	optionsVM := virtualmachines.DefaultGetOperationOptions()
	var orchestrationMode string
	if props := resp.Model.Properties; props != nil {
		if *props.OrchestrationMode == virtualmachinescalesets.OrchestrationModeUniform {
			expandStr := "instanceView"
			optionsVMSS.Expand = &expandStr
			orchestrationMode = "Uniform"
		}
		if *props.OrchestrationMode == virtualmachinescalesets.OrchestrationModeFlexible {
			optionsVM.Expand = pointer.To(virtualmachines.InstanceViewTypesInstanceView)
			orchestrationMode = "Flexible"
		}
	}

	result, err := instancesClient.ListComplete(ctx, virtualMachineScaleSetId, optionsVMSS)
	if err != nil {
		return fmt.Errorf("listing VM Instances for %q: %+v", id, err)
	}

	var connInfo *connectionInfo
	var vmModel *virtualmachines.VirtualMachine
	for _, item := range result.Items {
		if item.InstanceId != nil {
			vmId := networkinterfaces.NewVirtualMachineID(subscriptionId, id.ResourceGroupName, id.VirtualMachineScaleSetName, *item.InstanceId)
			nics, err := networkInterfacesClient.ListVirtualMachineScaleSetVMNetworkInterfacesComplete(ctx, vmId)
			if err != nil {
				if !response.WasNotFound(nics.LatestHttpResponse) {
					return fmt.Errorf("listing Network Interfaces for VM Instance %q for %q: %+v", *item.InstanceId, id, err)
				}

				// Network Interfaces of VM in Flexible VMSS are accessed from single VM
				virtualMachineId := virtualmachines.NewVirtualMachineID(subscriptionId, id.ResourceGroupName, *item.InstanceId)
				vm, err := virtualMachinesClient.Get(ctx, virtualMachineId, optionsVM)
				if err != nil {
					return fmt.Errorf("retrieving VM Instance %q for %q: %+v", *item.InstanceId, id, err)
				}
				connInfoRaw := retrieveConnectionInformation(ctx, networkInterfacesClient, publicIPAddressesClient, vm.Model.Properties)
				connInfo = &connInfoRaw
				vmModel = vm.Model
			} else {
				connInfo, err = getVirtualMachineScaleSetVMConnectionInfo(ctx, nics.Items, id.ResourceGroupName, id.VirtualMachineScaleSetName, *item.InstanceId, vmssPublicIpAddressesClient)
				if err != nil {
					return err
				}
			}

			flattenedInstances := flattenVirtualMachineScaleSetVM(item, connInfo, vmModel, orchestrationMode)
			instances = append(instances, flattenedInstances)
		}
	}
	if err := d.Set("instances", instances); err != nil {
		return fmt.Errorf("setting `instances`: %+v", err)
	}

	return nil
}
