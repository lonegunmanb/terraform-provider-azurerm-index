package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2023-04-02/disks"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (m ManagedDisksDataSource) Attributes() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"disk": {
			Type:     pluginsdk.TypeList,
			Computed: true,
			Elem: &pluginsdk.Resource{
				Schema: map[string]*schema.Schema{
					"name": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"create_option": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"disk_access_id": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"disk_encryption_set_id": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"disk_iops_read_write": {
						Type:     pluginsdk.TypeInt,
						Computed: true,
					},

					"disk_mbps_read_write": {
						Type:     pluginsdk.TypeInt,
						Computed: true,
					},

					"disk_size_in_gb": {
						Type:     pluginsdk.TypeInt,
						Computed: true,
					},

					"encryption_settings": {
						Type:     pluginsdk.TypeList,
						Computed: true,
						Elem: &pluginsdk.Resource{
							Schema: map[string]*pluginsdk.Schema{
								"enabled": {
									Type:     pluginsdk.TypeBool,
									Computed: true,
								},

								"disk_encryption_key": {
									Type:     pluginsdk.TypeList,
									Computed: true,
									Elem: &pluginsdk.Resource{
										Schema: map[string]*pluginsdk.Schema{
											"secret_url": {
												Type:     pluginsdk.TypeString,
												Computed: true,
											},

											"source_vault_id": {
												Type:     pluginsdk.TypeString,
												Computed: true,
											},
										},
									},
								},
								"key_encryption_key": {
									Type:     pluginsdk.TypeList,
									Computed: true,
									Elem: &pluginsdk.Resource{
										Schema: map[string]*pluginsdk.Schema{
											"key_url": {
												Type:     pluginsdk.TypeString,
												Computed: true,
											},

											"source_vault_id": {
												Type:     pluginsdk.TypeString,
												Computed: true,
											},
										},
									},
								},
							},
						},
					},

					"location": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"image_reference_id": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"network_access_policy": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"os_type": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"source_resource_id": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"source_uri": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"storage_account_id": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"storage_account_type": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},

					"tags": commonschema.TagsDataSource(),

					"zones": commonschema.ZonesMultipleComputed(),

					"id": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},
				},
			},
		},
	}
}
