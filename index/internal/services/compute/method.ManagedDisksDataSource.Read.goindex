package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2023-04-02/disks"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (m ManagedDisksDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Compute.DisksClient

			state := ManagedDisksDataSourceModel{}

			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding %+v", err)
			}

			id := commonids.NewResourceGroupID(metadata.Client.Account.SubscriptionId, state.ResourceGroupName)

			resp, err := client.ListByResourceGroup(ctx, id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return fmt.Errorf("%s was not found", id)
				}
				return fmt.Errorf("making Read request on %s: %s", id, err)
			}

			metadata.SetID(id)

			if model := resp.Model; model != nil {
				managedDisks := make([]Disk, 0)
				for _, d := range *model {
					disk := Disk{
						Name:     pointer.From(d.Name),
						ID:       pointer.From(d.Id),
						Location: location.Normalize(d.Location),
						Zones:    zones.Flatten(d.Zones),
						Tags:     pointer.From(d.Tags),
					}
					if props := d.Properties; props != nil {
						disk.CreateOption = string(props.CreationData.CreateOption)
						disk.SourceURI = pointer.From(props.CreationData.SourceUri)
						disk.SourceResourceID = pointer.From(props.CreationData.SourceResourceId)
						disk.StorageAccountID = pointer.From(props.CreationData.StorageAccountId)
						if props.CreationData.ImageReference != nil {
							disk.ImageReferenceID = pointer.From(props.CreationData.ImageReference.Id)
						}

						disk.DiskAccessId = pointer.From(props.DiskAccessId)
						disk.NetworkAccessPolicy = pointer.FromEnum(props.NetworkAccessPolicy)
						disk.DiskSizeGB = pointer.From(props.DiskSizeGB)
						disk.DiskIOPSReadWrite = pointer.From(props.DiskIOPSReadWrite)
						disk.DiskMBPSReadWrite = pointer.From(props.DiskMBpsReadWrite)
						disk.OSType = pointer.FromEnum(props.OsType)
						if enc := props.Encryption; enc != nil {
							disk.DiskEncryptionSetId = pointer.From(enc.DiskEncryptionSetId)
						}

						disk.EncryptionSettings = flattenManagedDiskEncryptionSettingsTyped(props.EncryptionSettingsCollection)
					}

					if sku := d.Sku; sku != nil {
						disk.StorageAccountType = pointer.FromEnum(sku.Name)
					}

					disk.Tags = pointer.From(d.Tags)

					managedDisks = append(managedDisks, disk)
				}
				state.Disks = managedDisks
			}

			return metadata.Encode(&state)
		},
	}
}
