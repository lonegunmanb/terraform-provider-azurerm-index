package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-03/galleryapplications"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r GalleryApplicationResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var state GalleryApplicationModel
			if err := metadata.Decode(&state); err != nil {
				return err
			}

			client := metadata.Client.Compute.GalleryApplicationsClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			galleryId, err := commonids.ParseSharedImageGalleryID(state.GalleryId)
			if err != nil {
				return err
			}

			id := galleryapplications.NewApplicationID(subscriptionId, galleryId.ResourceGroupName, galleryId.GalleryName, state.Name)
			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for the presence of existing %q: %+v", id, err)
			}
			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			payload := galleryapplications.GalleryApplication{
				Location: location.Normalize(state.Location),
				Properties: &galleryapplications.GalleryApplicationProperties{
					SupportedOSType: galleryapplications.OperatingSystemTypes(state.SupportedOSType),
				},
				Tags: pointer.To(state.Tags),
			}

			if state.Description != "" {
				payload.Properties.Description = utils.String(state.Description)
			}

			if state.EndOfLifeDate != "" {
				endOfLifeDate, _ := time.Parse(time.RFC3339, state.EndOfLifeDate)
				payload.Properties.SetEndOfLifeDateAsTime(endOfLifeDate)
			}

			if state.Eula != "" {
				payload.Properties.Eula = utils.String(state.Eula)
			}

			if state.PrivacyStatementURI != "" {
				payload.Properties.PrivacyStatementUri = utils.String(state.PrivacyStatementURI)
			}

			if state.ReleaseNoteURI != "" {
				payload.Properties.ReleaseNoteUri = utils.String(state.ReleaseNoteURI)
			}

			if err := client.CreateOrUpdateThenPoll(ctx, id, payload); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
		Timeout: 30 * time.Minute,
	}
}
