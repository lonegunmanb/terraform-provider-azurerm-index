package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-03/galleryapplications"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-03/galleryapplicationversions"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenGalleryApplicationVersionTargetRegion(input *[]galleryapplicationversions.TargetRegion) []TargetRegion {
	results := make([]TargetRegion, 0)

	for _, item := range *input {
		obj := TargetRegion{
			Name:              location.Normalize(item.Name),
			ExcludeFromLatest: false,
		}

		if item.ExcludeFromLatest != nil {
			obj.ExcludeFromLatest = *item.ExcludeFromLatest
		}

		if item.RegionalReplicaCount != nil {
			obj.RegionalReplicaCount = *item.RegionalReplicaCount
		}

		if item.StorageAccountType != nil {
			obj.StorageAccountType = string(*item.StorageAccountType)
		}

		results = append(results, obj)
	}

	return results
}
