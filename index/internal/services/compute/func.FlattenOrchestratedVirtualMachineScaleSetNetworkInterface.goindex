package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"encoding/json"
	"fmt"
	"regexp"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-07-01/virtualmachinescalesets"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/applicationsecuritygroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/networksecuritygroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/publicipprefixes"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func FlattenOrchestratedVirtualMachineScaleSetNetworkInterface(input *[]virtualmachinescalesets.VirtualMachineScaleSetNetworkConfiguration) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	results := make([]interface{}, 0)
	for _, v := range *input {
		var networkSecurityGroupId string
		var enableAcceleratedNetworking, enableIPForwarding, primary bool
		var dnsServers []interface{}
		var ipConfigurations []interface{}
		if props := v.Properties; props != nil {
			if props.NetworkSecurityGroup != nil && props.NetworkSecurityGroup.Id != nil {
				networkSecurityGroupId = *props.NetworkSecurityGroup.Id
			}

			if props.EnableAcceleratedNetworking != nil {
				enableAcceleratedNetworking = *props.EnableAcceleratedNetworking
			}
			if props.EnableIPForwarding != nil {
				enableIPForwarding = *props.EnableIPForwarding
			}
			if props.Primary != nil {
				primary = *props.Primary
			}

			if settings := props.DnsSettings; settings != nil {
				dnsServers = utils.FlattenStringSlice(props.DnsSettings.DnsServers)
			}

			if len(props.IPConfigurations) != 0 {
				for _, configRaw := range props.IPConfigurations {
					config := FlattenOrchestratedVirtualMachineScaleSetIPConfiguration(configRaw)
					ipConfigurations = append(ipConfigurations, config)
				}
			}
		}

		results = append(results, map[string]interface{}{
			"name":                          v.Name,
			"dns_servers":                   dnsServers,
			"enable_accelerated_networking": enableAcceleratedNetworking,
			"enable_ip_forwarding":          enableIPForwarding,
			"ip_configuration":              ipConfigurations,
			"network_security_group_id":     networkSecurityGroupId,
			"primary":                       primary,
		})
	}

	return results
}
