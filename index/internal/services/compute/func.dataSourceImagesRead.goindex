package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"fmt"
	"sort"
	"time"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-01/images"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func dataSourceImagesRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Compute.ImagesClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	filterTags := tags.Expand(d.Get("tags_filter").(map[string]interface{}))

	resourceGroupId := commonids.NewResourceGroupID(subscriptionId, d.Get("resource_group_name").(string))
	resp, err := client.ListByResourceGroupComplete(ctx, resourceGroupId)
	if err != nil {
		return fmt.Errorf("retrieving Images within %s: %+v", resourceGroupId, err)
	}

	virtualMachineImages := resp.Items
	if filterTags != nil && len(*filterTags) > 0 {
		virtualMachineImages = filterToImagesMatchingTags(virtualMachineImages, *filterTags)
	}
	if len(virtualMachineImages) == 0 {
		return fmt.Errorf("no images were found that match the specified tags")
	}
	flattenedImages := flattenImages(virtualMachineImages)
	if err := d.Set("images", flattenedImages); err != nil {
		return fmt.Errorf("setting `images`: %+v", err)
	}

	resourceId := resourceIdForImagesDataSource(resourceGroupId, *filterTags)
	d.SetId(resourceId)

	d.Set("resource_group_name", resourceGroupId.ResourceGroupName)

	return nil
}
