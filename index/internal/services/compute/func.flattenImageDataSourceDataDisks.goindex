package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"fmt"
	"log"
	"regexp"
	"sort"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-01/images"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenImageDataSourceDataDisks(input *[]images.ImageDataDisk) []interface{} {
	output := make([]interface{}, 0)

	if input != nil {
		for _, disk := range *input {
			blobUri := ""
			if disk.BlobUri != nil {
				blobUri = *disk.BlobUri
			}
			caching := ""
			if disk.Caching != nil {
				caching = string(*disk.Caching)
			}
			diskSizeGb := 0
			if disk.DiskSizeGB != nil {
				diskSizeGb = int(*disk.DiskSizeGB)
			}
			managedDiskId := ""
			if disk.ManagedDisk != nil && disk.ManagedDisk.Id != nil {
				managedDiskId = *disk.ManagedDisk.Id
			}
			output = append(output, map[string]interface{}{
				"blob_uri":        blobUri,
				"caching":         caching,
				"lun":             int(disk.Lun),
				"managed_disk_id": managedDiskId,
				"size_gb":         diskSizeGb,
			})
		}
	}

	return output
}
