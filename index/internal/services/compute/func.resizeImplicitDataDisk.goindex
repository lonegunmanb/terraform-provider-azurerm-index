package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-02/snapshots"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2023-04-02/disks"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-03-01/virtualmachines"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func resizeImplicitDataDisk(ctx context.Context, metadata sdk.ResourceMetaData, id *parse.DataDiskId) error {
	diskClient := metadata.Client.Compute.DisksClient
	skusClient := metadata.Client.Compute.SkusClient
	virtualMachinesClient := metadata.Client.Compute.VirtualMachinesClient
	shouldShutDown := false
	shouldDetach := false

	managedDiskId := commonids.NewManagedDiskID(id.SubscriptionId, id.ResourceGroup, id.Name)

	disk, err := diskClient.Get(ctx, managedDiskId)
	if err != nil {
		if response.WasNotFound(disk.HttpResponse) {
			return fmt.Errorf("%s was not found", managedDiskId)
		}

		return fmt.Errorf("checking for presence of existing %s: %+v", managedDiskId, err)
	}

	diskUpdate := disks.DiskUpdate{
		Properties: &disks.DiskUpdateProperties{},
	}

	oldSize, newSize := metadata.ResourceData.GetChange("disk_size_gb")
	canBeResizedWithoutDowntime := false
	if metadata.Client.Features.ManagedDisk.ExpandWithoutDowntime {
		shouldDetach = determineIfDataDiskRequiresDetaching(disk.Model, oldSize.(int), newSize.(int))
		diskSupportsNoDowntimeResize := determineIfDataDiskSupportsNoDowntimeResize(disk.Model, shouldDetach)

		vmSupportsNoDowntimeResize, err := determineIfVirtualMachineSupportsNoDowntimeResize(ctx, disk.Model, virtualMachinesClient, skusClient)
		if err != nil {
			return fmt.Errorf("determining if the Virtual Machine supports no-downtime-resizing: %+v", err)
		}

		canBeResizedWithoutDowntime = *vmSupportsNoDowntimeResize && diskSupportsNoDowntimeResize
	}

	if !canBeResizedWithoutDowntime {
		log.Printf("[INFO] The %s, or the Virtual Machine that it's attached to, doesn't support no-downtime-resizing - requiring that the VM should be shutdown", *id)
		shouldShutDown = true
	}

	diskUpdate.Properties.DiskSizeGB = pointer.To(int64(newSize.(int)))

	if shouldShutDown {
		virtualMachineId, err := virtualmachines.ParseVirtualMachineID(*disk.Model.ManagedBy)
		if err != nil {
			return err
		}

		err = resourceManagedDiskUpdateWithVmShutDown(ctx, metadata.Client, pointer.To(commonids.NewManagedDiskID(id.SubscriptionId, id.ResourceGroup, id.Name)), virtualMachineId, diskUpdate, shouldDetach)
		if err != nil {
			return err
		}
	} else { // otherwise, just update it
		err := diskClient.UpdateThenPoll(ctx, managedDiskId, diskUpdate)
		if err != nil {
			return fmt.Errorf("updating %s: %+v", managedDiskId, err)
		}
	}

	return nil
}
