package github.com/hashicorp/terraform-provider-azurerm/internal/services/compute
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2022-03-01/images"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenImageOSDisk(input *images.ImageStorageProfile) []interface{} {
	output := make([]interface{}, 0)

	if input != nil {
		if v := input.OsDisk; v != nil {
			blobUri := ""
			if uri := v.BlobUri; uri != nil {
				blobUri = *uri
			}
			caching := ""
			if v.Caching != nil {
				caching = string(*v.Caching)
			}
			diskSizeGB := 0
			if v.DiskSizeGB != nil {
				diskSizeGB = int(*v.DiskSizeGB)
			}
			managedDiskId := ""
			if disk := v.ManagedDisk; disk != nil && disk.Id != nil {
				managedDiskId = *disk.Id
			}
			diskEncryptionSetId := ""
			if set := v.DiskEncryptionSet; set != nil && set.Id != nil {
				encryptionId, _ := commonids.ParseDiskEncryptionSetIDInsensitively(*set.Id)
				diskEncryptionSetId = encryptionId.ID()
			}

			properties := map[string]interface{}{
				"blob_uri":               blobUri,
				"caching":                caching,
				"managed_disk_id":        managedDiskId,
				"os_type":                string(v.OsType),
				"os_state":               string(v.OsState),
				"size_gb":                diskSizeGB,
				"disk_encryption_set_id": diskEncryptionSetId,
			}

			storageType := ""
			if v.StorageAccountType != nil {
				storageType = string(*v.StorageAccountType)
			}
			properties["storage_type"] = storageType

			output = append(output, properties)
		}
	}

	return output
}
