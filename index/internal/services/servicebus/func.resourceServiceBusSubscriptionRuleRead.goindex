package github.com/hashicorp/terraform-provider-azurerm/internal/services/servicebus
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicebus/2024-01-01/rules"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicebus/2024-01-01/subscriptions"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/servicebus/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceServiceBusSubscriptionRuleRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).ServiceBus.SubscriptionsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := subscriptions.ParseRuleID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.RulesGet(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	d.Set("subscription_id", subscriptions.NewSubscriptions2ID(id.SubscriptionId, id.ResourceGroupName, id.NamespaceName, id.TopicName, id.SubscriptionName).ID())
	d.Set("name", id.RuleName)

	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			d.Set("filter_type", string(pointer.From(props.FilterType)))

			if props.Action != nil {
				d.Set("action", props.Action.SqlExpression)
			}

			if props.SqlFilter != nil {
				d.Set("sql_filter", props.SqlFilter.SqlExpression)
				if props.SqlFilter.CompatibilityLevel != nil {
					d.Set("sql_filter_compatibility_level", props.SqlFilter.CompatibilityLevel)
				}
			}

			if err := d.Set("correlation_filter", flattenAzureRmServiceBusCorrelationFilter(props.CorrelationFilter)); err != nil {
				return fmt.Errorf("setting `correlation_filter`: %+v", err)
			}
		}
	}

	return nil
}
