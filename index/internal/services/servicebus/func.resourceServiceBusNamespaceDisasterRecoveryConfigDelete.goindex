package github.com/hashicorp/terraform-provider-azurerm/internal/services/servicebus
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicebus/2024-01-01/disasterrecoveryconfigs"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceServiceBusNamespaceDisasterRecoveryConfigDelete(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).ServiceBus.DisasterRecoveryConfigsClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := disasterrecoveryconfigs.ParseDisasterRecoveryConfigID(d.Id())
	if err != nil {
		return err
	}

	// @tombuildsstuff: whilst we previously checked the 200 response, since that's the only valid status
	// code defined in the Swagger, anything else would raise an error thus the check is superfluous
	if _, err := client.BreakPairing(ctx, *id); err != nil {
		return fmt.Errorf("breaking pairing %s: %+v", id, err)
	}

	if err := resourceServiceBusNamespaceDisasterRecoveryConfigWaitForState(ctx, client, *id); err != nil {
		return fmt.Errorf("waiting for the pairing to break for %s: %+v", *id, err)
	}

	if _, err := client.Delete(ctx, *id); err != nil {
		return fmt.Errorf("deleting %s: %+v", *id, err)
	}

	// no future for deletion so wait for it to vanish
	deadline, ok := ctx.Deadline()
	if !ok {
		return fmt.Errorf("internal-error: context had no deadline")
	}
	deleteWait := &pluginsdk.StateChangeConf{
		Pending:    []string{"200"},
		Target:     []string{"404"},
		MinTimeout: 30 * time.Second,
		Timeout:    time.Until(deadline),
		Refresh: func() (interface{}, string, error) {
			resp, err := client.Get(ctx, *id)
			statusCode := "dropped connection"
			if resp.HttpResponse != nil {
				statusCode = strconv.Itoa(resp.HttpResponse.StatusCode)
			}

			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return resp, statusCode, nil
				}
				return nil, "nil", fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			return resp, statusCode, nil
		},
	}

	if _, err := deleteWait.WaitForStateContext(ctx); err != nil {
		return fmt.Errorf("waiting the deletion of %s: %v", *id, err)
	}

	namespaceId := disasterrecoveryconfigs.NewNamespaceID(id.SubscriptionId, id.ResourceGroupName, id.NamespaceName)
	// it can take some time for the name to become available again
	// this is mainly here 	to enable updating the resource in place
	deadline, ok = ctx.Deadline()
	if !ok {
		return fmt.Errorf("internal-error: context had no deadline")
	}
	nameFreeWait := &pluginsdk.StateChangeConf{
		Pending:    []string{"NameInUse"},
		Target:     []string{"None"},
		MinTimeout: 30 * time.Second,
		Timeout:    time.Until(deadline),
		Refresh: func() (interface{}, string, error) {
			resp, err := client.CheckNameAvailability(ctx, namespaceId, disasterrecoveryconfigs.CheckNameAvailability{
				Name: id.DisasterRecoveryConfigName,
			})
			if err != nil {
				return resp, "Error", fmt.Errorf("checking for the status of %s: %+v", *id, err)
			}

			reason := ""
			if model := resp.Model; model != nil {
				if v := model.Reason; v != nil {
					reason = string(*v)
				}
			}
			return resp, reason, nil
		},
	}

	if _, err := nameFreeWait.WaitForStateContext(ctx); err != nil {
		return fmt.Errorf("checking if the name for %s has become free: %v", *id, err)
	}

	return nil
}
