package github.com/hashicorp/terraform-provider-azurerm/internal/services/servicebus
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-sdk/resource-manager/servicebus/2024-01-01/disasterrecoveryconfigs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicebus/2024-01-01/namespaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicebus/2024-01-01/namespacesauthorizationrule"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func waitForNamespaceStatusToBeReady(ctx context.Context, meta interface{}, id namespaces.NamespaceId, timeout time.Duration) error {
	namespaceClient := meta.(*clients.Client).ServiceBus.NamespacesClient
	stateConf := &pluginsdk.StateChangeConf{
		Pending: []string{
			string(namespaces.EndPointProvisioningStateUpdating),
			string(namespaces.EndPointProvisioningStateCreating),
			string(namespaces.EndPointProvisioningStateDeleting),
		},
		Target:                    []string{string(namespaces.EndPointProvisioningStateSucceeded)},
		Refresh:                   serviceBusNamespaceProvisioningStateRefreshFunc(ctx, namespaceClient, id),
		Timeout:                   timeout,
		PollInterval:              10 * time.Second,
		ContinuousTargetOccurence: 5,
	}

	if _, err := stateConf.WaitForStateContext(ctx); err != nil {
		return err
	}
	return nil
}
