package github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/webpubsub/2024-03-01/webpubsub"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (w WebPubSubSocketIOResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.SignalR.WebPubSubClient.WebPubSub
			subscriptionId := metadata.Client.Account.SubscriptionId

			var config WebPubSubSocketIOResourceModel
			if err := metadata.Decode(&config); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := webpubsub.NewWebPubSubID(subscriptionId, config.ResourceGroupName, config.Name)

			locks.ByID(id.ID())
			defer locks.UnlockByID(id.ID())

			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return tf.ImportAsExistsError("azurerm_web_pubsub_socketio", id.ID())
			}

			expandedIdentity, err := identity.ExpandSystemOrUserAssignedMapFromModel(config.Identity)
			if err != nil {
				return fmt.Errorf("expanding `identity`: %+v", err)
			}

			parameters := webpubsub.WebPubSubResource{
				Kind:     pointer.To(webpubsub.ServiceKindSocketIO),
				Location: location.Normalize(config.Location),
				Identity: expandedIdentity,
				Properties: &webpubsub.WebPubSubProperties{
					DisableAadAuth:         pointer.To(!config.AADAuthEnabled),
					DisableLocalAuth:       pointer.To(!config.LocalAuthEnabled),
					LiveTraceConfiguration: expandLiveTraceConfigFromModel(config),
					PublicNetworkAccess:    pointer.To(config.PublicNetworkAccess),
					SocketIO: &webpubsub.WebPubSubSocketIOSettings{
						ServiceMode: pointer.To(config.ServiceMode),
					},
					Tls: &webpubsub.WebPubSubTlsSettings{
						ClientCertEnabled: pointer.To(config.TlsClientCertEnabled),
					},
				},
				Sku:  expandWebPubSubSocketIOSkuFromModel(config.Sku),
				Tags: pointer.To(config.Tags),
			}

			if err := client.CreateOrUpdateThenPoll(ctx, id, parameters); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
