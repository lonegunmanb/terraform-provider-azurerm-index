package github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/webpubsub/2023-02-01/webpubsub"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	eventhubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/eventhub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenEventHandler(input *[]webpubsub.EventHandler) []interface{} {
	eventHandlerBlock := make([]interface{}, 0)
	if input == nil {
		return eventHandlerBlock
	}

	for _, item := range *input {
		userEventPatten := ""
		if item.UserEventPattern != nil {
			userEventPatten = *item.UserEventPattern
		}

		sysEvents := make([]interface{}, 0)
		if item.SystemEvents != nil {
			sysEvents = utils.FlattenStringSlice(item.SystemEvents)
		}

		authBlock := make([]interface{}, 0)
		if item.Auth != nil {
			authBlock = flattenAuth(item.Auth)
		}

		eventHandlerBlock = append(eventHandlerBlock, map[string]interface{}{
			"url_template":       item.UrlTemplate,
			"user_event_pattern": userEventPatten,
			"system_events":      sysEvents,
			"auth":               authBlock,
		})
	}
	return eventHandlerBlock
}
