package github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/webpubsub/2024-03-01/webpubsub"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	eventhubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/eventhub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenEventListener(listener *[]webpubsub.EventListener) []interface{} {
	eventListenerBlocks := make([]interface{}, 0)
	if listener == nil {
		return eventListenerBlocks
	}

	for _, item := range *listener {
		listenerBlock := make(map[string]interface{}, 0)
		// todo use the type Assertion or Type field in sdk to get the different sub-class
		if eventFilter := item.Filter; eventFilter != nil {
			eventNameFilter := item.Filter.(webpubsub.EventNameFilter)
			userNameFilterList := make([]interface{}, 0)
			if eventNameFilter.SystemEvents != nil {
				listenerBlock["system_event_name_filter"] = utils.FlattenStringSlice(eventNameFilter.SystemEvents)
			}
			if eventNameFilter.UserEventPattern != nil && *eventNameFilter.UserEventPattern != "" {
				v := strings.Split(*eventNameFilter.UserEventPattern, ",")
				for _, s := range v {
					userNameFilterList = append(userNameFilterList, s)
				}
				listenerBlock["user_event_name_filter"] = userNameFilterList
			}
		}

		if eventEndpoint := item.Endpoint; eventEndpoint != nil {
			eventhubEndpoint := item.Endpoint.(webpubsub.EventHubEndpoint)
			listenerBlock["eventhub_namespace_name"] = strings.TrimSuffix(eventhubEndpoint.FullyQualifiedNamespace, ".servicebus.windows.net")
			listenerBlock["eventhub_name"] = eventhubEndpoint.EventHubName
		}
		eventListenerBlocks = append(eventListenerBlocks, listenerBlock)
	}

	return eventListenerBlocks
}
