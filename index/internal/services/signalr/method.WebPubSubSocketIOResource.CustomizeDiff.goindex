package github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/webpubsub/2024-03-01/webpubsub"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (w WebPubSubSocketIOResource) CustomizeDiff() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var config WebPubSubSocketIOResourceModel
			if err := metadata.DecodeDiff(&config); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			if len(config.Sku) > 0 {
				capacity := config.Sku[0].Capacity
				sku := config.Sku[0].Name

				switch sku {
				case helpers.SkuNameFreeF1:
					if capacity > 1 {
						return fmt.Errorf("`capacity` can only be `1` when `sku` is set to `%s`", sku)
					}

					if config.PublicNetworkAccess == helpers.PublicNetworkAccessDisabled {
						return fmt.Errorf("`public_network_access` cannot be set to `Disabled` when `sku` is set to `%s`", sku)
					}

					if config.TlsClientCertEnabled {
						return fmt.Errorf("tls_client_cert_enabled` cannot be set to `true` when `sku` is set to `%s`", sku)
					}
				case helpers.SkuNameStandardS1:
					if capacity > 100 {
						return fmt.Errorf("`capacity` cannot be greater than `100` when `sku` is set to `%s`", sku)
					}
				case helpers.SkuNamePremiumP1:
					if capacity > 100 {
						return fmt.Errorf("`capacity` cannot be greater than `100` when `sku` is set to `%s`", sku)
					}
				case helpers.SkuNamePremiumP2:
					if capacity < 100 {
						return fmt.Errorf("`capacity` must be greater than or equal to `100` when `sku` is set to `%s`", sku)
					}
				}
			}

			return nil
		},
	}
}
