package github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/privateendpoints"
	"github.com/hashicorp/go-azure-sdk/resource-manager/webpubsub/2023-02-01/webpubsub"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceWebPubsubNetworkACLCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SignalR.WebPubSubClient.WebPubSub
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := webpubsub.ParseWebPubSubID(d.Get("web_pubsub_id").(string))
	if err != nil {
		return err
	}

	existing, err := client.Get(ctx, *id)
	if err != nil {
		return fmt.Errorf("checking for present of existing %q: %+v", id, err)
	}

	locks.ByName(id.WebPubSubName, "azurerm_web_pubsub")
	defer locks.UnlockByName(id.WebPubSubName, "azurerm_web_pubsub")

	if d.IsNewResource() {
		if !isNewNetworkACL(*existing.Model) {
			return tf.ImportAsExistsError("azurerm_web_pubsub_network_acl", id.ID())
		}
	}
	if existing.Model == nil {
		return fmt.Errorf("retrieving existing %s: `model` was nil", *id)
	}
	if existing.Model.Properties == nil {
		return fmt.Errorf("retrieving existing %s: `model.Properties` was nil", *id)
	}

	payload := *existing.Model
	defaultAction := webpubsub.ACLAction(d.Get("default_action").(string))
	networkACL := webpubsub.WebPubSubNetworkACLs{
		DefaultAction:    &defaultAction,
		PublicNetwork:    expandWebpubsubPublicNetwork(d.Get("public_network").([]interface{})),
		PrivateEndpoints: expandWebpubsubPrivateEndpoint(d.Get("private_endpoint").(*pluginsdk.Set).List(), payload.Properties.PrivateEndpointConnections),
	}

	if defaultAction == webpubsub.ACLActionAllow && networkACL.PublicNetwork.Allow != nil && len(*networkACL.PublicNetwork.Allow) != 0 {
		return fmt.Errorf("when `default_action` is `Allow` for `public_network`, `allowed_request_types` cannot be specified")
	} else if defaultAction == webpubsub.ACLActionDeny && networkACL.PublicNetwork.Deny != nil && len(*networkACL.PublicNetwork.Deny) != 0 {
		return fmt.Errorf("when `default_action` is `Deny` for `public_network`, `denied_request_types` cannot be specified")
	}

	if networkACL.PrivateEndpoints != nil {
		for _, privateEndpoint := range *networkACL.PrivateEndpoints {
			if privateEndpoint.Allow != nil && privateEndpoint.Deny != nil && len(*privateEndpoint.Allow) != 0 && len(*privateEndpoint.Deny) != 0 {
				return fmt.Errorf("`allowed_request_types` and `denied_request_types` cannot be set together for `private_endpoint`")
			}

			if defaultAction == webpubsub.ACLActionAllow && privateEndpoint.Allow != nil && len(*privateEndpoint.Allow) != 0 {
				return fmt.Errorf("when `default_action` is `Allow` for `private_endpoint`, `allowed_request_types` cannot be specified")
			} else if defaultAction == webpubsub.ACLActionDeny && privateEndpoint.Deny != nil && len(*privateEndpoint.Deny) != 0 {
				return fmt.Errorf("when `default_action` is `Deny` for `private_endpoint`, `denied_request_types` cannot be specified")
			}
		}
	}
	payload.Properties.NetworkACLs = &networkACL

	if err := client.UpdateThenPoll(ctx, *id, payload); err != nil {
		return fmt.Errorf("updating Network ACL configuration for %q: %+v", id, err)
	}

	d.SetId(id.ID())
	return resourceWebPubsubNetworkACLRead(d, meta)
}
