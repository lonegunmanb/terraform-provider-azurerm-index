package github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/signalr/2024-03-01/signalr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/migration"
	signalrValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceArmSignalRServiceUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SignalR.SignalRClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := signalr.ParseSignalRID(d.Id())
	if err != nil {
		return err
	}

	locks.ByID(id.ID())
	defer locks.UnlockByID(id.ID())

	resourceType := signalr.SignalRResource{}

	existing, err := client.Get(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	if existing.Model != nil {
		resourceType.Location = existing.Model.Location
	}

	currentSku := ""
	if existing.Model != nil && existing.Model.Sku != nil {
		currentSku = existing.Model.Sku.Name
	}

	if d.HasChange("sku") {
		sku := d.Get("sku").([]interface{})
		resourceType.Sku = expandSignalRServiceSku(sku)
		currentSku = resourceType.Sku.Name
	}

	if d.HasChanges("cors", "upstream_endpoint", "serverless_connection_timeout_in_seconds", "identity",
		"public_network_access_enabled", "local_auth_enabled", "aad_auth_enabled", "tls_client_cert_enabled",
		"features", "connectivity_logs_enabled", "messaging_logs_enabled", "http_request_logs_enabled", "service_mode", "live_trace_enabled", "live_trace") {
		resourceType.Properties = &signalr.SignalRProperties{}

		if d.HasChange("cors") {
			corsRaw := d.Get("cors").([]interface{})
			resourceType.Properties.Cors = expandSignalRCors(corsRaw)
		}

		if d.HasChange("upstream_endpoint") {
			featuresRaw := d.Get("upstream_endpoint").(*pluginsdk.Set).List()
			resourceType.Properties.Upstream = expandUpstreamSettings(featuresRaw)
		}

		if d.HasChange("serverless_connection_timeout_in_seconds") {
			resourceType.Properties.Serverless = &signalr.ServerlessSettings{
				ConnectionTimeoutInSeconds: utils.Int64(int64(d.Get("serverless_connection_timeout_in_seconds").(int))),
			}
		}

		if d.HasChange("identity") {
			identity, err := identity.ExpandSystemOrUserAssignedMap(d.Get("identity").([]interface{}))
			if err != nil {
				return fmt.Errorf("expanding `identity`: %+v", err)
			}
			resourceType.Identity = identity
		}

		if d.HasChange("public_network_access_enabled") {
			publicNetworkAcc := "Enabled"
			if !d.Get("public_network_access_enabled").(bool) {
				publicNetworkAcc = "Disabled"
			}
			if currentSku == "Free_F1" && publicNetworkAcc == "Disabled" {
				return fmt.Errorf("SKU Free_F1 does not support disabling public network access")
			}
			resourceType.Properties.PublicNetworkAccess = utils.String(publicNetworkAcc)
		}

		if d.HasChange("local_auth_enabled") {
			resourceType.Properties.DisableLocalAuth = utils.Bool(!d.Get("local_auth_enabled").(bool))
		}

		if d.HasChange("aad_auth_enabled") {
			resourceType.Properties.DisableAadAuth = utils.Bool(!d.Get("aad_auth_enabled").(bool))
		}

		if d.HasChange("tls_client_cert_enabled") {
			tlsClientCertEnabled := d.Get("tls_client_cert_enabled").(bool)
			resourceType.Properties.Tls = &signalr.SignalRTlsSettings{
				ClientCertEnabled: utils.Bool(tlsClientCertEnabled),
			}
			if currentSku == "Free_F1" && tlsClientCertEnabled {
				return fmt.Errorf("SKU Free_F1 does not support enabling tls client cert")
			}
		}

		if d.HasChanges("connectivity_logs_enabled", "messaging_logs_enabled", "http_request_logs_enabled", "live_trace_enabled", "service_mode") {
			features := make([]signalr.SignalRFeature, 0)
			if d.HasChange("connectivity_logs_enabled") || d.HasChange("messaging_logs_enabled") || d.HasChange("http_request_logs_enabled") {
				connectivityLogsNew := d.Get("connectivity_logs_enabled")
				features = append(features, signalRFeature(signalr.FeatureFlagsEnableConnectivityLogs, strconv.FormatBool(connectivityLogsNew.(bool))))

				messagingLogsNew := d.Get("messaging_logs_enabled")
				features = append(features, signalRFeature(signalr.FeatureFlagsEnableMessagingLogs, strconv.FormatBool(messagingLogsNew.(bool))))

				httpLogsNew := d.Get("http_request_logs_enabled")

				resourceType.Properties.ResourceLogConfiguration = expandSignalRResourceLogConfig(connectivityLogsNew.(bool), messagingLogsNew.(bool), httpLogsNew.(bool))
			}

			if d.HasChange("live_trace_enabled") {
				liveTraceEnabled := false
				if v, ok := d.GetOk("live_trace_enabled"); ok {
					liveTraceEnabled = v.(bool)
				}
				features = append(features, signalRFeature("EnableLiveTrace", strconv.FormatBool(liveTraceEnabled)))
			}

			if d.HasChange("service_mode") {
				serviceMode := "Default"
				if v, ok := d.GetOk("service_mode"); ok {
					serviceMode = v.(string)
				}
				features = append(features, signalRFeature(signalr.FeatureFlagsServiceMode, serviceMode))
			}

			resourceType.Properties.Features = &features
		}

		if d.HasChange("live_trace") {
			resourceType.Properties.LiveTraceConfiguration = expandSignalRLiveTraceConfig(d.Get("live_trace").([]interface{}))
		}
	}

	if d.HasChange("tags") {
		tagsRaw := d.Get("tags").(map[string]interface{})
		resourceType.Tags = tags.Expand(tagsRaw)
	}

	if err := client.UpdateThenPoll(ctx, *id, resourceType); err != nil {
		return fmt.Errorf("updating %s: %+v", *id, err)
	}

	deadline, ok := ctx.Deadline()
	if !ok {
		return fmt.Errorf("internal-error: context had no deadline")
	}
	stateConf := &pluginsdk.StateChangeConf{
		Pending: []string{
			string(signalr.ProvisioningStateUpdating),
			string(signalr.ProvisioningStateCreating),
			string(signalr.ProvisioningStateMoving),
			string(signalr.ProvisioningStateRunning),
		},
		Target:                    []string{string(signalr.ProvisioningStateSucceeded)},
		Refresh:                   signalrServiceProvisioningStateRefreshFunc(ctx, client, *id),
		Timeout:                   time.Until(deadline),
		PollInterval:              10 * time.Second,
		ContinuousTargetOccurence: 20,
	}

	if _, err := stateConf.WaitForStateContext(ctx); err != nil {
		return err
	}

	return resourceArmSignalRServiceRead(d, meta)
}
