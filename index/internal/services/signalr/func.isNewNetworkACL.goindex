package github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/privateendpoints"
	"github.com/hashicorp/go-azure-sdk/resource-manager/webpubsub/2023-02-01/webpubsub"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func isNewNetworkACL(existing webpubsub.WebPubSubResource) bool {
	if existing.Properties == nil || existing.Properties.NetworkACLs == nil {
		return true
	}

	if existing.Properties.NetworkACLs.DefaultAction == nil || *existing.Properties.NetworkACLs.DefaultAction != webpubsub.ACLActionDeny {
		return false
	}

	if existing.Properties.NetworkACLs.PublicNetwork == nil ||
		existing.Properties.NetworkACLs.PublicNetwork.Deny != nil ||
		(existing.Properties.NetworkACLs.PublicNetwork.Allow == nil || len(*existing.Properties.NetworkACLs.PublicNetwork.Allow) != len(defaultRequestTypes)) {
		return false
	}

	defaultRequestTypeMap := map[webpubsub.WebPubSubRequestType]bool{
		webpubsub.WebPubSubRequestTypeClientConnection: true,
		webpubsub.WebPubSubRequestTypeRESTAPI:          true,
		webpubsub.WebPubSubRequestTypeServerConnection: true,
		webpubsub.WebPubSubRequestTypeTrace:            true,
	}

	for _, allowType := range *existing.Properties.NetworkACLs.PublicNetwork.Allow {
		if !defaultRequestTypeMap[allowType] {
			return false
		}
	}

	if existing.Properties.NetworkACLs.PrivateEndpoints != nil {
		for _, peItem := range *existing.Properties.NetworkACLs.PrivateEndpoints {
			if peItem.Allow == nil || len(*peItem.Allow) != len(defaultRequestTypes) || peItem.Deny != nil {
				return false
			}
			for _, allowType := range *peItem.Allow {
				if !defaultRequestTypeMap[allowType] {
					return false
				}
			}
		}
	}
	return true
}
