package github.com/hashicorp/terraform-provider-azurerm/internal/services/signalr
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/privateendpoints"
	"github.com/hashicorp/go-azure-sdk/resource-manager/webpubsub/2024-03-01/webpubsub"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceWebpubsubNetworkACLDelete(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SignalR.WebPubSubClient.WebPubSub
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := webpubsub.ParseWebPubSubID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving %q: %+v", id, err)
	}

	defaultAction := webpubsub.ACLActionDeny
	var denyRequestTypes []webpubsub.WebPubSubRequestType
	networkACL := &webpubsub.WebPubSubNetworkACLs{
		DefaultAction: &defaultAction,
		PublicNetwork: &webpubsub.NetworkACL{
			Allow: &defaultRequestTypes,
			Deny:  &denyRequestTypes,
		},
	}

	if resp.Model == nil {
		return fmt.Errorf("retrieving existing %s: `model` was nil", *id)
	}
	if resp.Model.Properties == nil {
		return fmt.Errorf("retrieving existing %s: `model.Properties` was nil", *id)
	}

	payload := *resp.Model
	if payload.Properties.NetworkACLs != nil && payload.Properties.NetworkACLs.PrivateEndpoints != nil {
		privateEndpoints := make([]webpubsub.PrivateEndpointACL, 0)
		for _, item := range *payload.Properties.NetworkACLs.PrivateEndpoints {
			privateEndpoints = append(privateEndpoints, webpubsub.PrivateEndpointACL{
				Allow: &defaultRequestTypes,
				Name:  item.Name,
			})
		}
		networkACL.PrivateEndpoints = &privateEndpoints
	}

	payload.Properties.NetworkACLs = networkACL

	if err := client.UpdateThenPoll(ctx, *id, payload); err != nil {
		return fmt.Errorf("resetting the default Network ACL configuration for %q: %+v", id, err)
	}

	return nil
}
