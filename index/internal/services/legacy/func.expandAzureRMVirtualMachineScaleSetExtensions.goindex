package github.com/hashicorp/terraform-provider-azurerm/internal/services/legacy
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-11-01/virtualmachinescalesets"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	validate2 "github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/legacy/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandAzureRMVirtualMachineScaleSetExtensions(d *pluginsdk.ResourceData) (*virtualmachinescalesets.VirtualMachineScaleSetExtensionProfile, error) {
	extensions := d.Get("extension").(*pluginsdk.Set).List()
	resources := make([]virtualmachinescalesets.VirtualMachineScaleSetExtension, 0, len(extensions))
	for _, e := range extensions {
		config := e.(map[string]interface{})
		name := config["name"].(string)
		publisher := config["publisher"].(string)
		t := config["type"].(string)
		version := config["type_handler_version"].(string)

		extension := virtualmachinescalesets.VirtualMachineScaleSetExtension{
			Name: &name,
			Properties: &virtualmachinescalesets.VirtualMachineScaleSetExtensionProperties{
				Publisher:          &publisher,
				Type:               &t,
				TypeHandlerVersion: &version,
			},
		}

		if u := config["auto_upgrade_minor_version"]; u != nil {
			upgrade := u.(bool)
			extension.Properties.AutoUpgradeMinorVersion = &upgrade
		}

		if a := config["provision_after_extensions"]; a != nil {
			provision_after_extensions := config["provision_after_extensions"].(*pluginsdk.Set).List()
			if len(provision_after_extensions) > 0 {
				var provisionAfterExtensions []string
				for _, a := range provision_after_extensions {
					str := a.(string)
					provisionAfterExtensions = append(provisionAfterExtensions, str)
				}
				extension.Properties.ProvisionAfterExtensions = &provisionAfterExtensions
			}
		}

		if s := config["settings"].(string); s != "" {
			var result interface{}
			err := json.Unmarshal([]byte(s), &result)
			if err != nil {
				return nil, fmt.Errorf("unmarshaling `settings`: %+v", err)
			}
			extension.Properties.Settings = pointer.To(result)
		}

		if s := config["protected_settings"].(string); s != "" {
			var result interface{}
			err := json.Unmarshal([]byte(s), &result)
			if err != nil {
				return nil, fmt.Errorf("unmarshaling `protected_settings`: %+v", err)
			}
			extension.Properties.ProtectedSettings = pointer.To(result)
		}

		resources = append(resources, extension)
	}

	return &virtualmachinescalesets.VirtualMachineScaleSetExtensionProfile{
		Extensions: &resources,
	}, nil
}
