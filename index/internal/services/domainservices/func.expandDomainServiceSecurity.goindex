package github.com/hashicorp/terraform-provider-azurerm/internal/services/domainservices
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/aad/2021-05-01/domainservices"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/domainservices/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/domainservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandDomainServiceSecurity(input []interface{}) *domainservices.DomainSecuritySettings {
	if len(input) == 0 {
		return nil
	}
	v := input[0].(map[string]interface{})

	kerberosRc4Encryption := domainservices.KerberosRc4EncryptionDisabled
	kerberosArmoring := domainservices.KerberosArmoringDisabled
	ntlmV1 := domainservices.NtlmV1Disabled
	syncKerberosPasswords := domainservices.SyncKerberosPasswordsDisabled
	syncNtlmPasswords := domainservices.SyncNtlmPasswordsDisabled
	syncOnPremPasswords := domainservices.SyncOnPremPasswordsDisabled
	tlsV1 := domainservices.TlsV1Disabled

	if v["kerberos_armoring_enabled"].(bool) {
		kerberosArmoring = domainservices.KerberosArmoringEnabled
	}
	if v["kerberos_rc4_encryption_enabled"].(bool) {
		kerberosRc4Encryption = domainservices.KerberosRc4EncryptionEnabled
	}
	if v["ntlm_v1_enabled"].(bool) {
		ntlmV1 = domainservices.NtlmV1Enabled
	}
	if v["sync_kerberos_passwords"].(bool) {
		syncKerberosPasswords = domainservices.SyncKerberosPasswordsEnabled
	}
	if v["sync_ntlm_passwords"].(bool) {
		syncNtlmPasswords = domainservices.SyncNtlmPasswordsEnabled
	}
	if v["sync_on_prem_passwords"].(bool) {
		syncOnPremPasswords = domainservices.SyncOnPremPasswordsEnabled
	}
	if v["tls_v1_enabled"].(bool) {
		tlsV1 = domainservices.TlsV1Enabled
	}

	return &domainservices.DomainSecuritySettings{
		KerberosArmoring:      &kerberosArmoring,
		KerberosRc4Encryption: &kerberosRc4Encryption,
		NtlmV1:                &ntlmV1,
		SyncKerberosPasswords: &syncKerberosPasswords,
		SyncNtlmPasswords:     &syncNtlmPasswords,
		SyncOnPremPasswords:   &syncOnPremPasswords,
		TlsV1:                 &tlsV1,
	}
}
