package github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cosmosdb/2022-05-15/cosmosdb"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cosmosdb/2022-05-15/sqldedicatedgateway"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r CosmosDbSqlDedicatedGatewayResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Cosmos.SqlDedicatedGatewayClient

			id, err := sqldedicatedgateway.ParseServiceID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model CosmosDbSqlDedicatedGatewayModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			resp, err := client.ServiceGet(ctx, *id)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			properties := resp.Model
			if properties == nil {
				return fmt.Errorf("retrieving %s: properties was nil", id)
			}

			serviceType := sqldedicatedgateway.ServiceTypeSqlDedicatedGateway

			parameters := &sqldedicatedgateway.ServiceResourceCreateUpdateParameters{
				Properties: &sqldedicatedgateway.ServiceResourceCreateUpdateProperties{
					ServiceType:   &serviceType,
					InstanceCount: &model.InstanceCount,
					InstanceSize:  &model.InstanceSize,
				},
			}

			if err := client.ServiceCreateThenPoll(ctx, *id, *parameters); err != nil {
				return fmt.Errorf("updating %s: %+v", *id, err)
			}

			return nil
		},
	}
}
