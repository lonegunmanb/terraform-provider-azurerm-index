package github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cosmosdb/2023-04-15/managedcassandras"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/attestation/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCassandraClusterCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Cosmos.ManagedCassandraClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	resourceGroupName := d.Get("resource_group_name").(string)
	name := d.Get("name").(string)
	id := managedcassandras.NewCassandraClusterID(subscriptionId, resourceGroupName, name)

	existing, err := client.CassandraClustersGet(ctx, id)
	if err != nil {
		if !response.WasNotFound(existing.HttpResponse) {
			return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
		}
	}
	if !response.WasNotFound(existing.HttpResponse) {
		return tf.ImportAsExistsError("azurerm_cosmosdb_cassandra_cluster", id.ID())
	}

	expandedIdentity, err := expandCassandraClusterIdentity(d.Get("identity").([]interface{}))
	if err != nil {
		return fmt.Errorf("expanding `identity`: %+v", err)
	}

	authenticationMethod := managedcassandras.AuthenticationMethod(d.Get("authentication_method").(string))

	body := managedcassandras.ClusterResource{
		Identity: expandedIdentity,
		Location: utils.String(azure.NormalizeLocation(d.Get("location").(string))),
		Properties: &managedcassandras.ClusterResourceProperties{
			AuthenticationMethod:          &authenticationMethod,
			CassandraVersion:              utils.String(d.Get("version").(string)),
			DelegatedManagementSubnetId:   utils.String(d.Get("delegated_management_subnet_id").(string)),
			HoursBetweenBackups:           utils.Int64(int64(d.Get("hours_between_backups").(int))),
			InitialCassandraAdminPassword: utils.String(d.Get("default_admin_password").(string)),
			RepairEnabled:                 utils.Bool(d.Get("repair_enabled").(bool)),
		},
		Tags: tags.Expand(d.Get("tags").(map[string]interface{})),
	}

	if v, ok := d.GetOk("client_certificate_pems"); ok {
		body.Properties.ClientCertificates = expandCassandraClusterCertificate(v.([]interface{}))
	}

	if v, ok := d.GetOk("external_gossip_certificate_pems"); ok {
		body.Properties.ExternalGossipCertificates = expandCassandraClusterCertificate(v.([]interface{}))
	}

	if v, ok := d.GetOk("external_seed_node_ip_addresses"); ok {
		body.Properties.ExternalSeedNodes = expandCassandraClusterExternalSeedNode(v.([]interface{}))
	}

	err = client.CassandraClustersCreateUpdateThenPoll(ctx, id, body)
	if err != nil {
		return fmt.Errorf("creating %q: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceCassandraClusterRead(d, meta)
}
