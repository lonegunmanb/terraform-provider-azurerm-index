package github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cosmosdb/2023-04-15/managedcassandras"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos/validate"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCassandraDatacenterCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Cosmos.ManagedCassandraClient
	ctx, cancel := timeouts.ForCreate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	clusterId, err := managedcassandras.ParseCassandraClusterID(d.Get("cassandra_cluster_id").(string))
	if err != nil {
		return err
	}
	id := managedcassandras.NewDataCenterID(clusterId.SubscriptionId, clusterId.ResourceGroupName, clusterId.CassandraClusterName, d.Get("name").(string))

	existing, err := client.CassandraDataCentersGet(ctx, id)
	if err != nil {
		if !response.WasNotFound(existing.HttpResponse) {
			return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
		}
	}
	if !response.WasNotFound(existing.HttpResponse) {
		return tf.ImportAsExistsError("azurerm_cosmosdb_cassandra_datacenter", id.ID())
	}

	payload := managedcassandras.DataCenterResource{
		Properties: &managedcassandras.DataCenterResourceProperties{
			DelegatedSubnetId:  utils.String(d.Get("delegated_management_subnet_id").(string)),
			NodeCount:          utils.Int64(int64(d.Get("node_count").(int))),
			AvailabilityZone:   utils.Bool(d.Get("availability_zones_enabled").(bool)),
			DiskCapacity:       utils.Int64(int64(d.Get("disk_count").(int))),
			DiskSku:            utils.String(d.Get("disk_sku").(string)),
			DataCenterLocation: utils.String(azure.NormalizeLocation(d.Get("location").(string))),
		},
	}

	if v, ok := d.GetOk("backup_storage_customer_key_uri"); ok {
		payload.Properties.BackupStorageCustomerKeyUri = utils.String(v.(string))
	}

	if v, ok := d.GetOk("base64_encoded_yaml_fragment"); ok {
		payload.Properties.Base64EncodedCassandraYamlFragment = utils.String(v.(string))
	}

	if v, ok := d.GetOk("managed_disk_customer_key_uri"); ok {
		payload.Properties.ManagedDiskCustomerKeyUri = utils.String(v.(string))
	}

	if v, ok := d.GetOk("sku_name"); ok {
		payload.Properties.Sku = utils.String(v.(string))
	}

	if err = client.CassandraDataCentersCreateUpdateThenPoll(ctx, id, payload); err != nil {
		return fmt.Errorf("creating %q: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceCassandraDatacenterRead(d, meta)
}
