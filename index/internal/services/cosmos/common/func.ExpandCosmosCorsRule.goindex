package github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos/common
import (
	"math"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cosmosdb/2024-08-15/cosmosdb"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func ExpandCosmosCorsRule(input []interface{}) *[]cosmosdb.CorsPolicy {
	if len(input) == 0 || input[0] == nil {
		return nil
	}
	corsRules := make([]cosmosdb.CorsPolicy, 0)

	if len(input) == 0 {
		return &corsRules
	}

	for _, attr := range input {
		corsRuleAttr := attr.(map[string]interface{})
		corsRule := cosmosdb.CorsPolicy{}
		corsRule.AllowedOrigins = strings.Join(*utils.ExpandStringSlice(corsRuleAttr["allowed_origins"].([]interface{})), ",")
		corsRule.ExposedHeaders = utils.String(strings.Join(*utils.ExpandStringSlice(corsRuleAttr["exposed_headers"].([]interface{})), ","))
		corsRule.AllowedHeaders = utils.String(strings.Join(*utils.ExpandStringSlice(corsRuleAttr["allowed_headers"].([]interface{})), ","))
		corsRule.AllowedMethods = utils.String(strings.Join(*utils.ExpandStringSlice(corsRuleAttr["allowed_methods"].([]interface{})), ","))

		if corsRuleAttr["max_age_in_seconds"].(int) != 0 {
			corsRule.MaxAgeInSeconds = utils.Int64(int64(corsRuleAttr["max_age_in_seconds"].(int)))
		}

		corsRules = append(corsRules, corsRule)
	}

	return &corsRules
}
