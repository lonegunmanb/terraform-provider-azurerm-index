package github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cosmosdb/2023-04-15/managedcassandras"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos/validate"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCassandraDatacenterUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Cosmos.ManagedCassandraClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := managedcassandras.ParseDataCenterID(d.Id())
	if err != nil {
		return err
	}

	payload := managedcassandras.DataCenterResource{
		Properties: &managedcassandras.DataCenterResourceProperties{
			DelegatedSubnetId:  utils.String(d.Get("delegated_management_subnet_id").(string)),
			NodeCount:          utils.Int64(int64(d.Get("node_count").(int))),
			Sku:                utils.String(d.Get("sku_name").(string)),
			DataCenterLocation: utils.String(azure.NormalizeLocation(d.Get("location").(string))),
			DiskSku:            utils.String(d.Get("disk_sku").(string)),
		},
	}

	if v, ok := d.GetOk("backup_storage_customer_key_uri"); ok {
		payload.Properties.BackupStorageCustomerKeyUri = utils.String(v.(string))
	}

	if v, ok := d.GetOk("base64_encoded_yaml_fragment"); ok {
		payload.Properties.Base64EncodedCassandraYamlFragment = utils.String(v.(string))
	}

	if v, ok := d.GetOk("managed_disk_customer_key_uri"); ok {
		payload.Properties.ManagedDiskCustomerKeyUri = utils.String(v.(string))
	}

	if err := client.CassandraDataCentersCreateUpdateThenPoll(ctx, *id, payload); err != nil {
		return fmt.Errorf("updating %q: %+v", id, err)
	}

	// Issue: https://github.com/Azure/azure-rest-api-specs/issues/19078
	// There is a long running issue on updating this resource.
	// The API cannot update the property after WaitForCompletionRef is returned.
	// It has to wait a while after that. Then the property can be updated successfully.
	stateConf := &pluginsdk.StateChangeConf{
		Delay:      1 * time.Minute,
		Pending:    []string{string(managedcassandras.ManagedCassandraProvisioningStateUpdating)},
		Target:     []string{string(managedcassandras.ManagedCassandraProvisioningStateSucceeded)},
		Refresh:    cassandraDatacenterStateRefreshFunc(ctx, client, *id),
		MinTimeout: 15 * time.Second,
		Timeout:    d.Timeout(pluginsdk.TimeoutUpdate),
	}

	if _, err := stateConf.WaitForStateContext(ctx); err != nil {
		return fmt.Errorf("waiting for update of %s: %+v", id, err)
	}

	return resourceCassandraDatacenterRead(d, meta)
}
