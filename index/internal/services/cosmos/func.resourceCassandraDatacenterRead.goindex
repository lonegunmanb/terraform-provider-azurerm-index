package github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cosmosdb/2023-04-15/managedcassandras"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos/validate"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCassandraDatacenterRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Cosmos.ManagedCassandraClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := managedcassandras.ParseDataCenterID(d.Id())
	if err != nil {
		return err
	}
	resp, err := client.CassandraDataCentersGet(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[INFO] Error reading %q - removing from state", id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("reading %q: %+v", id, err)
	}

	clusterId := managedcassandras.NewCassandraClusterID(id.SubscriptionId, id.ResourceGroupName, id.CassandraClusterName)
	d.Set("name", id.DataCenterName)
	d.Set("cassandra_cluster_id", clusterId.ID())
	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			d.Set("delegated_management_subnet_id", props.DelegatedSubnetId)
			d.Set("location", location.NormalizeNilable(props.DataCenterLocation))
			d.Set("backup_storage_customer_key_uri", props.BackupStorageCustomerKeyUri)
			d.Set("base64_encoded_yaml_fragment", props.Base64EncodedCassandraYamlFragment)
			d.Set("managed_disk_customer_key_uri", props.ManagedDiskCustomerKeyUri)
			d.Set("node_count", props.NodeCount)
			d.Set("disk_count", int(*props.DiskCapacity))
			d.Set("disk_sku", props.DiskSku)
			d.Set("sku_name", props.Sku)
			d.Set("availability_zones_enabled", props.AvailabilityZone)

			if err := d.Set("seed_node_ip_addresses", flattenCassandraDatacenterSeedNodes(props.SeedNodes)); err != nil {
				return fmt.Errorf("setting `seed_node_ip_addresses`: %+v", err)
			}
		}
	}
	return nil
}
