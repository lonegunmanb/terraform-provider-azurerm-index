package github.com/hashicorp/terraform-provider-azurerm/internal/services/orbital
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/orbital/2022-11-01/spacecraft"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r SpacecraftResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Orbital.SpacecraftClient
			id, err := spacecraft.ParseSpacecraftID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			if model := resp.Model; model != nil {
				props := model.Properties
				twoLineElements := []string{props.TleLine1, props.TleLine2}
				state := SpacecraftResourceModel{
					Name:            id.SpacecraftName,
					ResourceGroup:   id.ResourceGroupName,
					Location:        model.Location,
					NoradId:         *props.NoradId,
					TwoLineElements: twoLineElements,
					TitleLine:       props.TitleLine,
				}
				if model.Tags != nil {
					state.Tags = *model.Tags
				}
				spacecraftLinks, err := flattenSpacecraftLinks(props.Links)
				if err != nil {
					return err
				}
				state.Links = spacecraftLinks

				return metadata.Encode(&state)
			}
			return nil
		},
	}
}
