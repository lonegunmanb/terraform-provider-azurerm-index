package github.com/hashicorp/terraform-provider-azurerm/internal/services/orbital
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/orbital/2022-11-01/contactprofile"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r ContactProfileResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Orbital.ContactProfileClient
			id, err := contactprofile.ParseContactProfileID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			if model := resp.Model; model != nil {
				props := model.Properties
				state := ContactProfileResourceModel{
					Name:                           id.ContactProfileName,
					ResourceGroup:                  id.ResourceGroupName,
					Location:                       model.Location,
					MinimumVariableContactDuration: pointer.From(props.MinimumViableContactDuration),
					MinimumElevationDegrees:        pointer.From(props.MinimumElevationDegrees),
					AutoTrackingConfiguration:      string(pointer.From(props.AutoTrackingConfiguration)),
					EventHubUri:                    pointer.From(props.EventHubUri),
					NetworkConfigurationSubnetId:   props.NetworkConfiguration.SubnetId,
				}
				if model.Tags != nil {
					state.Tags = pointer.From(model.Tags)
				}
				links, err := flattenContactProfileLinks(props.Links)
				if err != nil {
					return err
				}
				state.Links = links

				return metadata.Encode(&state)
			}
			return nil
		},
	}
}
