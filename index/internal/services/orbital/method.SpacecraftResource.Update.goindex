package github.com/hashicorp/terraform-provider-azurerm/internal/services/orbital
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/orbital/2022-11-01/spacecraft"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r SpacecraftResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Orbital.SpacecraftClient
			id, err := spacecraft.ParseSpacecraftID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var state SpacecraftResourceModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding %+v", err)
			}

			spacecraftLinks, err := expandSpacecraftLinks(state.Links)
			if err != nil {
				return err
			}

			if metadata.ResourceData.HasChangesExcept("name", "resource_group_name") {
				spacecraft := spacecraft.Spacecraft{
					Location: state.Location,
					Properties: spacecraft.SpacecraftsProperties{
						Links:     spacecraftLinks,
						NoradId:   utils.String(state.NoradId),
						TitleLine: state.TitleLine,
						TleLine1:  state.TwoLineElements[0],
						TleLine2:  state.TwoLineElements[1],
					},
					Tags: &state.Tags,
				}

				if err := client.CreateOrUpdateThenPoll(ctx, *id, spacecraft); err != nil {
					return fmt.Errorf("updating %s: %+v", *id, err)
				}
			}
			return nil
		},
	}
}
