package github.com/hashicorp/terraform-provider-azurerm/internal/services/orbital
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/orbital/2022-11-01/contactprofile"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r ContactProfileResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Orbital.ContactProfileClient
			id, err := contactprofile.ParseContactProfileID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var state ContactProfileResourceModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding %+v", err)
			}

			contactProfileLinks, err := expandContactProfileLinks(state.Links)
			if err != nil {
				return err
			}

			autoTrackingConfiguration := contactprofile.AutoTrackingConfiguration(state.AutoTrackingConfiguration)

			networkConfiguration := contactprofile.ContactProfilesPropertiesNetworkConfiguration{
				SubnetId: state.NetworkConfigurationSubnetId,
			}

			// The service only accept `null` or non-empty value, empty string will cause a 400 response
			var eventHubUri *string
			if state.EventHubUri != "" {
				eventHubUri = pointer.To(state.EventHubUri)
			}

			if metadata.ResourceData.HasChangesExcept("name", "resource_group_name") {
				contactProfile := contactprofile.ContactProfile{
					Location: state.Location,
					Properties: contactprofile.ContactProfilesProperties{
						AutoTrackingConfiguration:    pointer.To(autoTrackingConfiguration),
						EventHubUri:                  eventHubUri,
						Links:                        contactProfileLinks,
						MinimumElevationDegrees:      pointer.To(state.MinimumElevationDegrees),
						MinimumViableContactDuration: pointer.To(state.MinimumVariableContactDuration),
						NetworkConfiguration:         networkConfiguration,
					},
					Tags: pointer.To(state.Tags),
				}

				if err := client.CreateOrUpdateThenPoll(ctx, *id, contactProfile); err != nil {
					return fmt.Errorf("updating %s: %+v", *id, err)
				}
			}
			return nil
		},
	}
}
