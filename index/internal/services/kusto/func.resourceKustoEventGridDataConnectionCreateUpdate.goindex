package github.com/hashicorp/terraform-provider-azurerm/internal/services/kusto
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventgrid/2025-02-15/eventsubscriptions"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/eventhubs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/kusto/2024-04-13/dataconnections"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	eventhubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/eventhub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/kusto/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/kusto/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceKustoEventGridDataConnectionCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Kusto.DataConnectionsClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	log.Printf("[INFO] preparing arguments for Azure Kusto Event Grid Data Connection creation.")

	id := dataconnections.NewDataConnectionID(subscriptionId, d.Get("resource_group_name").(string), d.Get("cluster_name").(string), d.Get("database_name").(string), d.Get("name").(string))
	if d.IsNewResource() {
		resp, err := client.Get(ctx, id)
		if err != nil {
			if !response.WasNotFound(resp.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %s", id, err)
			}
		}

		if !response.WasNotFound(resp.HttpResponse) {
			return tf.ImportAsExistsError("azurerm_kusto_eventgrid_data_connection", id.ID())
		}
	}

	dataConnection := dataconnections.EventGridDataConnection{
		Location: utils.String(azure.NormalizeLocation(d.Get("location").(string))),
		Properties: &dataconnections.EventGridConnectionProperties{
			StorageAccountResourceId: d.Get("storage_account_id").(string),
			EventHubResourceId:       d.Get("eventhub_id").(string),
			ConsumerGroup:            d.Get("eventhub_consumer_group_name").(string),
			IgnoreFirstRecord:        utils.Bool(d.Get("skip_first_record").(bool)),
		},
	}

	blobStorageEventType := dataconnections.BlobStorageEventType(d.Get("blob_storage_event_type").(string))
	dataConnection.Properties.BlobStorageEventType = &blobStorageEventType

	if tableName, ok := d.GetOk("table_name"); ok {
		dataConnection.Properties.TableName = utils.String(tableName.(string))
	}

	if mappingRuleName, ok := d.GetOk("mapping_rule_name"); ok {
		dataConnection.Properties.MappingRuleName = utils.String(mappingRuleName.(string))
	}

	if df, ok := d.GetOk("data_format"); ok {
		dataFormat := dataconnections.EventGridDataFormat(df.(string))
		dataConnection.Properties.DataFormat = &dataFormat
	}

	if databaseRouting, ok := d.GetOk("database_routing_type"); ok {
		databaseRoutingType := dataconnections.DatabaseRouting(databaseRouting.(string))
		dataConnection.Properties.DatabaseRouting = &databaseRoutingType
	}

	if eventGridRID, ok := d.GetOk("eventgrid_event_subscription_id"); ok {
		dataConnection.Properties.EventGridResourceId = utils.String(eventGridRID.(string))
	}

	if eventGridRID, ok := d.GetOk("eventgrid_resource_id"); !features.FivePointOh() && ok {
		dataConnection.Properties.EventGridResourceId = utils.String(eventGridRID.(string))
	}

	if managedIdentityRID, ok := d.GetOk("managed_identity_id"); ok {
		dataConnection.Properties.ManagedIdentityResourceId = utils.String(managedIdentityRID.(string))
	}

	if managedIdentityRID, ok := d.GetOk("managed_identity_resource_id"); !features.FivePointOh() && ok {
		dataConnection.Properties.ManagedIdentityResourceId = utils.String(managedIdentityRID.(string))
	}

	err := client.CreateOrUpdateThenPoll(ctx, id, dataConnection)
	if err != nil {
		return fmt.Errorf("creating %s: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceKustoEventGridDataConnectionRead(d, meta)
}
