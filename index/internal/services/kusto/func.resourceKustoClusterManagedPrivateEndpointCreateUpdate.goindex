package github.com/hashicorp/terraform-provider-azurerm/internal/services/kusto
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/kusto/2024-04-13/managedprivateendpoints"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/kusto/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/kusto/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceKustoClusterManagedPrivateEndpointCreateUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Kusto.ClusterManagedPrivateEndpointClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := managedprivateendpoints.NewManagedPrivateEndpointID(subscriptionId, d.Get("resource_group_name").(string), d.Get("cluster_name").(string), d.Get("name").(string))
	if d.IsNewResource() {
		managedPrivateEndpoint, err := client.Get(ctx, id)
		if err != nil {
			if !response.WasNotFound(managedPrivateEndpoint.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}
		}

		if !response.WasNotFound(managedPrivateEndpoint.HttpResponse) {
			return tf.ImportAsExistsError("azurerm_kusto_cluster_managed_private_endpoint", id.ID())
		}
	}

	managedPrivateEndpoint := managedprivateendpoints.ManagedPrivateEndpoint{
		Properties: &managedprivateendpoints.ManagedPrivateEndpointProperties{
			PrivateLinkResourceId: d.Get("private_link_resource_id").(string),
			GroupId:               d.Get("group_id").(string),
		},
	}

	if v, ok := d.GetOk("private_link_resource_region"); ok {
		managedPrivateEndpoint.Properties.PrivateLinkResourceRegion = utils.String(v.(string))
	}

	if v, ok := d.GetOk("request_message"); ok {
		managedPrivateEndpoint.Properties.RequestMessage = utils.String(v.(string))
	}

	err := client.CreateOrUpdateThenPoll(ctx, id, managedPrivateEndpoint)
	if err != nil {
		return fmt.Errorf("creating/updating %s: %+v", id, err)
	}

	d.SetId(id.ID())
	return resourceKustoClusterManagedPrivateEndpointRead(d, meta)
}
