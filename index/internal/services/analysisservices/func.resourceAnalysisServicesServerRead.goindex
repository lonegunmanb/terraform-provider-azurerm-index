package github.com/hashicorp/terraform-provider-azurerm/internal/services/analysisservices
import (
	"bytes"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/analysisservices/2017-08-01/servers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/analysisservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceAnalysisServicesServerRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).AnalysisServices.Servers
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := servers.ParseServerID(d.Id())
	if err != nil {
		return err
	}

	server, err := client.GetDetails(ctx, *id)
	if err != nil {
		if response.WasNotFound(server.HttpResponse) {
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.ServerName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := server.Model; model != nil {
		d.Set("location", location.Normalize(model.Location))
		d.Set("sku", model.Sku.Name)

		if props := model.Properties; props != nil {
			adminUsers := make([]string, 0)
			if props.AsAdministrators != nil && props.AsAdministrators.Members != nil {
				adminUsers = *props.AsAdministrators.Members
			}
			d.Set("admin_users", adminUsers)

			enablePowerBi, fwRules := flattenAnalysisServicesServerFirewallSettings(props)
			d.Set("power_bi_service_enabled", enablePowerBi)
			if err := d.Set("ipv4_firewall_rule", fwRules); err != nil {
				return fmt.Errorf("setting `ipv4_firewall_rule`: %s", err)
			}

			connectionMode := ""
			if props.QuerypoolConnectionMode != nil {
				connectionMode = string(*props.QuerypoolConnectionMode)
			}
			d.Set("querypool_connection_mode", connectionMode)
			d.Set("server_full_name", props.ServerFullName)

			if containerUri, ok := d.GetOk("backup_blob_container_uri"); ok {
				d.Set("backup_blob_container_uri", containerUri)
			}
		}

		if err := tags.FlattenAndSet(d, model.Tags); err != nil {
			return err
		}
	}

	return nil
}
