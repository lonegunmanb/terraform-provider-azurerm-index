package github.com/hashicorp/terraform-provider-azurerm/internal/services/analysisservices
import (
	"bytes"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/analysisservices/2017-08-01/servers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/analysisservices/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceAnalysisServicesServerCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).AnalysisServices.Servers
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	log.Printf("[INFO] preparing arguments for Azure ARM Analysis Services Server creation.")

	id := servers.NewServerID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))

	server, err := client.GetDetails(ctx, id)
	if err != nil {
		if !response.WasNotFound(server.HttpResponse) {
			return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
		}
	}

	if !response.WasNotFound(server.HttpResponse) {
		return tf.ImportAsExistsError("azurerm_analysis_services_server", id.ID())
	}

	analysisServicesServer := servers.AnalysisServicesServer{
		Location: location.Normalize(d.Get("location").(string)),
		Sku: servers.ResourceSku{
			Name: d.Get("sku").(string),
		},
		Properties: &servers.AnalysisServicesServerProperties{
			AsAdministrators:     expandAnalysisServicesServerAdminUsers(d),
			IPV4FirewallSettings: expandAnalysisServicesServerFirewallSettings(d),
		},
		Tags: tags.Expand(d.Get("tags").(map[string]interface{})),
	}

	if v, ok := d.GetOk("power_bi_service_enabled"); ok {
		if analysisServicesServer.Properties.IPV4FirewallSettings == nil {
			analysisServicesServer.Properties.IPV4FirewallSettings = &servers.IPv4FirewallSettings{
				FirewallRules: pointer.To(make([]servers.IPv4FirewallRule, 0)),
			}
		}
		analysisServicesServer.Properties.IPV4FirewallSettings.EnablePowerBIService = pointer.To(v.(bool))
	}

	if querypoolConnectionMode, ok := d.GetOk("querypool_connection_mode"); ok {
		analysisServicesServer.Properties.QuerypoolConnectionMode = pointer.To(servers.ConnectionMode(querypoolConnectionMode.(string)))
	}

	if containerUri, ok := d.GetOk("backup_blob_container_uri"); ok {
		analysisServicesServer.Properties.BackupBlobContainerUri = pointer.To(containerUri.(string))
	}

	if err := client.CreateThenPoll(ctx, id, analysisServicesServer); err != nil {
		return fmt.Errorf("creating %s: %+v", id, err)
	}

	d.SetId(id.ID())
	return resourceAnalysisServicesServerRead(d, meta)
}
