package github.com/hashicorp/terraform-provider-azurerm/internal/services/dynatrace
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dynatrace/2023-04-27/monitors"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r MonitorsResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Dynatrace.MonitorsClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var model MonitorsResourceModel
			if err := metadata.Decode(&model); err != nil {
				return err
			}

			id := monitors.NewMonitorID(subscriptionId, model.ResourceGroup, model.Name)

			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}
			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			monitoringStatus := monitors.MonitoringStatusEnabled
			if !model.MonitoringStatus {
				monitoringStatus = monitors.MonitoringStatusDisabled
			}
			monitorsProps := monitors.MonitorProperties{
				MarketplaceSubscriptionStatus:  pointer.To(monitors.MarketplaceSubscriptionStatus(model.MarketplaceSubscriptionStatus)),
				MonitoringStatus:               pointer.To(monitoringStatus),
				PlanData:                       ExpandDynatracePlanData(model.PlanData),
				UserInfo:                       ExpandDynatraceUserInfo(model.UserInfo),
				DynatraceEnvironmentProperties: ExpandDynatraceEnvironmentProperties(model.EnvironmentProperties),
			}

			dynatraceIdentity, err := expandDynatraceIdentity(model.Identity)
			if err != nil {
				return fmt.Errorf("expanding identity: %+v", err)
			}

			monitor := monitors.MonitorResource{
				Identity:   dynatraceIdentity,
				Location:   model.Location,
				Name:       pointer.To(model.Name),
				Properties: monitorsProps,
				Tags:       pointer.To(model.Tags),
			}

			if err := client.CreateOrUpdateThenPoll(ctx, id, monitor); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)

			return nil
		},
	}
}
