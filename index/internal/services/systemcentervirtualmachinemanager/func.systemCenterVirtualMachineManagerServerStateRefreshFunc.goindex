package github.com/hashicorp/terraform-provider-azurerm/internal/services/systemcentervirtualmachinemanager
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/extendedlocation/2021-08-15/customlocations"
	"github.com/hashicorp/go-azure-sdk/resource-manager/systemcentervirtualmachinemanager/2023-10-07/inventoryitems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/systemcentervirtualmachinemanager/2023-10-07/vmmservers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/systemcentervirtualmachinemanager/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func systemCenterVirtualMachineManagerServerStateRefreshFunc(ctx context.Context, metadata sdk.ResourceMetaData, id vmmservers.VMmServerId) pluginsdk.StateRefreshFunc {
	return func() (interface{}, string, error) {
		client := metadata.Client.SystemCenterVirtualMachineManager.InventoryItems
		scvmmServerId := inventoryitems.NewVMmServerID(id.SubscriptionId, id.ResourceGroupName, id.VmmServerName)
		checkTimes := 10
		lastInventoryItemCount := 0

		for i := 0; i < checkTimes; i++ {
			resp, err := client.ListByVMmServer(ctx, scvmmServerId)
			if err != nil {
				return nil, "", fmt.Errorf("polling for %s: %+v", id, err)
			}

			if model := resp.Model; model != nil {
				currentInventoryItemCount := len(pointer.From(model))

				if i == 0 {
					lastInventoryItemCount = currentInventoryItemCount
					continue
				}

				if currentInventoryItemCount != lastInventoryItemCount {
					return "SyncNotCompleted", "SyncNotCompleted", nil
				}

				time.Sleep(1 * time.Second) // avoid checking too quickly
			}
		}

		return "SyncCompleted", "SyncCompleted", nil
	}
}
