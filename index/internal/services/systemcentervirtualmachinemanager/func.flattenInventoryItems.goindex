package github.com/hashicorp/terraform-provider-azurerm/internal/services/systemcentervirtualmachinemanager
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/systemcentervirtualmachinemanager/2023-10-07/inventoryitems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/systemcentervirtualmachinemanager/2023-10-07/vmmservers"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenInventoryItems(input []inventoryitems.InventoryItem, inventoryType string) (*[]InventoryItem, error) {
	results := make([]InventoryItem, 0)

	for _, item := range input {
		if props := item.Properties; props != nil {
			inventoryItem := InventoryItem{}

			if v, ok := props.(inventoryitems.CloudInventoryItem); ok && inventoryType == string(inventoryitems.InventoryTypeCloud) {
				// Service API indicates that the static segment `inventoryItems` in the resource ID of the Inventory Item should start with lowercase. See more details from https://github.com/Azure/azure-rest-api-specs/blob/92c409d93f895a30d51603b2fda78a49b3a2cd60/specification/scvmm/resource-manager/Microsoft.ScVmm/stable/2023-10-07/scvmm.json#L1785
				// But the static segment `InventoryItems` in the resource ID of the Inventory Item returned by the API starts with uppercase. So all instances of setting the inventory item ID must use ParseInventoryItemIDInsensitively() in Read() to normalize the resource ID
				scvmmServerInventoryItemId, err := inventoryitems.ParseInventoryItemIDInsensitively(pointer.From(item.Id))
				if err != nil {
					return nil, err
				}
				inventoryItem.id = scvmmServerInventoryItemId.ID()

				inventoryItem.name = pointer.From(v.InventoryItemName)
				inventoryItem.Uuid = pointer.From(v.Uuid)
				results = append(results, inventoryItem)
			} else if v, ok := props.(inventoryitems.VirtualMachineInventoryItem); ok && inventoryType == string(inventoryitems.InventoryTypeVirtualMachine) {
				scvmmServerInventoryItemId, err := inventoryitems.ParseInventoryItemIDInsensitively(pointer.From(item.Id))
				if err != nil {
					return nil, err
				}
				inventoryItem.id = scvmmServerInventoryItemId.ID()

				inventoryItem.name = pointer.From(v.InventoryItemName)
				inventoryItem.Uuid = pointer.From(v.Uuid)
				results = append(results, inventoryItem)
			} else if v, ok := props.(inventoryitems.VirtualMachineTemplateInventoryItem); ok && inventoryType == string(inventoryitems.InventoryTypeVirtualMachineTemplate) {
				scvmmServerInventoryItemId, err := inventoryitems.ParseInventoryItemIDInsensitively(pointer.From(item.Id))
				if err != nil {
					return nil, err
				}
				inventoryItem.id = scvmmServerInventoryItemId.ID()

				inventoryItem.name = pointer.From(v.InventoryItemName)
				inventoryItem.Uuid = pointer.From(v.Uuid)
				results = append(results, inventoryItem)
			} else if v, ok := props.(inventoryitems.VirtualNetworkInventoryItem); ok && inventoryType == string(inventoryitems.InventoryTypeVirtualNetwork) {
				scvmmServerInventoryItemId, err := inventoryitems.ParseInventoryItemIDInsensitively(pointer.From(item.Id))
				if err != nil {
					return nil, err
				}
				inventoryItem.id = scvmmServerInventoryItemId.ID()

				inventoryItem.name = pointer.From(v.InventoryItemName)
				inventoryItem.Uuid = pointer.From(v.Uuid)
				results = append(results, inventoryItem)
			}
		}
	}

	return &results, nil
}
