package github.com/hashicorp/terraform-provider-azurerm/internal/services/systemcentervirtualmachinemanager
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/systemcentervirtualmachinemanager/2023-10-07/inventoryitems"
	"github.com/hashicorp/go-azure-sdk/resource-manager/systemcentervirtualmachinemanager/2023-10-07/vmmservers"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (l SystemCenterVirtualMachineManagerInventoryItemsDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.SystemCenterVirtualMachineManager.InventoryItems

			var state SystemCenterVirtualMachineManagerInventoryItemsDataSourceModel
			if err := metadata.Decode(&state); err != nil {
				return err
			}

			scvmmServerId, err := inventoryitems.ParseVMmServerID(state.SystemCenterVirtualMachineManagerServerId)
			if err != nil {
				return err
			}

			resp, err := client.ListByVMmServerComplete(ctx, *scvmmServerId)
			if err != nil {
				if response.WasNotFound(resp.LatestHttpResponse) {
					return fmt.Errorf("%s was not found", scvmmServerId)
				}
				return fmt.Errorf("reading %s: %+v", scvmmServerId, err)
			}

			if model := resp.Items; model != nil {
				inventoryItems, err := flattenInventoryItems(model, state.InventoryType)
				if err != nil {
					return err
				}
				if len(pointer.From(inventoryItems)) == 0 {
					return fmt.Errorf("no inventory items were found for %s", scvmmServerId)
				}
				state.InventoryItems = pointer.From(inventoryItems)
			}

			metadata.ResourceData.SetId(scvmmServerId.ID())

			return metadata.Encode(&state)
		},
	}
}
