package github.com/hashicorp/terraform-provider-azurerm/internal/services/attestation
import (
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/pem"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/attestation/2020-10-01/attestationproviders"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/attestation/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/attestation/2022-08-01/attestation"
)
func resourceAttestationProviderRead(d *pluginsdk.ResourceData, meta interface{}) error {
	attestationClients := meta.(*clients.Client).Attestation
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := attestationproviders.ParseAttestationProvidersID(d.Id())
	if err != nil {
		return err
	}

	resp, err := attestationClients.ProviderClient.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[INFO] %s does not exist - removing from state", *id)
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	dataPlaneUri, err := attestationClients.DataPlaneEndpointForProvider(ctx, *id)
	if err != nil {
		return fmt.Errorf("determining Data Plane URI for %s: %+v", *id, err)
	}
	dataPlaneClient, err := attestationClients.DataPlaneClientWithEndpoint(*dataPlaneUri)
	if err != nil {
		return fmt.Errorf("building Data Plane Client for %s: %+v", *id, err)
	}

	// Status=400 Code="Bad request" Message="Tpm attestation is not supported in the 'UKSouth' region"
	openEnclavePolicy, err := dataPlaneClient.Get(ctx, *dataPlaneUri, attestation.TypeOpenEnclave)
	if err != nil && !utils.ResponseWasBadRequest(openEnclavePolicy.Response) {
		return fmt.Errorf("retrieving OpenEnclave Policy for %s: %+v", *id, err)
	}
	sgxEnclavePolicy, err := dataPlaneClient.Get(ctx, *dataPlaneUri, attestation.TypeSgxEnclave)
	if err != nil && !utils.ResponseWasBadRequest(sgxEnclavePolicy.Response) {
		return fmt.Errorf("retrieving SgxEnclave Policy for %s: %+v", *id, err)
	}
	tpmPolicy, err := dataPlaneClient.Get(ctx, *dataPlaneUri, attestation.TypeTpm)
	if err != nil && !utils.ResponseWasBadRequest(tpmPolicy.Response) {
		return fmt.Errorf("retrieving Tpm Policy for %s: %+v", *id, err)
	}
	sevSnpPolicy, err := dataPlaneClient.Get(ctx, *dataPlaneUri, attestation.TypeSevSnpVM)
	if err != nil && !utils.ResponseWasBadRequest(sevSnpPolicy.Response) {
		return fmt.Errorf("retrieving SEV-SNP Policy for %s: %+v", *id, err)
	}

	d.Set("name", id.AttestationProviderName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.Normalize(model.Location))

		if props := model.Properties; props != nil {
			d.Set("attestation_uri", props.AttestUri)
			d.Set("trust_model", props.TrustModel)
		}

		if err := tags.FlattenAndSet(d, model.Tags); err != nil {
			return fmt.Errorf("setting `tags`: %+v", err)
		}
	}

	openEnclavePolicyData, err := base64DataFromAttestationJWT(openEnclavePolicy.Token)
	if err != nil {
		return fmt.Errorf("parsing OpenEnclave Policy for %s: %+v", *id, err)
	}
	d.Set("open_enclave_policy_base64", pointer.From(openEnclavePolicyData))

	sgxEnclavePolicyData, err := base64DataFromAttestationJWT(sgxEnclavePolicy.Token)
	if err != nil {
		return fmt.Errorf("parsing SgxEnclave Policy for %s: %+v", *id, err)
	}
	d.Set("sgx_enclave_policy_base64", pointer.From(sgxEnclavePolicyData))

	tpmPolicyData, err := base64DataFromAttestationJWT(tpmPolicy.Token)
	if err != nil {
		return fmt.Errorf("parsing Tpm Policy for %s: %+v", *id, err)
	}
	d.Set("tpm_policy_base64", pointer.From(tpmPolicyData))

	sevSnpPolicyData, err := base64DataFromAttestationJWT(sevSnpPolicy.Token)
	if err != nil {
		return fmt.Errorf("parsing SEV-SNP policy for %s: %+v", *id, err)
	}
	d.Set("sev_snp_policy_base64", pointer.From(sevSnpPolicyData))

	return nil
}
