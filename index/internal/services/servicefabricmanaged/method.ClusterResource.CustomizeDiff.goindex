package github.com/hashicorp/terraform-provider-azurerm/internal/services/servicefabricmanaged
import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicefabricmanagedcluster/2024-04-01/managedcluster"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicefabricmanagedcluster/2024-04-01/nodetype"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (k ClusterResource) CustomizeDiff() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			rd := metadata.ResourceDiff
			sku := rd.Get("sku").(string)
			var primary bool
			for _, nti := range rd.Get("node_type").([]interface{}) {
				nt := nti.(map[string]interface{})
				vmCount := nt["vm_instance_count"].(int)
				if sku == string(managedcluster.SkuNameBasic) && vmCount < 3 {
					return fmt.Errorf("basic SKU requires at least 3 instances in a node type")
				} else if sku == string(managedcluster.SkuNameStandard) && vmCount < 5 {
					return fmt.Errorf("standard SKU requires at least 5 instances in a node type")
				}
				isPrimary := nt["primary"].(bool)
				if isPrimary && !primary {
					primary = true
				} else if isPrimary {
					return fmt.Errorf("only one node type can be primary at any given time. ")
				}
			}

			for _, lbi := range rd.Get("lb_rule").([]interface{}) {
				lb := lbi.(map[string]interface{})
				probeProto := lb["probe_protocol"].(string)
				if probeProto == string(managedcluster.ProbeProtocolHTTP) || probeProto == string(managedcluster.ProbeProtocolHTTPS) {
					probePath := lb["probe_request_path"]
					if probePath == nil || probePath.(string) == "" {
						return fmt.Errorf("probe_request_path needs to be set if probe protocol is %q", probeProto)
					}
				}
			}

			o, n := rd.GetChange("node_type")
			oi := o.([]interface{})
			ni := n.([]interface{})
			if len(oi) > 0 && !reflect.DeepEqual(oi, ni) {
				for idx := range oi {
					oNodeType := oi[idx].(map[string]interface{})
					for nIdx := range ni {
						newNodeType := ni[nIdx].(map[string]interface{})
						if oNodeType["name"].(string) != newNodeType["name"].(string) {
							continue
						}
						for _, k := range []string{"name", "vm_size", "primary", "stateless"} {
							attr := fmt.Sprintf("node_type.%d.%s", idx, k)
							if rd.HasChange(attr) {
								return fmt.Errorf("node type attribute %q cannot be changed once node type is created", k)
							}
						}
					}
				}
			}

			return nil
		},
		Timeout: 30 * time.Minute,
	}
}
