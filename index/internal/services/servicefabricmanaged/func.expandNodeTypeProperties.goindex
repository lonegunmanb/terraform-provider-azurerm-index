package github.com/hashicorp/terraform-provider-azurerm/internal/services/servicefabricmanaged
import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicefabricmanagedcluster/2021-05-01/managedcluster"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicefabricmanagedcluster/2021-05-01/nodetype"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandNodeTypeProperties(nt *NodeType) (*nodetype.NodeTypeProperties, error) {
	vmSecrets := make([]nodetype.VaultSecretGroup, len(nt.VmSecrets))
	for idx, secret := range nt.VmSecrets {
		vcs := make([]nodetype.VaultCertificate, len(secret.Certificates))
		for cidx, cert := range secret.Certificates {
			vcs[cidx] = nodetype.VaultCertificate{
				CertificateStore: cert.Store,
				CertificateURL:   cert.Url,
			}
		}
		vmSecrets[idx] = nodetype.VaultSecretGroup{
			SourceVault:       nodetype.SubResource{Id: &secret.SourceVault},
			VaultCertificates: vcs,
		}
	}

	appFrom, appTo, err := parsePortRange(nt.ApplicationPorts)
	if err != nil {
		return nil, fmt.Errorf("while parsing application port range (%q): %+v", nt.ApplicationPorts, err)
	}

	ephemeralFrom, ephemeralTo, err := parsePortRange(nt.EphemeralPorts)
	if err != nil {
		return nil, fmt.Errorf("while parsing ephemeral port range (%q): %+v", nt.EphemeralPorts, err)
	}
	nodeTypeProperties := &nodetype.NodeTypeProperties{
		ApplicationPorts: &nodetype.EndpointRangeDescription{
			EndPort:   appTo,
			StartPort: appFrom,
		},
		Capacities:     &nt.Capacities,
		DataDiskSizeGB: nt.DataDiskSize,
		DataDiskType:   &nt.DataDiskType,
		EphemeralPorts: &nodetype.EndpointRangeDescription{
			EndPort:   ephemeralTo,
			StartPort: ephemeralFrom,
		},
		IsPrimary:               nt.Primary,
		IsStateless:             &nt.Stateless,
		MultiplePlacementGroups: &nt.MultiplePlacementGroupsEnabled,
		PlacementProperties:     &nt.PlacementProperties,
		VMImageOffer:            &nt.VmImageOffer,
		VMImagePublisher:        &nt.VmImagePublisher,
		VMImageSku:              &nt.VmImageSku,
		VMImageVersion:          &nt.VmImageVersion,
		VMInstanceCount:         nt.VmInstanceCount,
		VMSecrets:               &vmSecrets,
		VMSize:                  &nt.VmSize,
	}

	return nodeTypeProperties, nil
}
