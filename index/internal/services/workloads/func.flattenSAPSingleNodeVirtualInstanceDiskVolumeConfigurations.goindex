package github.com/hashicorp/terraform-provider-azurerm/internal/services/workloads
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourcegroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/workloads/2024-09-01/sapvirtualinstances"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	computeValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	networkValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/workloads/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenSAPSingleNodeVirtualInstanceDiskVolumeConfigurations(input *sapvirtualinstances.DiskConfiguration) []SingleServerDiskVolumeConfiguration {
	result := make([]SingleServerDiskVolumeConfiguration, 0)
	if input == nil || input.DiskVolumeConfigurations == nil {
		return result
	}

	for k, v := range *input.DiskVolumeConfigurations {
		diskVolumeConfiguration := SingleServerDiskVolumeConfiguration{
			NumberOfDisks: pointer.From(v.Count),
			SizeGb:        pointer.From(v.SizeGB),
			VolumeName:    k,
		}

		if sku := v.Sku; sku != nil {
			diskVolumeConfiguration.SkuName = string(pointer.From(sku.Name))
		}

		result = append(result, diskVolumeConfiguration)
	}

	return result
}
