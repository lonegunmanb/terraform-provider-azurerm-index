package github.com/hashicorp/terraform-provider-azurerm/internal/services/workloads
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourcegroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/workloads/2024-09-01/sapvirtualinstances"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	computeValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	networkValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/workloads/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenSAPSingleNodeVirtualInstanceVirtualMachineFullResourceNames(input sapvirtualinstances.SingleServerFullResourceNames) []SingleServerVirtualMachineResourceNames {
	result := make([]SingleServerVirtualMachineResourceNames, 0)

	if vm := input.VirtualMachine; vm != nil {
		vmFullResourceNames := SingleServerVirtualMachineResourceNames{
			HostName:              pointer.From(vm.HostName),
			OSDiskName:            pointer.From(vm.OsDiskName),
			VMName:                pointer.From(vm.VirtualMachineName),
			NetworkInterfaceNames: flattenSAPSingleNodeVirtualInstanceNetworkInterfaceResourceNames(vm.NetworkInterfaces),
			DataDisks:             flattenSAPSingleNodeVirtualInstanceDataDisks(vm.DataDiskNames),
		}

		result = append(result, vmFullResourceNames)
	}

	return result
}
