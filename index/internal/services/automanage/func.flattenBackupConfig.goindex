package github.com/hashicorp/terraform-provider-azurerm/internal/services/automanage
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automanage/2022-05-04/configurationprofiles"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automanage/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenBackupConfig(configMap map[string]interface{}) []BackupConfiguration {
	if val, ok := configMap["Backup/Enable"]; !ok || (val == nil) {
		return nil
	}

	backup := make([]BackupConfiguration, 1)
	backup[0] = BackupConfiguration{}

	if val, ok := configMap["Backup/PolicyName"]; ok {
		backup[0].PolicyName = val.(string)
	}

	if val, ok := configMap["Backup/TimeZone"]; ok {
		backup[0].TimeZone = val.(string)
	}

	if val, ok := configMap["Backup/InstantRpRetentionRangeInDays"]; ok {
		backup[0].InstantRpRetentionRangeInDays = int64(val.(float64))
	}

	schedulePolicy := SchedulePolicyConfiguration{}
	schedulePolicyChanged := false
	if val, ok := configMap["Backup/SchedulePolicy/ScheduleRunFrequency"]; ok {
		schedulePolicy.ScheduleRunFrequency = val.(string)
		schedulePolicyChanged = true
	}

	if val, ok := configMap["Backup/SchedulePolicy/ScheduleRunTimes"]; ok {
		schedulePolicy.ScheduleRunTimes = flattenToListOfString(val)
		schedulePolicyChanged = true
	}

	if val, ok := configMap["Backup/SchedulePolicy/ScheduleRunDays"]; ok {
		schedulePolicy.ScheduleRunDays = flattenToListOfString(val)
		schedulePolicyChanged = true
	}

	if val, ok := configMap["Backup/SchedulePolicy/SchedulePolicyType"]; ok {
		schedulePolicy.SchedulePolicyType = val.(string)
		schedulePolicyChanged = true
	}

	if schedulePolicyChanged {
		backup[0].SchedulePolicy = make([]SchedulePolicyConfiguration, 1)
		backup[0].SchedulePolicy[0] = schedulePolicy
	}

	retentionPolicy := RetentionPolicyConfiguration{}
	retentionPolicyChanged := false
	if val, ok := configMap["Backup/RetentionPolicy/RetentionPolicyType"]; ok {
		retentionPolicy.RetentionPolicyType = val.(string)
		retentionPolicyChanged = true
	}

	dailySchedule := ScheduleConfiguration{}
	dailyScheduleChanged := false
	if val, ok := configMap["Backup/RetentionPolicy/DailySchedule/RetentionTimes"]; ok {
		dailySchedule.RetentionTimes = flattenToListOfString(val)
		dailyScheduleChanged = true
	}

	retentionDuration := RetentionDurationConfiguration{}
	retentionDurationChanged := false
	if val, ok := configMap["Backup/RetentionPolicy/DailySchedule/RetentionDuration/Count"]; ok {
		retentionDuration.Count = int64(val.(float64))
		retentionDurationChanged = true
	}

	if val, ok := configMap["Backup/RetentionPolicy/DailySchedule/RetentionDuration/DurationType"]; ok {
		retentionDuration.DurationType = val.(string)
		retentionDurationChanged = true
	}

	if retentionDurationChanged {
		dailySchedule.RetentionDuration = make([]RetentionDurationConfiguration, 1)
		dailySchedule.RetentionDuration[0] = retentionDuration
	}

	if dailyScheduleChanged || retentionDurationChanged {
		retentionPolicy.DailySchedule = make([]ScheduleConfiguration, 1)
		retentionPolicy.DailySchedule[0] = dailySchedule
	}

	weeklySchedule := ScheduleConfiguration{}
	weeklyScheduleChanged := false
	if val, ok := configMap["Backup/RetentionPolicy/WeeklySchedule/RetentionTimes"]; ok {
		weeklySchedule.RetentionTimes = flattenToListOfString(val)
		weeklyScheduleChanged = true
	}

	weeklyRetentionDuration := RetentionDurationConfiguration{}
	weeklyRetentionDurationChanged := false
	if val, ok := configMap["Backup/RetentionPolicy/WeeklySchedule/RetentionDuration/Count"]; ok {
		weeklyRetentionDuration.Count = int64(val.(float64))
		weeklyRetentionDurationChanged = true
	}

	if val, ok := configMap["Backup/RetentionPolicy/WeeklySchedule/RetentionDuration/DurationType"]; ok {
		weeklyRetentionDuration.DurationType = val.(string)
		weeklyRetentionDurationChanged = true
	}

	if weeklyRetentionDurationChanged {
		weeklySchedule.RetentionDuration = make([]RetentionDurationConfiguration, 1)
		weeklySchedule.RetentionDuration[0] = weeklyRetentionDuration
	}

	if weeklyScheduleChanged || weeklyRetentionDurationChanged {
		retentionPolicy.WeeklySchedule = make([]ScheduleConfiguration, 1)
		retentionPolicy.WeeklySchedule[0] = weeklySchedule
	}

	if retentionPolicyChanged || dailyScheduleChanged || retentionDurationChanged || weeklyScheduleChanged || weeklyRetentionDurationChanged {
		backup[0].RetentionPolicy = make([]RetentionPolicyConfiguration, 1)
		backup[0].RetentionPolicy[0] = retentionPolicy
	}

	return backup
}
