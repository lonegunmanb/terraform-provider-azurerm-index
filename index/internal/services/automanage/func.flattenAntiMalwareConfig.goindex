package github.com/hashicorp/terraform-provider-azurerm/internal/services/automanage
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automanage/2022-05-04/configurationprofiles"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automanage/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenAntiMalwareConfig(configMap map[string]interface{}) []AntimalwareConfiguration {
	if val, ok := configMap["Antimalware/Enable"]; !ok || (val == nil) {
		return nil
	}

	antimalware := make([]AntimalwareConfiguration, 1)
	antimalware[0] = AntimalwareConfiguration{}

	if val, ok := configMap["Antimalware/EnableRealTimeProtection"]; ok {
		antimalware[0].RealTimeProtectionEnabled = val.(bool)
	}

	if val, ok := configMap["Antimalware/RunScheduledScan"]; ok {
		antimalware[0].ScheduledScanEnabled = val.(bool)
	}

	if val, ok := configMap["Antimalware/ScanType"]; ok {
		antimalware[0].ScanType = val.(string)
	}

	if val, ok := configMap["Antimalware/ScanDay"]; ok {
		antimalware[0].ScanDay = int64(val.(float64))
	}

	if val, ok := configMap["Antimalware/ScanTimeInMinutes"]; ok {
		antimalware[0].ScanTimeInMinutes = int64(val.(float64))
	}

	exclusions := AntimalwareExclusions{}
	exclusionsChanged := false
	if val, ok := configMap["Antimalware/Exclusions/Extensions"]; ok {
		exclusions.Extensions = val.(string)
		exclusionsChanged = true
	}

	if val, ok := configMap["Antimalware/Exclusions/Paths"]; ok {
		exclusions.Paths = val.(string)
		exclusionsChanged = true
	}

	if val, ok := configMap["Antimalware/Exclusions/Processes"]; ok {
		exclusions.Processes = val.(string)
		exclusionsChanged = true
	}

	if exclusionsChanged {
		antimalware[0].Exclusions = make([]AntimalwareExclusions, 1)
		antimalware[0].Exclusions[0] = exclusions
	}

	return antimalware
}
