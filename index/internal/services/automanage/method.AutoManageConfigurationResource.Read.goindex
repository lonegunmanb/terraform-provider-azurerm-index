package github.com/hashicorp/terraform-provider-azurerm/internal/services/automanage
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automanage/2022-05-04/configurationprofiles"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automanage/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r AutoManageConfigurationResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Automanage.ConfigurationProfilesClient

			id, err := configurationprofiles.ParseConfigurationProfileID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}

				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			state := ConfigurationModel{
				Name:              id.ConfigurationProfileName,
				ResourceGroupName: id.ResourceGroupName,
			}

			if model := resp.Model; model != nil {
				state.Location = location.Normalize(model.Location)
				if props := model.Properties; props != nil && props.Configuration != nil {
					configMap := (*props.Configuration).(map[string]interface{})

					state.Antimalware = flattenAntiMalwareConfig(configMap)

					state.AzureSecurityBaseline = flattenAzureSecurityBaselineConfig(configMap)

					state.Backup = flattenBackupConfig(configMap)

					if val, ok := configMap["AutomationAccount/Enable"]; ok {
						state.AutomationAccountEnabled = val.(bool)
					}

					if val, ok := configMap["BootDiagnostics/Enable"]; ok {
						state.BootDiagnosticsEnabled = val.(bool)
					}

					if val, ok := configMap["DefenderForCloud/Enable"]; ok {
						state.DefenderForCloudEnabled = val.(bool)
					}

					if val, ok := configMap["GuestConfiguration/Enable"]; ok {
						state.GuestConfigurationEnabled = val.(bool)
					}

					if val, ok := configMap["LogAnalytics/Enable"]; ok {
						state.LogAnalyticsEnabled = val.(bool)
					}

					if val, ok := configMap["Alerts/AutomanageStatusChanges/Enable"]; ok {
						state.StatusChangeAlertEnabled = val.(bool)
					}
				}
				state.Tags = pointer.From(model.Tags)
			}

			return metadata.Encode(&state)
		},
	}
}
