package github.com/hashicorp/terraform-provider-azurerm/internal/services/automanage
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automanage/2022-05-04/configurationprofileassignments"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automanage/2022-05-04/configurationprofiles"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (v VirtualMachineConfigurationAssignment) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Automanage.ConfigurationProfileVMAssignmentsClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var model VirtualMachineConfigurationAssignment
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			vmId, err := configurationprofileassignments.ParseVirtualMachineID(model.VirtualMachineId)
			if err != nil {
				return err
			}

			configurationId, err := configurationprofiles.ParseConfigurationProfileID(model.ConfigurationId)
			if err != nil {
				return err
			}

			// Currently, the configuration profile assignment name has to be hardcoded to "default" by API requirement.
			id := configurationprofileassignments.NewVirtualMachineProviders2ConfigurationProfileAssignmentID(subscriptionId, vmId.ResourceGroupName, vmId.VirtualMachineName, "default")
			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(v.ResourceType(), id)
			}

			properties := configurationprofileassignments.ConfigurationProfileAssignment{
				Name: pointer.To(id.ConfigurationProfileAssignmentName),
				Properties: &configurationprofileassignments.ConfigurationProfileAssignmentProperties{
					ConfigurationProfile: pointer.To(configurationId.ID()),
					TargetId:             pointer.To(vmId.ID()),
				},
			}

			if _, respErr := client.CreateOrUpdate(ctx, id, properties); respErr != nil {
				return fmt.Errorf("creating %s: %+v", id.String(), respErr)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
