package github.com/hashicorp/terraform-provider-azurerm/internal/services/elasticsan
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-sdk/resource-manager/elasticsan/2023-01-01/volumegroups"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/elasticsan/validate"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func ExpandVolumeGroupEncryption(input []ElasticSANVolumeGroupResourceEncryptionModel) (*volumegroups.EncryptionProperties, error) {
	if len(input) == 0 {
		return nil, nil
	}

	nestedItemId, err := keyVaultParse.ParseOptionallyVersionedNestedItemID(input[0].KeyVaultKeyId)
	if err != nil {
		return nil, err
	}

	result := volumegroups.EncryptionProperties{
		KeyVaultProperties: &volumegroups.KeyVaultProperties{
			KeyName:     pointer.To(nestedItemId.Name),
			KeyVersion:  pointer.To(nestedItemId.Version),
			KeyVaultUri: pointer.To(nestedItemId.KeyVaultBaseUrl),
		},
	}

	if input[0].UserAssignedIdentityId != "" {
		result.Identity = &volumegroups.EncryptionIdentity{
			UserAssignedIdentity: pointer.To(input[0].UserAssignedIdentityId),
		}
	}

	return &result, nil
}
