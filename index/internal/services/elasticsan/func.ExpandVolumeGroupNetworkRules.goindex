package github.com/hashicorp/terraform-provider-azurerm/internal/services/elasticsan
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-sdk/resource-manager/elasticsan/2023-01-01/volumegroups"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/elasticsan/validate"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func ExpandVolumeGroupNetworkRules(input []ElasticSANVolumeGroupResourceNetworkRuleModel) *volumegroups.NetworkRuleSet {
	// if return nil, the Network Rules will not be removed during update
	if len(input) == 0 {
		return &volumegroups.NetworkRuleSet{
			VirtualNetworkRules: &[]volumegroups.VirtualNetworkRule{},
		}
	}

	networkRules := make([]volumegroups.VirtualNetworkRule, 0, len(input))
	for _, rule := range input {
		networkRules = append(networkRules, volumegroups.VirtualNetworkRule{
			Id:     rule.SubnetId,
			Action: pointer.To(volumegroups.Action(rule.Action)),
		})
	}

	return &volumegroups.NetworkRuleSet{
		VirtualNetworkRules: &networkRules,
	}
}
