package github.com/hashicorp/terraform-provider-azurerm/internal/services/elasticsan
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-sdk/resource-manager/elasticsan/2023-01-01/volumegroups"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/elasticsan/validate"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func FlattenVolumeGroupEncryption(input *volumegroups.EncryptionProperties) ([]ElasticSANVolumeGroupResourceEncryptionModel, error) {
	if input == nil {
		return []ElasticSANVolumeGroupResourceEncryptionModel{}, nil
	}

	var keyVaultKeyId, currentVersionedKeyExpirationTimestamp, currentVersionedKeyId, lastKeyRotationTimestamp string
	if kv := input.KeyVaultProperties; kv != nil {
		id, err := keyVaultParse.NewNestedItemID(pointer.From(kv.KeyVaultUri), keyVaultParse.NestedItemTypeKey, pointer.From(kv.KeyName), pointer.From(kv.KeyVersion))
		if err != nil {
			return nil, fmt.Errorf("parsing Encryption Key Vault Key ID: %+v", err)
		}

		keyVaultKeyId = id.ID()

		currentVersionedKeyExpirationTimestamp = pointer.From(input.KeyVaultProperties.CurrentVersionedKeyExpirationTimestamp)
		currentVersionedKeyId = pointer.From(input.KeyVaultProperties.CurrentVersionedKeyIdentifier)
		lastKeyRotationTimestamp = pointer.From(input.KeyVaultProperties.LastKeyRotationTimestamp)
	}

	var userAssignedIdentityId string
	if input.Identity != nil && input.Identity.UserAssignedIdentity != nil {
		id, err := commonids.ParseUserAssignedIdentityIDInsensitively(*input.Identity.UserAssignedIdentity)
		if err != nil {
			return nil, fmt.Errorf("parsing Encryption User Assigned Identity ID: %+v", err)
		}

		userAssignedIdentityId = id.ID()
	}

	return []ElasticSANVolumeGroupResourceEncryptionModel{
		{
			KeyVaultKeyId:                          keyVaultKeyId,
			UserAssignedIdentityId:                 userAssignedIdentityId,
			CurrentVersionedKeyExpirationTimestamp: currentVersionedKeyExpirationTimestamp,
			CurrentVersionedKeyId:                  currentVersionedKeyId,
			LastKeyRotationTimestamp:               lastKeyRotationTimestamp,
		},
	}, nil
}
