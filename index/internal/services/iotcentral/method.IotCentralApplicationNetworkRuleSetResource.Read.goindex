package github.com/hashicorp/terraform-provider-azurerm/internal/services/iotcentral
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/iotcentral/2021-11-01-preview/apps"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	iothubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r IotCentralApplicationNetworkRuleSetResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.IoTCentral.AppsClient
			id, err := apps.ParseIotAppID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}

				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			if resp.Model == nil || resp.Model.Properties == nil || resp.Model.Properties.NetworkRuleSets == nil {
				return fmt.Errorf("reading Network Rule Set of %q: %+v", id, err)
			}

			networkRuleSet := resp.Model.Properties.NetworkRuleSets
			state := IotCentralApplicationNetworkRuleSetModel{
				IotCentralApplicationId: id.ID(),
				IPRule:                  flattenIotCentralApplicationNetworkRuleSetIPRule(networkRuleSet.IPRules),
			}

			applyToDevice := true
			if networkRuleSet.ApplyToDevices != nil {
				applyToDevice = *networkRuleSet.ApplyToDevices
			}
			state.ApplyToDevice = applyToDevice

			defaultAction := apps.NetworkActionDeny
			if networkRuleSet.DefaultAction != nil {
				defaultAction = *networkRuleSet.DefaultAction
			}
			state.DefaultAction = defaultAction

			return metadata.Encode(&state)
		},
		Timeout: 5 * time.Minute,
	}
}
