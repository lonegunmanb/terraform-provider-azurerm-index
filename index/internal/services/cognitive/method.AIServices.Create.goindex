package github.com/hashicorp/terraform-provider-azurerm/internal/services/cognitive
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cognitive/2024-10-01/cognitiveservicesaccounts"
	"github.com/hashicorp/go-azure-sdk/sdk/environments"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	commonValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	cognitiveValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/cognitive/validate"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	managedHsmHelpers "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/helpers"
	managedHsmParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/parse"
	managedHsmValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (AIServices) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 180 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model AIServicesModel
			if err := metadata.Decode(&model); err != nil {
				return err
			}

			client := metadata.Client.Cognitive.AccountsClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			id := cognitiveservicesaccounts.NewAccountID(subscriptionId, model.ResourceGroupName, model.Name)
			existing, err := client.AccountsGet(ctx, id)
			if err != nil {
				if !response.WasNotFound(existing.HttpResponse) {
					return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
				}
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return tf.ImportAsExistsError("azurerm_ai_services", id.ID())
			}

			networkACLs, subnetIds := expandNetworkACLs(model.NetworkACLs)

			// also lock on the Virtual Network ID's since modifications in the networking stack are exclusive
			virtualNetworkNames := make([]string, 0)
			for _, v := range subnetIds {
				subnetId, err := commonids.ParseSubnetID(v)
				if err != nil {
					return err
				}
				if !utils.SliceContainsValue(virtualNetworkNames, subnetId.VirtualNetworkName) {
					virtualNetworkNames = append(virtualNetworkNames, subnetId.VirtualNetworkName)
				}
			}

			locks.MultipleByName(&virtualNetworkNames, network.VirtualNetworkResourceName)
			defer locks.UnlockMultipleByName(&virtualNetworkNames, network.VirtualNetworkResourceName)

			props := cognitiveservicesaccounts.Account{
				Kind:     pointer.To("AIServices"),
				Location: pointer.To(location.Normalize(model.Location)),
				Sku: &cognitiveservicesaccounts.Sku{
					Name: model.SkuName,
				},
				Properties: &cognitiveservicesaccounts.AccountProperties{
					NetworkAcls:                   networkACLs,
					CustomSubDomainName:           pointer.To(model.CustomSubdomainName),
					AllowedFqdnList:               pointer.To(model.Fqdns),
					PublicNetworkAccess:           pointer.To(cognitiveservicesaccounts.PublicNetworkAccess(model.PublicNetworkAccess)),
					RestrictOutboundNetworkAccess: pointer.To(model.OutboundNetworkAccessRestricted),
					DisableLocalAuth:              pointer.To(!model.LocalAuthorizationEnabled),
				},
				Tags: pointer.To(model.Tags),
			}

			expandIdentity, err := identity.ExpandSystemAndUserAssignedMapFromModel(model.Identity)
			if err != nil {
				return fmt.Errorf("expanding `identity`: %+v", err)
			}
			props.Identity = expandIdentity

			if err := client.AccountsCreateThenPoll(ctx, id, props); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			// creating with KV HSM takes more time than expected, at least hours in most cases and eventually terminated by service
			if len(model.CustomerManagedKey) > 0 {
				customerManagedKey, err := expandCustomerManagedKey(model.CustomerManagedKey)
				if err != nil {
					return fmt.Errorf("expanding `customer_managed_key`: %+v", err)
				}

				if customerManagedKey != nil {
					props.Properties.Encryption = customerManagedKey
					if err := client.AccountsUpdateThenPoll(ctx, id, props); err != nil {
						return fmt.Errorf("updating %s: %+v", id, err)
					}
				}
			}

			metadata.SetID(id)

			return nil
		},
	}
}
