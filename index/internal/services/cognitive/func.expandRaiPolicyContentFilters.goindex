package github.com/hashicorp/terraform-provider-azurerm/internal/services/cognitive
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cognitive/2024-10-01/raipolicies"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandRaiPolicyContentFilters(filters []AccountRaiPolicyContentFilter) *[]raipolicies.RaiPolicyContentFilter {
	if filters == nil {
		return nil
	}

	contentFilters := make([]raipolicies.RaiPolicyContentFilter, 0, len(filters))
	for _, filter := range filters {
		contentFilters = append(contentFilters, raipolicies.RaiPolicyContentFilter{
			Name:              pointer.To(filter.Name),
			Enabled:           pointer.To(filter.FilterEnabled),
			Blocking:          pointer.To(filter.BlockEnabled),
			SeverityThreshold: pointer.To(raipolicies.ContentLevel(filter.SeverityThreshold)),
			Source:            pointer.To(raipolicies.RaiPolicyContentSource(filter.Source)),
		})
	}
	return &contentFilters
}
