package github.com/hashicorp/terraform-provider-azurerm/internal/services/cognitive
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cognitive/2024-10-01/cognitiveservicesaccounts"
	"github.com/hashicorp/go-azure-sdk/sdk/environments"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	commonValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	cognitiveValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/cognitive/validate"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	managedHsmHelpers "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/helpers"
	managedHsmParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/parse"
	managedHsmValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (AIServices) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Cognitive.AccountsClient
			env := metadata.Client.Account.Environment

			state := AIServicesModel{}
			id, err := cognitiveservicesaccounts.ParseAccountID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.AccountsGet(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			state.Name = id.AccountName
			state.ResourceGroupName = id.ResourceGroupName

			if model := resp.Model; model != nil {
				state.Location = location.NormalizeNilable(model.Location)
				if sku := model.Sku; sku != nil {
					state.SkuName = sku.Name
				}

				identityFlatten, err := identity.FlattenSystemAndUserAssignedMapToModel(model.Identity)
				if err != nil {
					return fmt.Errorf("flattening `identity`: %+v", err)
				}
				state.Identity = *identityFlatten

				if props := model.Properties; props != nil {
					state.Endpoint = pointer.From(props.Endpoint)
					state.CustomSubdomainName = pointer.From(props.CustomSubDomainName)
					state.NetworkACLs = flattenNetworkACLs(props.NetworkAcls)
					state.Fqdns = pointer.From(props.AllowedFqdnList)

					state.PublicNetworkAccess = string(pointer.From(props.PublicNetworkAccess))
					state.OutboundNetworkAccessRestricted = pointer.From(props.RestrictOutboundNetworkAccess)

					localAuthEnabled := true
					if props.DisableLocalAuth != nil {
						localAuthEnabled = !*props.DisableLocalAuth
					}

					if localAuthEnabled {
						keys, err := client.AccountsListKeys(ctx, *id)
						if err != nil {
							return fmt.Errorf("listing the Keys for %s: %+v", id, err)
						}

						if model := keys.Model; model != nil {
							state.PrimaryAccessKey = pointer.From(model.Key1)
							state.SecondaryAccessKey = pointer.From(model.Key2)
						}
					}
					state.LocalAuthorizationEnabled = localAuthEnabled

					customerManagedKey, err := flattenCustomerManagedKey(props.Encryption, env)
					if err != nil {
						return fmt.Errorf("flattening `customer_managed_key`: %+v", err)
					}
					state.CustomerManagedKey = customerManagedKey
				}

				state.Tags = pointer.From(model.Tags)
			}

			return metadata.Encode(&state)
		},
	}
}
