package github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/synapse/mgmt/v2.0/synapse" // nolint: staticcheck
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	mssqlValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceSynapseSqlPool() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceSynapseSqlPoolCreate,
		Read:   resourceSynapseSqlPoolRead,
		Update: resourceSynapseSqlPoolUpdate,
		Delete: resourceSynapseSqlPoolDelete,

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Importer: pluginsdk.ImporterValidatingResourceIdThen(func(id string) error {
			_, err := parse.SqlPoolID(id)
			return err
		}, func(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) ([]*pluginsdk.ResourceData, error) {
			d.Set("create_mode", DefaultCreateMode)
			if v, ok := d.GetOk("create_mode"); ok && v.(string) != "" {
				d.Set("create_mode", v)
			}

			return []*pluginsdk.ResourceData{d}, nil
		}),

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.SqlPoolName,
			},

			"synapse_workspace_id": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.WorkspaceID,
			},

			"sku_name": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ValidateFunc: validation.StringInSlice([]string{
					"DW100c",
					"DW200c",
					"DW300c",
					"DW400c",
					"DW500c",
					"DW1000c",
					"DW1500c",
					"DW2000c",
					"DW2500c",
					"DW3000c",
					"DW5000c",
					"DW6000c",
					"DW7500c",
					"DW10000c",
					"DW15000c",
					"DW30000c",
				}, false),
			},

			"storage_account_type": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(synapse.StorageAccountTypeLRS),
					string(synapse.StorageAccountTypeGRS),
				}, false),
			},

			"create_mode": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				Default:  DefaultCreateMode,
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					DefaultCreateMode,
					RecoveryCreateMode,
					PointInTimeRestoreCreateMode,
				}, false),
			},

			"collation": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				// NOTE: O+C The default of this is configurable by the user, so this should remain
				Computed:     true,
				ForceNew:     true,
				ValidateFunc: mssqlValidate.DatabaseCollation(),
			},

			"recovery_database_id": {
				Type:          pluginsdk.TypeString,
				Optional:      true,
				ForceNew:      true,
				ConflictsWith: []string{"restore"},
				ValidateFunc: validation.Any(
					validate.SqlPoolID,
					validate.SqlPoolRecoverableDatabaseID,
					commonids.ValidateSqlDatabaseID,
					mssqlValidate.RecoverableDatabaseID,
				),
			},

			"restore": {
				Type:          pluginsdk.TypeList,
				ForceNew:      true,
				Optional:      true,
				MaxItems:      1,
				ConflictsWith: []string{"recovery_database_id"},
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"point_in_time": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ForceNew:     true,
							ValidateFunc: validation.IsRFC3339Time,
						},

						"source_database_id": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ForceNew: true,
							ValidateFunc: validation.Any(
								validate.SqlPoolID,
								commonids.ValidateSqlDatabaseID,
							),
						},
					},
				},
			},

			"data_encrypted": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
			},

			"geo_backup_policy_enabled": {
				Type:     pluginsdk.TypeBool,
				Default:  true,
				Optional: true,
			},

			"tags": tags.Schema(),
		},

		CustomizeDiff: pluginsdk.CustomizeDiffShim(synapseSqlPoolCustomizeDiff),
	}
}
