package github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/synapse/mgmt/v2.0/synapse" // nolint: staticcheck
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceSynapseWorkspaceVulnerabilityAssessmentCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Synapse.WorkspaceVulnerabilityAssessmentsClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	policyId, err := parse.WorkspaceSecurityAlertPolicyID(d.Get("workspace_security_alert_policy_id").(string))
	if err != nil {
		return err
	}

	policyClient := meta.(*clients.Client).Synapse.WorkspaceSecurityAlertPolicyClient
	policy, err := policyClient.Get(ctx, policyId.ResourceGroup, policyId.WorkspaceName)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", policyId, err)
	}

	id := parse.NewWorkspaceVulnerabilityAssessmentID(policyId.SubscriptionId, policyId.ResourceGroup, policyId.WorkspaceName, "default")

	if policy.State != synapse.SecurityAlertPolicyStateEnabled {
		return fmt.Errorf("updating %s: security alert policy is not enabled", id)
	}

	vulnerabilityAssessment := expandServerVulnerabilityAssessment(d)

	_, err = client.CreateOrUpdate(ctx, policyId.ResourceGroup, policyId.WorkspaceName, *vulnerabilityAssessment)
	if err != nil {
		return fmt.Errorf("updating %s: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceSynapseWorkspaceVulnerabilityAssessmentRead(d, meta)
}
