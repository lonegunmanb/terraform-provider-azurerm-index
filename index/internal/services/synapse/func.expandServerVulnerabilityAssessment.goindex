package github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/synapse/mgmt/v2.0/synapse" // nolint: staticcheck
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandServerVulnerabilityAssessment(d *pluginsdk.ResourceData) *synapse.ServerVulnerabilityAssessment {
	storageContainerPath := d.Get("storage_container_path").(string)

	vulnerabilityAssessment := synapse.ServerVulnerabilityAssessment{
		ServerVulnerabilityAssessmentProperties: &synapse.ServerVulnerabilityAssessmentProperties{
			StorageContainerPath: &storageContainerPath,
		},
	}

	props := vulnerabilityAssessment.ServerVulnerabilityAssessmentProperties

	if v, ok := d.GetOk("storage_account_access_key"); ok {
		props.StorageAccountAccessKey = utils.String(v.(string))
	}

	if v, ok := d.GetOk("storage_container_sas_key"); ok {
		props.StorageContainerSasKey = utils.String(v.(string))
	}

	if _, ok := d.GetOk("recurring_scans"); ok {
		props.RecurringScans = expandRecurringScans(d)
	}

	return &vulnerabilityAssessment
}
