package github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/synapse/mgmt/v2.0/synapse" // nolint: staticcheck
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/synapse/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceSynapseSqlPoolVulnerabilityAssessmentBaselineCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Synapse.SQLPoolVulnerabilityAssessmentRuleBaselinesClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	vulnerabilityAssessmentId, err := parse.SqlPoolVulnerabilityAssessmentID(d.Get("sql_pool_vulnerability_assessment_id").(string))
	if err != nil {
		return err
	}

	id := parse.NewSqlPoolVulnerabilityAssessmentBaselineID(vulnerabilityAssessmentId.SubscriptionId, vulnerabilityAssessmentId.ResourceGroup,
		vulnerabilityAssessmentId.WorkspaceName, vulnerabilityAssessmentId.SqlPoolName, vulnerabilityAssessmentId.VulnerabilityAssessmentName, d.Get("rule_name").(string), d.Get("name").(string))

	if d.IsNewResource() {
		existing, err := client.Get(ctx, id.ResourceGroup, id.WorkspaceName, id.SqlPoolName, id.RuleName, synapse.VulnerabilityAssessmentPolicyBaselineName(id.BaselineName))
		if err != nil {
			if !utils.ResponseWasNotFound(existing.Response) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}
		}
		if !utils.ResponseWasNotFound(existing.Response) {
			return tf.ImportAsExistsError("azurerm_synapse_sql_pool_vulnerability_assessment_baseline", id.ID())
		}
	}

	parameters := synapse.SQLPoolVulnerabilityAssessmentRuleBaseline{
		SQLPoolVulnerabilityAssessmentRuleBaselineProperties: &synapse.SQLPoolVulnerabilityAssessmentRuleBaselineProperties{
			BaselineResults: expandSQLPoolVulnerabilityAssessmentRuleBaselineSQLPoolVulnerabilityAssessmentRuleBaselineItemArray(d.Get("baseline").([]interface{})),
		},
	}
	if _, err := client.CreateOrUpdate(ctx, id.ResourceGroup, id.WorkspaceName, id.SqlPoolName, id.RuleName, synapse.VulnerabilityAssessmentPolicyBaselineName(id.BaselineName), parameters); err != nil {
		return fmt.Errorf("creating/updating %s: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceSynapseSqlPoolVulnerabilityAssessmentBaselineRead(d, meta)
}
