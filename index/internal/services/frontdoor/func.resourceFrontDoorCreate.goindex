package github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/frontdoor/2020-05-01/frontdoors"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/parse"
	frontDoorValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceFrontDoorCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Frontdoor.FrontDoorsClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	name := d.Get("name").(string)
	resourceGroup := d.Get("resource_group_name").(string)
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	id := frontdoors.NewFrontDoorID(subscriptionId, resourceGroup, name)

	resp, err := client.Get(ctx, id)
	if err != nil {
		if !response.WasNotFound(resp.HttpResponse) {
			return fmt.Errorf("checking for presence of %s: %+v", id, err)
		}
	}
	if !response.WasNotFound(resp.HttpResponse) {
		return tf.ImportAsExistsError("azurerm_frontdoor", id.ID())
	}

	var backendCertNameCheck bool
	var backendPoolsSendReceiveTimeoutSeconds int64
	if bps, ok := d.Get("backend_pool_settings").([]interface{}); ok && len(bps) > 0 {
		bpsMap := bps[0].(map[string]interface{})
		if v, ok := bpsMap["enforce_backend_pools_certificate_name_check"].(bool); ok {
			backendCertNameCheck = v
		}
		if v, ok := bpsMap["backend_pools_send_receive_timeout_seconds"].(int); ok {
			backendPoolsSendReceiveTimeoutSeconds = int64(v)
		}
	}

	friendlyName := d.Get("friendly_name").(string)
	routingRules := d.Get("routing_rule").([]interface{})
	loadBalancingSettings := d.Get("backend_pool_load_balancing").([]interface{})
	healthProbeSettings := d.Get("backend_pool_health_probe").([]interface{})
	backendPools := d.Get("backend_pool").([]interface{})
	frontendEndpoints := d.Get("frontend_endpoint").([]interface{})

	enabledState := expandFrontDoorEnabledState(d.Get("load_balancer_enabled").(bool))
	t := d.Get("tags").(map[string]interface{})

	frontDoorParameters := frontdoors.FrontDoor{
		Location: utils.String("Global"),
		Properties: &frontdoors.FrontDoorProperties{
			FriendlyName:          utils.String(friendlyName),
			RoutingRules:          expandFrontDoorRoutingRule(routingRules, id, nil),
			BackendPools:          expandFrontDoorBackendPools(backendPools, id),
			BackendPoolsSettings:  expandFrontDoorBackendPoolsSettings(backendCertNameCheck, backendPoolsSendReceiveTimeoutSeconds),
			FrontendEndpoints:     expandFrontDoorFrontendEndpoint(frontendEndpoints, id),
			HealthProbeSettings:   expandFrontDoorHealthProbeSettingsModel(healthProbeSettings, id),
			LoadBalancingSettings: expandFrontDoorLoadBalancingSettingsModel(loadBalancingSettings, id),
			EnabledState:          &enabledState,
		},
		Tags: tags.Expand(t),
	}

	if err := client.CreateOrUpdateThenPoll(ctx, id, frontDoorParameters); err != nil {
		return fmt.Errorf("creating %s: %+v", id, err)
	}

	d.Set("explicit_resource_order", flattenExplicitResourceOrder(backendPools, frontendEndpoints, routingRules, loadBalancingSettings, healthProbeSettings, id))

	d.SetId(id.ID())
	return resourceFrontDoorRead(d, meta)
}
