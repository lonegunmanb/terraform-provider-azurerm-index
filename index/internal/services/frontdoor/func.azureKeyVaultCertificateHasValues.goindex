package github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor
import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-sdk/resource-manager/frontdoor/2020-05-01/frontdoors"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func azureKeyVaultCertificateHasValues(customHttpsConfiguration map[string]interface{}, isFrontDoorManaged bool) bool {
	certificateSecretName := customHttpsConfiguration["azure_key_vault_certificate_secret_name"].(string)
	certificateSecretVersion := customHttpsConfiguration["azure_key_vault_certificate_secret_version"].(string)
	certificateVaultId := customHttpsConfiguration["azure_key_vault_certificate_vault_id"].(string)

	if isFrontDoorManaged {
		// if any of these keys have values it is invalid
		if strings.TrimSpace(certificateSecretName) != "" || strings.TrimSpace(certificateSecretVersion) != "" || strings.TrimSpace(certificateVaultId) != "" {
			return true
		}
	} else {
		if certificateSecretVersion == "" {
			// using latest ignore certificate secret version
			if strings.TrimSpace(certificateSecretName) != "" && strings.TrimSpace(certificateVaultId) != "" {
				return true
			}
		} else {
			// not using latest make sure all keys have values
			if strings.TrimSpace(certificateSecretName) != "" && strings.TrimSpace(certificateSecretVersion) != "" && strings.TrimSpace(certificateVaultId) != "" {
				return true
			}
		}
	}

	return false
}
