package github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/frontdoor/2020-05-01/frontdoors"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/parse"
	frontDoorValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenExplicitResourceOrder(backendPools, frontendEndpoints, routingRules, loadBalancingSettings, healthProbeSettings []interface{}, frontDoorId frontdoors.FrontDoorId) *[]interface{} {
	output := make([]interface{}, 0)
	var backendPoolOrder []string
	var frontedEndpointOrder []string
	var routingRulesOrder []string
	var backendPoolLoadBalancingOrder []string
	var backendPoolHealthProbeOrder []string
	if len(backendPools) > 0 {
		flattenendBackendPools, err := flattenFrontDoorBackendPools(expandFrontDoorBackendPools(backendPools, frontDoorId), frontDoorId, make([]interface{}, 0))
		if err == nil {
			for _, ids := range *flattenendBackendPools {
				backendPool := ids.(map[string]interface{})
				backendPoolOrder = append(backendPoolOrder, backendPool["id"].(string))
			}
		}
	}
	if len(frontendEndpoints) > 0 {
		flattenendfrontendEndpoints, err := flattenFrontEndEndpoints(expandFrontDoorFrontendEndpoint(frontendEndpoints, frontDoorId), frontDoorId, make([]interface{}, 0))
		if err == nil {
			for _, ids := range *flattenendfrontendEndpoints {
				frontendEndPoint := ids.(map[string]interface{})
				frontedEndpointOrder = append(frontedEndpointOrder, frontendEndPoint["id"].(string))
			}
		}
	}
	if len(routingRules) > 0 {
		var oldBlocks interface{}
		flattenendRoutingRules, err := flattenFrontDoorRoutingRule(expandFrontDoorRoutingRule(routingRules, frontDoorId, nil), oldBlocks, frontDoorId, make([]interface{}, 0))
		if err == nil {
			for _, ids := range *flattenendRoutingRules {
				routingRule := ids.(map[string]interface{})
				routingRulesOrder = append(routingRulesOrder, routingRule["id"].(string))
			}
		}
	}
	if len(loadBalancingSettings) > 0 {
		flattenendLoadBalancingSettings := flattenFrontDoorLoadBalancingSettingsModel(expandFrontDoorLoadBalancingSettingsModel(loadBalancingSettings, frontDoorId), frontDoorId, make([]interface{}, 0))

		if len(flattenendLoadBalancingSettings) > 0 {
			for _, ids := range flattenendLoadBalancingSettings {
				loadBalancingSetting := ids.(map[string]interface{})
				backendPoolLoadBalancingOrder = append(backendPoolLoadBalancingOrder, loadBalancingSetting["id"].(string))
			}
		}
	}
	if len(healthProbeSettings) > 0 {
		flattenendHealthProbeSettings := flattenFrontDoorHealthProbeSettingsModel(expandFrontDoorHealthProbeSettingsModel(healthProbeSettings, frontDoorId), frontDoorId, make([]interface{}, 0))

		if len(flattenendHealthProbeSettings) > 0 {
			for _, ids := range flattenendHealthProbeSettings {
				healthProbeSetting := ids.(map[string]interface{})
				backendPoolHealthProbeOrder = append(backendPoolHealthProbeOrder, healthProbeSetting["id"].(string))
			}
		}
	}

	output = append(output, map[string]interface{}{
		"backend_pool_ids":                backendPoolOrder,
		"frontend_endpoint_ids":           frontedEndpointOrder,
		"routing_rule_ids":                routingRulesOrder,
		"backend_pool_load_balancing_ids": backendPoolLoadBalancingOrder,
		"backend_pool_health_probe_ids":   backendPoolHealthProbeOrder,
	})

	return &output
}
