package github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/frontdoor/2020-05-01/frontdoors"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/parse"
	frontDoorValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandFrontDoorBackend(input []interface{}) *[]frontdoors.Backend {
	if len(input) == 0 {
		return &[]frontdoors.Backend{}
	}

	output := make([]frontdoors.Backend, 0)

	for _, be := range input {
		backend := be.(map[string]interface{})
		address := backend["address"].(string)
		hostHeader := backend["host_header"].(string)
		enabled := expandFrontDoorBackendEnabledState(backend["enabled"].(bool))
		httpPort := int64(backend["http_port"].(int))
		httpsPort := int64(backend["https_port"].(int))
		priority := int64(backend["priority"].(int))
		weight := int64(backend["weight"].(int))

		result := frontdoors.Backend{
			Address:           utils.String(address),
			BackendHostHeader: utils.String(hostHeader),
			EnabledState:      &enabled,
			HTTPPort:          utils.Int64(httpPort),
			HTTPSPort:         utils.Int64(httpsPort),
			Priority:          utils.Int64(priority),
			Weight:            utils.Int64(weight),
		}
		output = append(output, result)
	}

	return &output
}
