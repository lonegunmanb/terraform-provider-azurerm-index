package github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor
import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-sdk/resource-manager/frontdoor/2020-05-01/frontdoors"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func frontDoorSettings(d *pluginsdk.ResourceDiff) error {
	routingRules := d.Get("routing_rule").([]interface{})
	configFrontendEndpoints := d.Get("frontend_endpoint").([]interface{})
	backendPools := d.Get("backend_pool").([]interface{})
	loadBalancingSettings := d.Get("backend_pool_load_balancing").([]interface{})
	healthProbeSettings := d.Get("backend_pool_health_probe").([]interface{})

	if len(configFrontendEndpoints) == 0 {
		return errors.New(`"frontend_endpoint": must have at least one "frontend_endpoint" defined, found 0`)
	}

	// Loop over all of the Routing Rules and validate that only one type of configuration is defined per Routing Rule
	for _, rr := range routingRules {
		routingRule := rr.(map[string]interface{})
		routingRuleName := routingRule["name"]
		redirectConfig := routingRule["redirect_configuration"].([]interface{})
		forwardConfig := routingRule["forwarding_configuration"].([]interface{})

		// Check 0. validate that at least one routing configuration exists per routing rule
		if len(redirectConfig) == 0 && len(forwardConfig) == 0 {
			return fmt.Errorf(`routing_rule %s block is invalid. you must have either a "redirect_configuration" or a "forwarding_configuration" defined for the routing_rule %s`, routingRuleName, routingRuleName)
		}

		// Check 1. validate that only one configuration type is defined per routing rule
		if len(redirectConfig) == 1 && len(forwardConfig) == 1 {
			return fmt.Errorf(`routing_rule %s block is invalid. "redirect_configuration" conflicts with "forwarding_configuration". You can only have one configuration type per each routing rule`, routingRuleName)
		}

		// Check 2. routing rule is a forwarding_configuration type make sure the backend_pool_name exists in the configuration file
		if len(forwardConfig) > 0 {
			fc := forwardConfig[0].(map[string]interface{})

			if err := verifyBackendPoolExists(fc["backend_pool_name"].(string), backendPools); err != nil {
				return fmt.Errorf(`routing_rule %s is invalid. %+v`, routingRuleName, err)
			}

			// cacheConfiguration validation
			cacheEnabled := fc["cache_enabled"].(bool)
			cacheQueryParameters := fc["cache_query_parameters"].([]interface{})

			// set cacheQueryParameters to nil if empty
			if len(cacheQueryParameters) < 1 {
				cacheQueryParameters = nil
			}

			cacheDuration := fc["cache_duration"].(string)
			cacheQueryParameterStripDirective := fc["cache_query_parameter_strip_directive"].(string)

			// cacheQueryParameters cannot be set when cacheEnabled is false
			if !cacheEnabled && cacheQueryParameters != nil {
				return fmt.Errorf(`"cache_query_parameters" (%s) cannot be configured when "cache_enabled" is set to "false"`, cacheQueryParameters)
			}

			// cacheQueryParametersStripDirective cannot be different than StripAll (default) when cacheEnabled is false
			if !cacheEnabled && strings.TrimSpace(cacheQueryParameterStripDirective) != "StripAll" {
				return fmt.Errorf(`"cache_query_parameter_strip_directive" (%s) cannot be configured when "cache_enabled" is set to "false"`, cacheQueryParameterStripDirective)
			}

			// cacheDuration cannot be set when cacheEnabled is false
			if !cacheEnabled && strings.TrimSpace(cacheDuration) != "" {
				return fmt.Errorf(`"cache_duration" (%s) cannot be configured when "cache_enabled" is set to "false"`, cacheDuration)
			}

			// cacheQueryParameters cannot be empty when cacheEnabled is true and cacheQueryParameterStripDirective is other than StripAllExcept or StripOnly
			if cacheEnabled && (strings.TrimSpace(cacheQueryParameterStripDirective) == "StripAllExcept" || strings.TrimSpace(cacheQueryParameterStripDirective) == "StripOnly") && cacheQueryParameters == nil {
				return fmt.Errorf(`"cache_query_parameters" cannot be empty when "cache_query_parameter_strip_directive" (%s) is set to "StripAllExcept" or "StripOnly"`, cacheQueryParameterStripDirective)
			}

			// cacheQueryParameters cannot be set when cacheQueryParameterStripDirective is set to StripNone or StripAll
			if cacheEnabled && (strings.TrimSpace(cacheQueryParameterStripDirective) == "StripNone" || strings.TrimSpace(cacheQueryParameterStripDirective) == "StripAll") && cacheQueryParameters != nil {
				return fmt.Errorf(`"cache_query_parameters" cannot be set when "cache_query_parameter_strip_directive" (%s) is set to "StripNone" or "StripAll"`, cacheQueryParameterStripDirective)
			}
		}

		// Check 3. validate that each routing rule frontend_endpoints are actually defined in the resource schema
		if routingRuleFrontends := routingRule["frontend_endpoints"].([]interface{}); len(routingRuleFrontends) > 0 {
			if err := verifyRoutingRuleFrontendEndpoints(routingRuleFrontends, configFrontendEndpoints); err != nil {
				return fmt.Errorf(`"routing_rule":%q %+v`, routingRuleName, err)
			}
		} else {
			return fmt.Errorf(`"routing_rule": %q must have at least one "frontend_endpoints" defined`, routingRuleName)
		}
	}

	// Verify backend pool load balancing settings and health probe settings are defined in the resource schema
	if err := verifyLoadBalancingAndHealthProbeSettings(backendPools, loadBalancingSettings, healthProbeSettings); err != nil {
		return fmt.Errorf(`%+v`, err)
	}

	return nil
}
