package github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/frontdoor/2020-05-01/frontdoors"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/parse"
	frontDoorValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenSingleFrontDoorHealthProbeSettingsModel(input *frontdoors.HealthProbeSettingsModel, frontDoorId frontdoors.FrontDoorId) map[string]interface{} {
	if input == nil {
		return make(map[string]interface{})
	}

	id := ""
	name := ""
	if input.Name != nil {
		name = *input.Name
		// rewrite the ID to ensure it's consistent
		id = parse.NewHealthProbeID(frontDoorId.SubscriptionId, frontDoorId.ResourceGroupName, frontDoorId.FrontDoorName, name).ID()
	}

	enabled := false
	intervalInSeconds := 0
	path := ""
	probeMethod := ""
	protocol := ""

	if properties := input.Properties; properties != nil {
		if properties.IntervalInSeconds != nil {
			intervalInSeconds = int(*properties.IntervalInSeconds)
		}
		if properties.Path != nil {
			path = *properties.Path
		}
		if healthProbeMethod := properties.HealthProbeMethod; healthProbeMethod != nil && *healthProbeMethod != "" {
			// I have to upper this as the frontdoor.GET and frontdoor.HEAD types are uppercased
			// but Azure stores them in the resource as sentence cased (e.g. "Get" and "Head")
			probeMethod = strings.ToUpper(string(*healthProbeMethod))
		}
		if properties.EnabledState != nil && *properties.EnabledState != "" {
			enabled = *properties.EnabledState == frontdoors.HealthProbeEnabledEnabled
		}
		if properties.Protocol != nil {
			protocol = string(*properties.Protocol)
		}
	}

	output := map[string]interface{}{
		"enabled":             enabled,
		"id":                  id,
		"name":                name,
		"protocol":            protocol,
		"interval_in_seconds": intervalInSeconds,
		"path":                path,
		"probe_method":        probeMethod,
	}

	return output
}
