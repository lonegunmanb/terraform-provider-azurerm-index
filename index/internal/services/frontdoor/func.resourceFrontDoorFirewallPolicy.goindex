package github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/frontdoor/2020-04-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/frontdoor/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceFrontDoorFirewallPolicy() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceFrontDoorFirewallPolicyCreateUpdate,
		Read:   resourceFrontDoorFirewallPolicyRead,
		Update: resourceFrontDoorFirewallPolicyCreateUpdate,
		Delete: resourceFrontDoorFirewallPolicyDelete,

		SchemaVersion: 1,
		StateUpgraders: pluginsdk.StateUpgrades(map[int]pluginsdk.StateUpgrade{
			0: migration.WebApplicationFirewallPolicyV0ToV1{},
		}),

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := parse.WebApplicationFirewallPolicyIDInsensitively(id)
			return err
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.FrontDoorWAFName,
			},

			"location": commonschema.LocationComputed(),

			"resource_group_name": commonschema.ResourceGroupName(),

			"enabled": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Default:  true,
			},

			"mode": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(webapplicationfirewallpolicies.PolicyModeDetection),
					string(webapplicationfirewallpolicies.PolicyModePrevention),
				}, false),
				Default: string(webapplicationfirewallpolicies.PolicyModePrevention),
			},

			"redirect_url": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ValidateFunc: validation.IsURLWithScheme([]string{"http", "https"}),
			},

			"custom_block_response_status_code": {
				Type:     pluginsdk.TypeInt,
				Optional: true,
				ValidateFunc: validation.IntInSlice([]int{
					200,
					403,
					405,
					406,
					429,
				}),
			},

			"custom_block_response_body": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ValidateFunc: validate.CustomBlockResponseBody,
			},

			"custom_rule": {
				Type:     pluginsdk.TypeList,
				MaxItems: 100,
				Optional: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"name": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"enabled": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
							Default:  true,
						},

						"priority": {
							Type:     pluginsdk.TypeInt,
							Optional: true,
							Default:  1,
						},

						"type": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(webapplicationfirewallpolicies.RuleTypeMatchRule),
								string(webapplicationfirewallpolicies.RuleTypeRateLimitRule),
							}, false),
						},

						"rate_limit_duration_in_minutes": {
							Type:     pluginsdk.TypeInt,
							Optional: true,
							Default:  1,
						},

						"rate_limit_threshold": {
							Type:     pluginsdk.TypeInt,
							Optional: true,
							Default:  10,
						},

						"action": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(webapplicationfirewallpolicies.ActionTypeAllow),
								string(webapplicationfirewallpolicies.ActionTypeBlock),
								string(webapplicationfirewallpolicies.ActionTypeLog),
								string(webapplicationfirewallpolicies.ActionTypeRedirect),
							}, false),
						},

						"match_condition": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							MaxItems: 10,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"match_variable": {
										Type:     pluginsdk.TypeString,
										Required: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(webapplicationfirewallpolicies.MatchVariableCookies),
											string(webapplicationfirewallpolicies.MatchVariablePostArgs),
											string(webapplicationfirewallpolicies.MatchVariableQueryString),
											string(webapplicationfirewallpolicies.MatchVariableRemoteAddr),
											string(webapplicationfirewallpolicies.MatchVariableRequestBody),
											string(webapplicationfirewallpolicies.MatchVariableRequestHeader),
											string(webapplicationfirewallpolicies.MatchVariableRequestMethod),
											string(webapplicationfirewallpolicies.MatchVariableRequestUri),
											string(webapplicationfirewallpolicies.MatchVariableSocketAddr),
										}, false),
									},

									"match_values": {
										Type:     pluginsdk.TypeList,
										Required: true,
										MaxItems: 600,
										Elem: &pluginsdk.Schema{
											Type:         pluginsdk.TypeString,
											ValidateFunc: validation.StringLenBetween(1, 256),
										},
									},

									"operator": {
										Type:     pluginsdk.TypeString,
										Required: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(webapplicationfirewallpolicies.OperatorAny),
											string(webapplicationfirewallpolicies.OperatorBeginsWith),
											string(webapplicationfirewallpolicies.OperatorContains),
											string(webapplicationfirewallpolicies.OperatorEndsWith),
											string(webapplicationfirewallpolicies.OperatorEqual),
											string(webapplicationfirewallpolicies.OperatorGeoMatch),
											string(webapplicationfirewallpolicies.OperatorGreaterThan),
											string(webapplicationfirewallpolicies.OperatorGreaterThanOrEqual),
											string(webapplicationfirewallpolicies.OperatorIPMatch),
											string(webapplicationfirewallpolicies.OperatorLessThan),
											string(webapplicationfirewallpolicies.OperatorLessThanOrEqual),
											string(webapplicationfirewallpolicies.OperatorRegEx),
										}, false),
									},

									"selector": {
										Type:         pluginsdk.TypeString,
										Optional:     true,
										ValidateFunc: validation.StringIsNotEmpty,
									},

									"negation_condition": {
										Type:     pluginsdk.TypeBool,
										Optional: true,
										Default:  false,
									},

									"transforms": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										MaxItems: 5,
										Elem: &pluginsdk.Schema{
											Type: pluginsdk.TypeString,
											ValidateFunc: validation.StringInSlice([]string{
												string(webapplicationfirewallpolicies.TransformTypeLowercase),
												string(webapplicationfirewallpolicies.TransformTypeRemoveNulls),
												string(webapplicationfirewallpolicies.TransformTypeTrim),
												string(webapplicationfirewallpolicies.TransformTypeUppercase),
												string(webapplicationfirewallpolicies.TransformTypeURLDecode),
												string(webapplicationfirewallpolicies.TransformTypeURLEncode),
											}, false),
										},
									},
								},
							},
						},
					},
				},
			},

			"managed_rule": {
				Type:     pluginsdk.TypeList,
				MaxItems: 100,
				Optional: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"type": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"version": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"exclusion": {
							Type:     pluginsdk.TypeList,
							MaxItems: 100,
							Optional: true,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"match_variable": {
										Type:     pluginsdk.TypeString,
										Required: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableQueryStringArgNames),
											string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableRequestBodyPostArgNames),
											string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableRequestCookieNames),
											string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableRequestHeaderNames),
										}, false),
									},
									"operator": {
										Type:     pluginsdk.TypeString,
										Required: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorContains),
											string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorEndsWith),
											string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorEquals),
											string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorEqualsAny),
											string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorStartsWith),
										}, false),
									},
									"selector": {
										Type:         pluginsdk.TypeString,
										Required:     true,
										ValidateFunc: validation.StringIsNotEmpty,
									},
								},
							},
						},

						"override": {
							Type:     pluginsdk.TypeList,
							MaxItems: 100,
							Optional: true,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"rule_group_name": {
										Type:         pluginsdk.TypeString,
										Required:     true,
										ValidateFunc: validation.StringIsNotEmpty,
									},

									"exclusion": {
										Type:     pluginsdk.TypeList,
										MaxItems: 100,
										Optional: true,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"match_variable": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableQueryStringArgNames),
														string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableRequestBodyPostArgNames),
														string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableRequestCookieNames),
														string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableRequestHeaderNames),
													}, false),
												},
												"operator": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorContains),
														string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorEndsWith),
														string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorEquals),
														string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorEqualsAny),
														string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorStartsWith),
													}, false),
												},
												"selector": {
													Type:         pluginsdk.TypeString,
													Required:     true,
													ValidateFunc: validation.StringIsNotEmpty,
												},
											},
										},
									},

									"rule": {
										Type:     pluginsdk.TypeList,
										MaxItems: 1000,
										Optional: true,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"rule_id": {
													Type:         pluginsdk.TypeString,
													Required:     true,
													ValidateFunc: validation.StringIsNotEmpty,
												},

												"enabled": {
													Type:     pluginsdk.TypeBool,
													Optional: true,
													Default:  false,
												},

												"exclusion": {
													Type:     pluginsdk.TypeList,
													MaxItems: 100,
													Optional: true,
													Elem: &pluginsdk.Resource{
														Schema: map[string]*pluginsdk.Schema{
															"match_variable": {
																Type:     pluginsdk.TypeString,
																Required: true,
																ValidateFunc: validation.StringInSlice([]string{
																	string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableQueryStringArgNames),
																	string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableRequestBodyPostArgNames),
																	string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableRequestCookieNames),
																	string(webapplicationfirewallpolicies.ManagedRuleExclusionMatchVariableRequestHeaderNames),
																}, false),
															},
															"operator": {
																Type:     pluginsdk.TypeString,
																Required: true,
																ValidateFunc: validation.StringInSlice([]string{
																	string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorContains),
																	string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorEndsWith),
																	string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorEquals),
																	string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorEqualsAny),
																	string(webapplicationfirewallpolicies.ManagedRuleExclusionSelectorMatchOperatorStartsWith),
																}, false),
															},
															"selector": {
																Type:         pluginsdk.TypeString,
																Required:     true,
																ValidateFunc: validation.StringIsNotEmpty,
															},
														},
													},
												},

												"action": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(webapplicationfirewallpolicies.ActionTypeAllow),
														string(webapplicationfirewallpolicies.ActionTypeBlock),
														string(webapplicationfirewallpolicies.ActionTypeLog),
														string(webapplicationfirewallpolicies.ActionTypeRedirect),
													}, false),
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"frontend_endpoint_ids": {
				Type:     pluginsdk.TypeList,
				Computed: true,
				Elem: &pluginsdk.Schema{
					Type: pluginsdk.TypeString,
				},
			},

			"tags": commonschema.Tags(),
		},
	}
}
