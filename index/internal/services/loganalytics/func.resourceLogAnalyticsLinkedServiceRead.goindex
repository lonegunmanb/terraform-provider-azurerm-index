package github.com/hashicorp/terraform-provider-azurerm/internal/services/loganalytics
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2022-08-08/automationaccount"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/linkedservices"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2022-10-01/clusters"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceLogAnalyticsLinkedServiceRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).LogAnalytics.LinkedServicesClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := linkedservices.ParseLinkedServiceID(d.Id())
	if err != nil {
		return err
	}

	workspace := linkedservices.NewWorkspaceID(subscriptionId, id.ResourceGroupName, id.WorkspaceName)

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}
		return fmt.Errorf("making Read request on %s: %+v", *id, err)
	}

	d.Set("name", id.LinkedServiceName)
	d.Set("resource_group_name", id.ResourceGroupName)
	d.Set("workspace_id", workspace.ID())

	if model := resp.Model; model != nil {
		readAccessId := ""
		if model.Properties.ResourceId != nil {
			readAccessId = *model.Properties.ResourceId
		}
		d.Set("read_access_id", readAccessId)

		writeAccessId := ""
		if model.Properties.WriteAccessResourceId != nil {
			writeAccessId = *model.Properties.WriteAccessResourceId
		}
		d.Set("write_access_id", writeAccessId)
	}

	return nil
}
