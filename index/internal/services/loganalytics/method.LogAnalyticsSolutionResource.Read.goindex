package github.com/hashicorp/terraform-provider-azurerm/internal/services/loganalytics
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationsmanagement/2015-11-01-preview/solution"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/loganalytics/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/loganalytics/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (s LogAnalyticsSolutionResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.LogAnalytics.SolutionsClient

			id, err := solution.ParseSolutionID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", metadata.ResourceData.Id(), err)
			}

			state := SolutionResourceModel{
				ResourceGroupName: id.ResourceGroupName,
			}

			if model := resp.Model; model != nil {
				if location := model.Location; location != nil {
					state.Location = azure.NormalizeLocation(*location)
				}

				// Reversing the mapping used to get .solution_name
				// expecting resp.Name to be in format "SolutionName(WorkspaceName)".
				if v := model.Name; v != nil {
					val := pointer.From(v)
					segments := strings.Split(val, "(")
					if len(segments) != 2 {
						return fmt.Errorf("expected %q to match 'Solution(WorkspaceName)'", val)
					}

					solutionName := segments[0]
					workspaceName := strings.TrimSuffix(segments[1], ")")
					state.SolutionName = solutionName
					state.WorkspaceName = workspaceName
				}

				if props := model.Properties; props != nil {
					var workspaceId string
					if props.WorkspaceResourceId != "" {
						id, err := workspaces.ParseWorkspaceIDInsensitively(props.WorkspaceResourceId)
						if err != nil {
							return err
						}
						workspaceId = id.ID()
					}
					state.WorkspaceResourceId = workspaceId
				}

				if plan := model.Plan; plan != nil {
					state.SolutionPlan = flattenAzureRmLogAnalyticsSolutionPlan(plan)
				}

				state.Tags = pointer.From(model.Tags)
			}

			return metadata.Encode(&state)
		},
	}
}
