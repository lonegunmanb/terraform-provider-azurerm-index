package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"context"
	"fmt"
	"math"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/jobcredentials"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/jobsteps"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/jobtargetgroups"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenOutputTarget(input *jobsteps.JobStepOutput) ([]JobStepOutputTarget, error) {
	if input == nil {
		return []JobStepOutputTarget{}, nil
	}

	credentialID := ""
	if v := pointer.From(input.Credential); v != "" {
		id, err := jobcredentials.ParseCredentialID(v)
		if err != nil {
			return nil, err
		}
		credentialID = id.ID()
	}

	databaseId := commonids.NewSqlDatabaseID(pointer.From(input.SubscriptionId), pointer.From(input.ResourceGroupName), input.ServerName, input.DatabaseName)

	return []JobStepOutputTarget{
		{
			JobCredentialId: credentialID,
			MsSqlDatabaseId: databaseId.ID(),
			TableName:       input.TableName,
			SchemaName:      pointer.From(input.SchemaName),
		},
	}, nil
}
