package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/serversecurityalertpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/servervulnerabilityassessments"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceMsSqlServerVulnerabilityAssessmentRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).MSSQL.ServerVulnerabilityAssessmentsClient
	alertClient := meta.(*clients.Client).MSSQL.ServerSecurityAlertPoliciesClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	log.Printf("[INFO] reading mssql server vulnerability assessment")

	id, err := parse.ServerVulnerabilityAssessmentID(d.Id())
	if err != nil {
		return err
	}

	serverId := commonids.NewSqlServerID(id.SubscriptionId, id.ResourceGroup, id.ServerName)

	vulnerability, err := client.Get(ctx, serverId)
	if err != nil {
		if response.WasNotFound(vulnerability.HttpResponse) {
			log.Printf("[WARN] vulnerability assessment for SQL server %q was not found", serverId.ServerName)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving vulnerability assessment for SQL server %q: %w", serverId.ServerName, err)
	}

	alert, err := alertClient.Get(ctx, serverId)
	if err != nil {
		return fmt.Errorf("retrieving security alert policy for SQL server %q: %w", serverId.ServerName, err)
	}

	model := alert.Model

	if model == nil {
		return fmt.Errorf("security alert policy for SQL server %q returned empty response", serverId.ServerName)
	}

	if model.Id == nil {
		return fmt.Errorf("security alert policy for SQL server %q has no resource ID", serverId.ServerName)
	}

	recurringScans := make([]interface{}, 0)
	var storageContainerPath string
	var storageAccountAccessKey string
	var storageContainerSasKey string
	recurringScansResult := make(map[string]interface{})

	if vModel := vulnerability.Model; vModel != nil {
		if props := vModel.Properties; props != nil {
			storageContainerPath = props.StorageContainerPath

			if recurringScansProps := props.RecurringScans; recurringScansProps != nil {
				var enabled bool
				if recurringScansProps.IsEnabled != nil {
					enabled = *recurringScansProps.IsEnabled
				}
				recurringScansResult["enabled"] = enabled

				var emailAdmins bool
				if recurringScansProps.EmailSubscriptionAdmins != nil {
					emailAdmins = *recurringScansProps.EmailSubscriptionAdmins
				}
				recurringScansResult["email_subscription_admins"] = emailAdmins

				var emails []string
				if recurringScansProps.Emails != nil {
					emails = *recurringScansProps.Emails
				}
				recurringScansResult["emails"] = emails
			}

			recurringScans = []interface{}{recurringScansResult}
		}
	}

	d.Set("server_security_alert_policy_id", model.Id)
	d.Set("storage_container_path", storageContainerPath)
	d.Set("recurring_scans", recurringScans)

	if v, ok := d.GetOk("storage_account_access_key"); ok {
		storageAccountAccessKey = v.(string)
	}
	d.Set("storage_account_access_key", storageAccountAccessKey)

	if v, ok := d.GetOk("storage_container_sas_key"); ok {
		storageContainerSasKey = v.(string)
	}
	d.Set("storage_container_sas_key", storageContainerSasKey)

	return nil
}
