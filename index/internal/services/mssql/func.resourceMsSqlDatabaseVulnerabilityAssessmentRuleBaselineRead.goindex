package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/databasevulnerabilityassessmentrulebaselines"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceMsSqlDatabaseVulnerabilityAssessmentRuleBaselineRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).MSSQL.DatabaseVulnerabilityAssessmentRuleBaselinesClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.DatabaseVulnerabilityAssessmentRuleBaselineID(d.Id())
	if err != nil {
		return err
	}

	baselineId := databasevulnerabilityassessmentrulebaselines.NewBaselineID(id.SubscriptionId, id.ResourceGroup, id.ServerName, id.DatabaseName, id.RuleName, databasevulnerabilityassessmentrulebaselines.VulnerabilityAssessmentPolicyBaselineName(id.BaselineName))

	result, err := client.Get(ctx, baselineId)
	if err != nil {
		if response.WasNotFound(result.HttpResponse) {
			log.Printf("[WARN] %s was not found", *id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("database_name", id.DatabaseName)
	d.Set("rule_id", id.RuleName)
	d.Set("baseline_name", id.BaselineName)

	vulnerabilityAssessmentId := parse.NewServerVulnerabilityAssessmentID(id.SubscriptionId, id.ResourceGroup, id.ServerName, id.VulnerabilityAssessmentName)
	d.Set("server_vulnerability_assessment_id", vulnerabilityAssessmentId.ID())

	if model := result.Model; model != nil {
		if props := model.Properties; props != nil {
			d.Set("baseline_result", flattenBaselineResult(props.BaselineResults))
		}
	}

	return nil
}
