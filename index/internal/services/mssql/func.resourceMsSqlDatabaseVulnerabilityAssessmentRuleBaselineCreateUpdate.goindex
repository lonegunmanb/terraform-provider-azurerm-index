package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/databasevulnerabilityassessmentrulebaselines"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceMsSqlDatabaseVulnerabilityAssessmentRuleBaselineCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).MSSQL.DatabaseVulnerabilityAssessmentRuleBaselinesClient
	vulnerabilityClient := meta.(*clients.Client).MSSQL.ServerVulnerabilityAssessmentsClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	log.Printf("[INFO] preparing arguments for Azure ARM Vulnerability Assessment Rule Baselines creation.")

	vulnerabilityAssessmentId, err := parse.ServerVulnerabilityAssessmentID(d.Get("server_vulnerability_assessment_id").(string))
	if err != nil {
		return err
	}

	serverId := commonids.NewSqlServerID(vulnerabilityAssessmentId.SubscriptionId, vulnerabilityAssessmentId.ResourceGroup, vulnerabilityAssessmentId.ServerName)

	vulnerabilityAssessment, err := vulnerabilityClient.Get(ctx, serverId)
	if err != nil {
		return fmt.Errorf("retrieving Server Vulnerability Assessment Settings: %+v", err)
	}
	if vulnerabilityAssessment.Model == nil || vulnerabilityAssessment.Model.Properties == nil || vulnerabilityAssessment.Model.Properties.StorageContainerPath == "" {
		return fmt.Errorf("storage container path not set in Server Vulnerability Assessment Settings")
	}

	// TODO: requires import
	parameters := expandBaselineResults(d.Get("baseline_result").(*pluginsdk.Set))

	// 	subscriptionId, resourceGroup, serverName, databaseName, vulnerabilityAssessmentName, ruleName, baselineName string
	id := parse.NewDatabaseVulnerabilityAssessmentRuleBaselineID(vulnerabilityAssessmentId.SubscriptionId,
		vulnerabilityAssessmentId.ResourceGroup,
		vulnerabilityAssessmentId.ServerName,
		d.Get("database_name").(string),
		vulnerabilityAssessmentId.VulnerabilityAssessmentName,
		d.Get("rule_id").(string),
		d.Get("baseline_name").(string))

	baselineId := databasevulnerabilityassessmentrulebaselines.NewBaselineID(id.SubscriptionId, id.ResourceGroup, id.ServerName, id.DatabaseName, id.RuleName, databasevulnerabilityassessmentrulebaselines.VulnerabilityAssessmentPolicyBaselineName(id.BaselineName))

	if _, err := client.CreateOrUpdate(ctx, baselineId, *parameters); err != nil {
		return fmt.Errorf("updating database vulnerability assessment rule baseline: %s", err)
	}

	d.SetId(id.ID())
	return resourceMsSqlDatabaseVulnerabilityAssessmentRuleBaselineRead(d, meta)
}
