package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/helper
import (
	"errors"
	"fmt"
	"math"
	"sort"
	"strings"

	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func MSSQLElasticPoolValidateSKU(diff *pluginsdk.ResourceDiff) error {
	name := diff.Get("sku.0.name")
	tier := diff.Get("sku.0.tier")
	capacity := diff.Get("sku.0.capacity")
	family := diff.Get("sku.0.family")
	maxSizeBytes := diff.Get("max_size_bytes")
	maxSizeGb := diff.Get("max_size_gb")
	minCapacity := diff.Get("per_database_settings.0.min_capacity")
	maxCapacity := diff.Get("per_database_settings.0.max_capacity")
	enclaveType := diff.Get("enclave_type")

	s := sku{
		Name:        name.(string),
		Tier:        tier.(string),
		Family:      family.(string),
		Capacity:    capacity.(int),
		MaxSizeGb:   maxSizeGb.(float64),
		MinCapacity: minCapacity.(float64),
		MaxCapacity: maxCapacity.(float64),
		SkuType:     DTU,
	}

	// Convert Bytes to Gigabytes only if
	// 'max_size_bytes' has changed
	if diff.HasChange("max_size_bytes") {
		s.MaxSizeGb = float64(maxSizeBytes.(int) / 1024 / 1024 / 1024)
	}

	// Check to see if the name describes a vCore type SKU
	if strings.HasPrefix(strings.ToLower(s.Name), "gp_") || strings.HasPrefix(strings.ToLower(s.Name), "bc_") || strings.HasPrefix(strings.ToLower(s.Name), "hs_") {
		s.SkuType = VCore
	}

	// Universal check for both DTU and vCore based SKUs
	if !nameTierIsValid(s) {
		return fmt.Errorf("mismatch between SKU name '%s' and tier '%s', expected 'tier' to be '%s'", s.Name, s.Tier, getTierFromName[strings.ToLower(s.Name)])
	}

	// Verify that Family is valid
	if s.SkuType == DTU && s.Family != "" {
		return fmt.Errorf("invalid attribute 'family'(%s) for service tier '%s', remove the 'family' attribute from the configuration file", s.Family, s.Tier)
	} else if s.SkuType == VCore && !nameContainsFamily(s) {
		return fmt.Errorf("mismatch between SKU name '%s' and family '%s', expected '%s'", s.Name, s.Family, getFamilyFromName(s))
	}

	// Validate if 'enclave_type' is valid for this SKU type
	if enclaveType != "" && strings.Contains(strings.ToLower(s.Name), "_dc") {
		return fmt.Errorf("virtualization based security (VBS) enclaves are not supported for the %q sku", s.Name)
	}

	// Get max GB and do validation based on SKU type
	if s.SkuType == DTU {
		s.MaxAllowedGB = getDTUMaxGB[strings.ToLower(s.Tier)][s.Capacity]
		return doDTUSKUValidation(s)
	} else {
		s.MaxAllowedGB = getvCoreMaxGB[strings.ToLower(s.Tier)][strings.ToLower(s.Family)][s.Capacity]
		return doVCoreSKUValidation(s)
	}
}
