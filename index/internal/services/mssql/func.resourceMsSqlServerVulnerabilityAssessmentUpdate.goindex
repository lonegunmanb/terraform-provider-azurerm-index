package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/serversecurityalertpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/servervulnerabilityassessments"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceMsSqlServerVulnerabilityAssessmentUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).MSSQL.ServerVulnerabilityAssessmentsClient
	alertClient := meta.(*clients.Client).MSSQL.ServerSecurityAlertPoliciesClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.ServerVulnerabilityAssessmentID(d.Id())
	if err != nil {
		return err
	}

	serverId := commonids.NewSqlServerID(id.SubscriptionId, id.ResourceGroup, id.ServerName)

	alert, err := alertClient.Get(ctx, serverId)
	if err != nil {
		return fmt.Errorf("retrieving mssql server security alert policy: %+v", err)
	}

	if alert.Model == nil {
		return fmt.Errorf("retrieving mssql server security alert policy %s: model was nil", serverId)
	}

	if alert.Model.Properties == nil {
		return fmt.Errorf("retrieving mssql server security alert policy properties %s: properties was nil", serverId)
	}

	if alert.Model.Properties.State != serversecurityalertpolicies.SecurityAlertsPolicyStateEnabled {
		return fmt.Errorf("mssql server security alert policy is not 'enabled'")
	}

	log.Printf("[INFO] preparing arguments for mssql server vulnerability assessment update")

	payload := servervulnerabilityassessments.ServerVulnerabilityAssessment{}

	result, err := client.Get(ctx, serverId)
	if err != nil {
		return fmt.Errorf("retrieving mssql server vulnerability assessment policy: %+v", err)
	}

	if result.Model == nil {
		return fmt.Errorf("retrieving mssql server vulnerability assessment policy %s: model was nil", serverId)
	}

	props := result.Model.Properties

	if props == nil {
		return fmt.Errorf("retrieving mssql server vulnerability assessment policy %s: properties was nil", serverId)
	}

	if d.HasChange("storage_container_path") {
		props.StorageContainerPath = d.Get("storage_container_path").(string)
	}

	if d.HasChange("recurring_scans") {
		var isEnabled *bool
		var emailSubscriptionAdmins *bool
		emails := make([]string, 0)

		recurringProps := servervulnerabilityassessments.VulnerabilityAssessmentRecurringScansProperties{
			EmailSubscriptionAdmins: emailSubscriptionAdmins,
			Emails:                  pointer.To(emails),
			IsEnabled:               isEnabled,
		}

		if rs, ok := d.GetOk("recurring_scans"); ok {
			recurringScans := rs.([]interface{})

			if len(recurringScans) != 0 {
				v := recurringScans[0].(map[string]interface{})

				if enabled, ok := v["enabled"]; ok {
					isEnabled = pointer.To(enabled.(bool))
				}
				recurringProps.IsEnabled = isEnabled

				if emailAdmins, ok := v["email_subscription_admins"]; ok {
					emailSubscriptionAdmins = pointer.To(emailAdmins.(bool))
				}
				recurringProps.EmailSubscriptionAdmins = emailSubscriptionAdmins

				if _, ok := v["emails"]; ok {
					for _, email := range v["emails"].([]interface{}) {
						emails = append(emails, email.(string))
					}
				}
				recurringProps.Emails = pointer.To(emails)
			}
		}

		props.RecurringScans = pointer.To(recurringProps)
	}

	// NOTE: 'storage_account_access_key' and 'storage_container_sas_key'
	// are not returned by the API...
	if v, ok := d.GetOk("storage_account_access_key"); ok {
		props.StorageAccountAccessKey = pointer.To(v.(string))
	}

	if v, ok := d.GetOk("storage_container_sas_key"); ok {
		props.StorageContainerSasKey = pointer.To(v.(string))
	}

	payload.Properties = props

	update, err := client.CreateOrUpdate(ctx, serverId, payload)
	if err != nil || update.Model == nil || update.Model.Id == nil {
		return fmt.Errorf("updating mssql server vulnerability assessment %s : %v", id, err)
	}

	return resourceMsSqlServerVulnerabilityAssessmentRead(d, meta)
}
