package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"context"
	"fmt"
	"log"
	"math"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/compute/2024-03-01/virtualmachines"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sqlvirtualmachine/2023-10-01/sqlvirtualmachinegroups"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sqlvirtualmachine/2023-10-01/sqlvirtualmachines"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/helper"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceMsSqlVirtualMachineAutoBackupSettingsRefreshFunc(ctx context.Context, client *sqlvirtualmachines.SqlVirtualMachinesClient, d *pluginsdk.ResourceData) pluginsdk.StateRefreshFunc {
	return func() (interface{}, string, error) {
		id, err := sqlvirtualmachines.ParseSqlVirtualMachineID(d.Id())
		if err != nil {
			return nil, "Error", err
		}

		resp, err := client.Get(ctx, *id, sqlvirtualmachines.GetOperationOptions{Expand: utils.String("*")})
		if err != nil {
			return nil, "Retry", err
		}

		if model := resp.Model; model != nil {
			if props := model.Properties; props != nil {
				autoBackupSettings := flattenSqlVirtualMachineAutoBackup(props.AutoBackupSettings, d)

				if len(autoBackupSettings) == 0 {
					// auto backup was nil or disabled in the response
					if v, ok := d.GetOk("auto_backup"); !ok || len(v.([]interface{})) == 0 {
						// also disabled in the config
						return resp, "Updated", nil
					}
					return resp, "Pending", nil
				}

				if v, ok := d.GetOk("auto_backup"); !ok || len(v.([]interface{})) == 0 {
					// still waiting for it to be disabled
					return resp, "Pending", nil
				}

				// check each property in the auto_backup block for drift
				for prop, val := range autoBackupSettings[0].(map[string]interface{}) {
					v := d.Get(fmt.Sprintf("auto_backup.0.%s", prop))
					switch prop {
					case "manual_schedule":
						if m := val.([]interface{}); len(m) > 0 {
							if b, ok := d.GetOk("auto_backup.0.manual_schedule"); !ok || len(b.([]interface{})) == 0 {
								// manual schedule disabled in config but still showing in response
								return resp, "Pending", nil
							}
							// check each property in the manual_schedule block for drift
							for prop2, val2 := range m[0].(map[string]interface{}) {
								v2 := d.Get(fmt.Sprintf("auto_backup.0.manual_schedule.0.%s", prop2))
								switch prop2 {
								case "full_backup_frequency":
									if !strings.EqualFold(v2.(string), val2.(string)) {
										return resp, "Pending", nil
									}
								case "days_of_week":
									daysOfWeekLocal := make(map[string]bool, 0)
									if v2 != nil {
										for _, item := range v2.(*pluginsdk.Set).List() {
											daysOfWeekLocal[item.(string)] = true
										}
									}

									daysOfWeekRemote := make([]interface{}, 0)
									if val2 != nil {
										daysOfWeekRemote = val2.([]interface{})
									}

									if len(daysOfWeekRemote) != len(daysOfWeekLocal) {
										return resp, "Pending", nil
									}

									for _, item := range daysOfWeekRemote {
										if _, ok := daysOfWeekLocal[item.(string)]; !ok {
											return resp, "Pending", nil
										}
									}
								default:
									if v2 != val2 {
										return resp, "Pending", nil
									}
								}
							}
						} else if b, ok := d.GetOk("auto_backup.0.manual_schedule"); ok || len(b.([]interface{})) > 0 {
							// manual schedule set in config but not reflecting in response
							return resp, "Pending", nil
						}
					default:
						// To be removed in 5.0:
						// When `encryption_enabled` is not set in config, but `encryption_password` is, `v != val` will always be `true`.
						// This causes an infinite loop until the resource creation times out. To avoid this, continue to the next iteration of the loop if
						// `prop` is `encryption_enabled`.
						if !features.FivePointOh() && prop == "encryption_enabled" {
							continue
						}

						if v != val {
							return resp, "Pending", nil
						}
					}
				}

				return resp, "Updated", nil
			}
		}

		return resp, "Retry", nil
	}
}
