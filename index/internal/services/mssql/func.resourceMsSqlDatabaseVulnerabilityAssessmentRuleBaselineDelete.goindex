package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/databasevulnerabilityassessmentrulebaselines"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceMsSqlDatabaseVulnerabilityAssessmentRuleBaselineDelete(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).MSSQL.DatabaseVulnerabilityAssessmentRuleBaselinesClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.DatabaseVulnerabilityAssessmentRuleBaselineID(d.Id())
	if err != nil {
		return err
	}

	baselineId := databasevulnerabilityassessmentrulebaselines.NewBaselineID(id.SubscriptionId, id.ResourceGroup, id.ServerName, id.DatabaseName, id.RuleName, databasevulnerabilityassessmentrulebaselines.VulnerabilityAssessmentPolicyBaselineName(id.BaselineName))

	if _, err := client.Delete(ctx, baselineId); err != nil {
		return fmt.Errorf("deleting %s: %+v", *id, err)
	}

	return nil
}
