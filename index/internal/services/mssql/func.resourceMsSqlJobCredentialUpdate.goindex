package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/jobcredentials"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceMsSqlJobCredentialUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).MSSQL.JobCredentialsClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	log.Printf("[INFO] preparing arguments for Job Credential update.")

	jaId, err := jobcredentials.ParseJobAgentID(d.Get("job_agent_id").(string))
	if err != nil {
		return err
	}
	jobCredentialId := jobcredentials.NewCredentialID(jaId.SubscriptionId, jaId.ResourceGroupName, jaId.ServerName, jaId.JobAgentName, d.Get("name").(string))

	existing, err := client.Get(ctx, jobCredentialId)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", jobCredentialId, err)
	}

	if existing.Model == nil {
		return fmt.Errorf("retrieving %s: `model` was nil", jobCredentialId)
	}

	if existing.Model.Properties == nil {
		return fmt.Errorf("retrieving %s: `model.Properties` was nil", jobCredentialId)
	}
	payload := existing.Model

	if d.HasChange("username") {
		payload.Properties.Username = d.Get("username").(string)
	}

	if d.HasChange("password") {
		payload.Properties.Password = d.Get("password").(string)
	}

	if d.HasChange("password_wo_version") {
		woPassword, err := pluginsdk.GetWriteOnly(d, "password_wo", cty.String)
		if err != nil {
			return err
		}

		if !woPassword.IsNull() {
			payload.Properties.Password = woPassword.AsString()
		}
	}

	if _, err := client.CreateOrUpdate(ctx, jobCredentialId, *payload); err != nil {
		return fmt.Errorf("updating %s: %+v", jobCredentialId, err)
	}

	return resourceMsSqlJobCredentialRead(d, meta)
}
