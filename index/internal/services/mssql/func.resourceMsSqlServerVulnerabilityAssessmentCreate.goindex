package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/serversecurityalertpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/servervulnerabilityassessments"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceMsSqlServerVulnerabilityAssessmentCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).MSSQL.ServerVulnerabilityAssessmentsClient
	alertClient := meta.(*clients.Client).MSSQL.ServerSecurityAlertPoliciesClient
	ctx, cancel := timeouts.ForCreate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	alertId, err := parse.ServerSecurityAlertPolicyID(d.Get("server_security_alert_policy_id").(string))
	if err != nil {
		return err
	}

	serverId := commonids.NewSqlServerID(alertId.SubscriptionId, alertId.ResourceGroup, alertId.ServerName)

	alertResult, err := alertClient.Get(ctx, serverId)
	if err != nil {
		return fmt.Errorf("retrieving mssql server security alert policy: %+v", err)
	}

	model := alertResult.Model
	if model == nil {
		return fmt.Errorf("retrieving mssql server security alert policy %s: model was nil", serverId)
	}

	alertProps := model.Properties
	if alertProps == nil {
		return fmt.Errorf("retrieving mssql server security alert policy properties %s: properties was nil", serverId)
	}

	if alertProps.State != serversecurityalertpolicies.SecurityAlertsPolicyStateEnabled {
		return fmt.Errorf("mssql server security alert policy is not 'enabled'")
	}

	log.Printf("[INFO] preparing arguments for mssql server vulnerability assessment creation")

	id := parse.NewServerVulnerabilityAssessmentID(serverId.SubscriptionId, serverId.ResourceGroupName, serverId.ServerName, "default")

	payload := servervulnerabilityassessments.ServerVulnerabilityAssessment{}
	props := &servervulnerabilityassessments.ServerVulnerabilityAssessmentProperties{}

	props.StorageContainerPath = d.Get("storage_container_path").(string)

	if v, ok := d.GetOk("storage_account_access_key"); ok {
		props.StorageAccountAccessKey = pointer.To(v.(string))
	}

	if v, ok := d.GetOk("storage_container_sas_key"); ok {
		props.StorageContainerSasKey = pointer.To(v.(string))
	}

	recurringScanProps := servervulnerabilityassessments.VulnerabilityAssessmentRecurringScansProperties{}

	if v, ok := d.GetOk("recurring_scans"); ok {
		rs := v.([]interface{})

		if len(rs) != 0 {
			v := rs[0].(map[string]interface{})

			var enabled *bool
			if isEnabled, ok := v["enabled"]; ok {
				enabled = pointer.To(isEnabled.(bool))
			}
			recurringScanProps.IsEnabled = enabled

			var emailSubscriptionAdmins *bool
			if emailAdmins, ok := v["email_subscription_admins"]; ok {
				emailSubscriptionAdmins = pointer.To(emailAdmins.(bool))
			}
			recurringScanProps.EmailSubscriptionAdmins = emailSubscriptionAdmins

			var emails *[]string
			if _, ok := v["emails"]; ok {
				config := make([]string, 0)
				for _, email := range v["emails"].([]interface{}) {
					config = append(config, email.(string))
				}
				emails = pointer.To(config)
			}
			recurringScanProps.Emails = emails
		}
	}
	props.RecurringScans = pointer.To(recurringScanProps)

	payload.Properties = props

	result, err := client.CreateOrUpdate(ctx, serverId, payload)
	if err != nil || result.Model == nil || result.Model.Id == nil {
		return fmt.Errorf("creating mssql server vulnerability assessment %s : %v", id, err)
	}

	d.SetId(id.ID())

	return resourceMsSqlServerVulnerabilityAssessmentRead(d, meta)
}
