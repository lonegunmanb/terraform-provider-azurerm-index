package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v5.0/sql" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/servervulnerabilityassessments"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceMsSqlServerVulnerabilityAssessmentCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).MSSQL.ServerVulnerabilityAssessmentsClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	policyId, err := parse.ServerSecurityAlertPolicyID(d.Get("server_security_alert_policy_id").(string))
	if err != nil {
		return err
	}

	policyClient := meta.(*clients.Client).MSSQL.LegacyServerSecurityAlertPoliciesClient

	policy, err := policyClient.Get(ctx, policyId.ResourceGroup, policyId.ServerName)
	if err != nil {
		return fmt.Errorf("retrieving Security Alert Policy: %+v", err)
	}
	if policy.State != sql.SecurityAlertsPolicyStateEnabled {
		return fmt.Errorf("security alert policy is not enabled")
	}

	log.Printf("[INFO] preparing arguments for mssql server vulnerability assessment creation.")

	id := parse.NewServerVulnerabilityAssessmentID(policyId.SubscriptionId, policyId.ResourceGroup, policyId.ServerName, "default")

	storageContainerPath := d.Get("storage_container_path").(string)

	vulnerabilityAssessment := servervulnerabilityassessments.ServerVulnerabilityAssessment{
		Properties: &servervulnerabilityassessments.ServerVulnerabilityAssessmentProperties{
			StorageContainerPath: storageContainerPath,
		},
	}

	props := vulnerabilityAssessment.Properties

	if v, ok := d.GetOk("storage_account_access_key"); ok {
		props.StorageAccountAccessKey = utils.String(v.(string))
	}

	if v, ok := d.GetOk("storage_container_sas_key"); ok {
		props.StorageContainerSasKey = utils.String(v.(string))
	}

	if _, ok := d.GetOk("recurring_scans"); ok {
		props.RecurringScans = expandRecurringScans(d)
	}

	serverId := commonids.NewSqlServerID(id.SubscriptionId, id.ResourceGroup, id.ServerName)

	result, err := client.CreateOrUpdate(ctx, serverId, vulnerabilityAssessment)
	if err != nil {
		return fmt.Errorf("updating %s : %v", id, err)
	}

	if result.Model == nil || result.Model.Id == nil {
		return fmt.Errorf("reading %s", id)
	}

	d.SetId(id.ID())

	return resourceMsSqlServerVulnerabilityAssessmentRead(d, meta)
}
