package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2015-10-31/webhook"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceAutomationWebhookCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Automation.WebhookClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := webhook.NewWebHookID(subscriptionId, d.Get("resource_group_name").(string), d.Get("automation_account_name").(string), d.Get("name").(string))
	expiryTime := d.Get("expiry_time").(string)
	enabled := d.Get("enabled").(bool)
	runbookName := d.Get("runbook_name").(string)
	runOn := d.Get("run_on_worker_group").(string)
	webhookParameters := expandStringInterfaceMap(d.Get("parameters").(map[string]interface{}))

	if d.IsNewResource() {
		resp, err := client.Get(ctx, id)
		if err != nil {
			if !response.WasNotFound(resp.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}
		}

		if resp.Model != nil && resp.Model.Id != nil && *resp.Model.Id != "" {
			return tf.ImportAsExistsError("azurerm_automation_webhook", *resp.Model.Id)
		}
	}

	parameters := webhook.WebhookCreateOrUpdateParameters{
		Name: id.WebHookName,
		Properties: webhook.WebhookCreateOrUpdateProperties{
			IsEnabled:  utils.Bool(enabled),
			ExpiryTime: &expiryTime,
			Parameters: &webhookParameters,
			Runbook: &webhook.RunbookAssociationProperty{
				Name: utils.String(runbookName),
			},
			RunOn: utils.String(runOn),
		},
	}

	uri := ""
	if d.IsNewResource() {
		if v := d.Get("uri"); v != nil && v.(string) != "" {
			uri = v.(string)
			parameters.Properties.Uri = &uri
		} else {
			automationAccountId := webhook.NewAutomationAccountID(subscriptionId, id.ResourceGroupName, id.AutomationAccountName)
			resp, err := client.GenerateUri(ctx, automationAccountId)
			if err != nil {
				return fmt.Errorf("unable to generate URI for %s: %+v", id, err)
			}

			parameters.Properties.Uri = resp.Model
			if resp.Model != nil {
				uri = *resp.Model
			}
		}
	} else {
		if d.Get("uri") != nil {
			parameters.Properties.Uri = utils.String(d.Get("uri").(string))
		}
	}

	if _, err := client.CreateOrUpdate(ctx, id, parameters); err != nil {
		return fmt.Errorf("creating %s: %+v", id, err)
	}

	d.SetId(id.ID())
	// URI is not present in the response from Azure, so it's set now, as there was no error returned
	if uri != "" {
		d.Set("uri", uri)
	}
	return resourceAutomationWebhookRead(d, meta)
}
