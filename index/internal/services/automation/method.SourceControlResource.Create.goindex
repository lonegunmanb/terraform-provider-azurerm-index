package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/sourcecontrol"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (m SourceControlResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, meta sdk.ResourceMetaData) error {
			client := meta.Client.Automation.SourceControl

			var model SourceControlModel
			if err := meta.Decode(&model); err != nil {
				return err
			}

			subscriptionID := meta.Client.Account.SubscriptionId
			accountID, _ := sourcecontrol.ParseAutomationAccountID(model.AutomationAccountID)
			id := sourcecontrol.NewSourceControlID(subscriptionID, accountID.ResourceGroupName, accountID.AutomationAccountName, model.Name)
			existing, err := client.Get(ctx, id)
			if !response.WasNotFound(existing.HttpResponse) {
				if err != nil {
					return fmt.Errorf("retrieving %s: %v", id, err)
				}
				return meta.ResourceRequiresImport(m.ResourceType(), id)
			}

			sourceType := sourcecontrol.SourceType(model.SourceType)

			var param sourcecontrol.SourceControlCreateOrUpdateParameters
			param.Properties = sourcecontrol.SourceControlCreateOrUpdateProperties{
				AutoSync:       utils.Bool(model.AutoSync),
				Branch:         utils.String(model.Branch),
				Description:    utils.String(model.Description),
				FolderPath:     utils.String(model.FolderPath),
				PublishRunbook: utils.Bool(model.PublishRunbook),
				RepoURL:        utils.String(model.RepoURL),
				SourceType:     &sourceType,
			}

			param.Properties.SecurityToken = &sourcecontrol.SourceControlSecurityTokenProperties{}
			if len(model.SecurityToken) > 0 {
				token := model.SecurityToken[0]
				tokenType := sourcecontrol.TokenType(token.TokenType)
				param.Properties.SecurityToken.TokenType = &tokenType
				param.Properties.SecurityToken.AccessToken = utils.String(token.Token)
				if token.RefreshToken != "" {
					param.Properties.SecurityToken.RefreshToken = utils.String(token.RefreshToken)
				}
			}

			_, err = client.CreateOrUpdate(ctx, id, param)
			if err != nil {
				return fmt.Errorf("creating %s: %v", id, err)
			}
			meta.SetID(id)
			return nil
		},
	}
}
