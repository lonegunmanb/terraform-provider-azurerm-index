package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/sourcecontrol"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (m SourceControlResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, meta sdk.ResourceMetaData) (err error) {
			client := meta.Client.Automation.SourceControl

			id, err := sourcecontrol.ParseSourceControlID(meta.ResourceData.Id())
			if err != nil {
				return err
			}

			var model SourceControlModel
			if err = meta.Decode(&model); err != nil {
				return fmt.Errorf("decoding err: %+v", err)
			}

			var upd sourcecontrol.SourceControlUpdateParameters
			prop := &sourcecontrol.SourceControlUpdateProperties{}
			if meta.ResourceData.HasChange("branch") {
				prop.Branch = utils.String(model.Branch)
			}
			if meta.ResourceData.HasChange("folder_path") {
				prop.FolderPath = utils.String(model.FolderPath)
			}
			if meta.ResourceData.HasChange("automatic_sync") {
				prop.AutoSync = utils.Bool(model.AutoSync)
			}
			if meta.ResourceData.HasChange("folder_path") {
				prop.FolderPath = utils.String(model.FolderPath)
			}
			if meta.ResourceData.HasChange("publish_runbook_enabled") {
				prop.PublishRunbook = utils.Bool(model.PublishRunbook)
			}
			if meta.ResourceData.HasChange("description") {
				prop.Description = utils.String(model.Description)
			}

			tokenType := sourcecontrol.TokenType(model.SecurityToken[0].TokenType)
			if meta.ResourceData.HasChange("security") {
				prop.SecurityToken = &sourcecontrol.SourceControlSecurityTokenProperties{
					AccessToken:  utils.String(model.SecurityToken[0].TokenType),
					RefreshToken: utils.String(model.SecurityToken[0].RefreshToken),
					TokenType:    &tokenType,
				}
			}
			upd.Properties = prop
			if _, err = client.Update(ctx, *id, upd); err != nil {
				return fmt.Errorf("updating %s: %v", *id, err)
			}

			return nil
		},
	}
}
