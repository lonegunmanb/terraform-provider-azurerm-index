package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/automationaccount"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/connectiontype"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (m AutomationConnectionTypeResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, meta sdk.ResourceMetaData) error {
			client := meta.Client.Automation.ConnectionType
			connClient := meta.Client.Automation.AutomationAccount

			var model AutomationConnectionTypeModel
			if err := meta.Decode(&model); err != nil {
				return err
			}
			subscriptionID := meta.Client.Account.SubscriptionId

			accountID := automationaccount.NewAutomationAccountID(subscriptionID, model.ResourceGroup, model.AutomationAccountName)
			account, err := connClient.Get(ctx, accountID)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", accountID, err)
			}
			if response.WasNotFound(account.HttpResponse) {
				return fmt.Errorf("%s was not found", accountID)
			}

			id := connectiontype.NewConnectionTypeID(accountID.SubscriptionId, model.ResourceGroup, model.AutomationAccountName, model.Name)
			existing, err := client.Get(ctx, id)
			if !response.WasNotFound(existing.HttpResponse) {
				if err != nil {
					return fmt.Errorf("retrieving %s: %v", id, err)
				}
				return meta.ResourceRequiresImport(m.ResourceType(), id)
			}
			param := connectiontype.ConnectionTypeCreateOrUpdateParameters{
				Name: model.Name,
				Properties: connectiontype.ConnectionTypeCreateOrUpdateProperties{
					IsGlobal:         pointer.To(model.IsGlobal),
					FieldDefinitions: map[string]connectiontype.FieldDefinition{},
				},
			}
			for _, field := range model.Field {
				param.Properties.FieldDefinitions[field.Name] = connectiontype.FieldDefinition{
					IsEncrypted: pointer.To(field.IsEncrypted),
					IsOptional:  pointer.To(field.IsOptional),
					Type:        field.Type,
				}
			}
			_, err = client.CreateOrUpdate(ctx, id, param)
			if err != nil {
				return fmt.Errorf("creating %s: %v", id, err)
			}

			meta.SetID(id)
			return nil
		},
	}
}
