package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2019-06-01/agentregistrationinformation"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/automationaccount"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/validate"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func expandEncryption(input []interface{}) (*automationaccount.EncryptionProperties, error) {
	if len(input) == 0 {
		return &automationaccount.EncryptionProperties{
			KeySource: pointer.To(automationaccount.EncryptionKeySourceTypeMicrosoftPointAutomation),
		}, nil
	}

	v := input[0].(map[string]interface{})

	var id interface{}
	id, ok := v["user_assigned_identity_id"].(string)
	if !ok {
		return nil, fmt.Errorf("read encryption user identity id error")
	}
	prop := &automationaccount.EncryptionProperties{
		KeySource: pointer.To(automationaccount.EncryptionKeySourceTypeMicrosoftPointKeyvault),
	}
	if id != "" {
		prop.Identity = &automationaccount.EncryptionPropertiesIdentity{
			UserAssignedIdentity: &id,
		}
	}

	if keyIdStr := v["key_vault_key_id"].(string); keyIdStr != "" {
		keyId, err := keyVaultParse.ParseOptionallyVersionedNestedItemID(keyIdStr)
		if err != nil {
			return nil, err
		}
		prop.KeyVaultProperties = &automationaccount.KeyVaultProperties{
			KeyName:     pointer.To(keyId.Name),
			KeyVersion:  pointer.To(keyId.Version),
			KeyvaultUri: pointer.To(keyId.KeyVaultBaseUrl),
		}
	}
	return prop, nil
}
