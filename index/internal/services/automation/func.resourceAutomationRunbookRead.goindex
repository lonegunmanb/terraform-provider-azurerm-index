package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/gofrs/uuid"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/jobschedule"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/runbook"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/runbookdraft"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/helper"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceAutomationRunbookRead(d *pluginsdk.ResourceData, meta interface{}) error {
	autoCli := meta.(*clients.Client).Automation
	client := autoCli.Runbook
	jsClient := autoCli.JobSchedule
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := runbook.ParseRunbookID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}

		return fmt.Errorf("making Read request on AzureRM Automation Runbook %q (Account %q / Resource Group %q): %+v", id.RunbookName, id.AutomationAccountName, id.ResourceGroupName, err)
	}

	d.Set("name", id.RunbookName)
	d.Set("resource_group_name", id.ResourceGroupName)
	model := resp.Model
	if location := model.Location; location != nil {
		d.Set("location", azure.NormalizeLocation(*location))
	}

	d.Set("automation_account_name", id.AutomationAccountName)
	if props := model.Properties; props != nil {
		d.Set("log_verbose", props.LogVerbose)
		d.Set("log_progress", props.LogProgress)
		d.Set("runbook_type", string(pointer.From(props.RunbookType)))
		d.Set("description", props.Description)
		d.Set("log_activity_trace_level", props.LogActivityTrace)
	}

	// GetContent need to use preview version client RunbookClientHack
	// move to stable Runbook once this issue fixed: https://github.com/Azure/azure-sdk-for-go/issues/17591#issuecomment-1233676539
	contentResp, err := autoCli.Runbook.GetContent(ctx, *id)
	if err != nil {
		if response.WasNotFound(contentResp.HttpResponse) {
			d.Set("content", "")
		} else {
			return fmt.Errorf("retrieving content for Automation Runbook %s: %+v", id, err)
		}
	}

	if v := contentResp.Model; v != nil && *v != nil {
		d.Set("content", string(*v))
	}

	jsMap := make(map[uuid.UUID]jobschedule.JobScheduleProperties)
	automationAccountId := jobschedule.NewAutomationAccountID(id.SubscriptionId, id.ResourceGroupName, id.AutomationAccountName)

	filter := fmt.Sprintf("properties/runbook/name eq '%s'", id.RunbookName)
	jsIterator, err := jsClient.ListByAutomationAccount(ctx, automationAccountId, jobschedule.ListByAutomationAccountOperationOptions{Filter: &filter})
	if err != nil {
		return fmt.Errorf("loading Automation Account %q Job Schedule List: %+v", id.AutomationAccountName, err)
	}
	for _, item := range pointer.From(jsIterator.Model) {
		if itemProps := item.Properties; itemProps != nil {
			if itemProps.JobScheduleId == nil || *itemProps.JobScheduleId == "" {
				return fmt.Errorf("job schedule Id is nil or empty listed by Automation Account %q Job Schedule List: %+v", id.AutomationAccountName, err)
			}
			jsId, err := uuid.FromString(*itemProps.JobScheduleId)
			if err != nil {
				return fmt.Errorf("parsing job schedule Id listed by Automation Account %q Job Schedule List: %v", id.AutomationAccountName, err)
			}
			// get job schedule from GET API, `ListByAutomationAccountComplete` lost parameters
			jobscheduleID, err := jobschedule.ParseJobScheduleID(pointer.From(item.Id))
			if err != nil {
				return fmt.Errorf("parsing job schedule Id listed by Automation Account %q Job Schedule List: %v", id.AutomationAccountName, err)
			}
			jsResult, err := jsClient.Get(ctx, *jobscheduleID)
			if err != nil {
				return fmt.Errorf("retrieving job schedule by %s: %v", *jobscheduleID, err)
			}
			if jsResult.Model != nil && jsResult.Model.Properties != nil {
				jsMap[jsId] = *jsResult.Model.Properties
			}
		}
	}

	jobSchedule := helper.FlattenAutomationJobSchedule(jsMap)
	if err := d.Set("job_schedule", jobSchedule); err != nil {
		return fmt.Errorf("setting `job_schedule`: %+v", err)
	}

	if err := tags.FlattenAndSet(d, model.Tags); err != nil {
		return err
	}

	return nil
}
