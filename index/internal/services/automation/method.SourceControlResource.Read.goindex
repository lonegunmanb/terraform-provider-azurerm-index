package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/sourcecontrol"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (m SourceControlResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, meta sdk.ResourceMetaData) error {
			id, err := sourcecontrol.ParseSourceControlID(meta.ResourceData.Id())
			if err != nil {
				return err
			}

			client := meta.Client.Automation.SourceControl
			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return meta.MarkAsGone(id)
				}
				return err
			}

			if resp.Model == nil {
				return fmt.Errorf("retrieving %s: got nil model", *id)
			}

			var output SourceControlModel
			if err := meta.Decode(&output); err != nil {
				return err
			}
			output.AutomationAccountID = sourcecontrol.NewAutomationAccountID(id.SubscriptionId, id.ResourceGroupName, id.AutomationAccountName).ID()
			output.Name = id.SourceControlName

			if props := resp.Model.Properties; props != nil {
				output.RepoURL = pointer.From(props.RepoURL)
				output.Branch = pointer.From(props.Branch)
				output.FolderPath = pointer.From(props.FolderPath)
				output.AutoSync = pointer.From(props.AutoSync)
				output.PublishRunbook = pointer.From(props.PublishRunbook)
				sourceType := ""
				if props.SourceType != nil {
					sourceType = string(*props.SourceType)
				}
				output.SourceType = sourceType
				output.Description = pointer.From(props.Description)
			}

			return meta.Encode(&output)
		},
	}
}
