package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2019-06-01/agentregistrationinformation"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/automationaccount"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/validate"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenEncryption(encryption *automationaccount.EncryptionProperties) []interface{} {
	if encryption == nil || encryption.KeySource == nil || *encryption.KeySource != automationaccount.EncryptionKeySourceTypeMicrosoftPointKeyvault {
		return []interface{}{}
	}

	keyVaultKeyId := ""
	userAssignedIdentityId := ""

	if keyProp := encryption.KeyVaultProperties; keyProp != nil {
		keyId, err := keyVaultParse.NewNestedItemID(*keyProp.KeyvaultUri, keyVaultParse.NestedItemTypeKey, *keyProp.KeyName, *keyProp.KeyVersion)
		if err == nil {
			keyVaultKeyId = keyId.ID()
		}
	}

	if encryption.Identity != nil && encryption.Identity.UserAssignedIdentity != nil {
		userAssignedIdentityIdRaw := (*encryption.Identity.UserAssignedIdentity).(string)
		if userAssignedIdentityIdRaw != "" {
			uaiId, err := commonids.ParseUserAssignedIdentityIDInsensitively(userAssignedIdentityIdRaw)
			if err == nil {
				userAssignedIdentityId = uaiId.ID()
			}
		}
	}
	flattened := []interface{}{
		map[string]interface{}{
			"key_vault_key_id":          keyVaultKeyId,
			"user_assigned_identity_id": userAssignedIdentityId,
		},
	}

	if !features.FivePointOh() {
		flattened[0].(map[string]interface{})["key_source"] = ""
	}

	return flattened
}
