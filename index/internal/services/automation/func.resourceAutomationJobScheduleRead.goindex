package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/gofrs/uuid"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/jobschedule"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/runbook"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/schedule"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceAutomationJobScheduleRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Automation.JobSchedule
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	// the jobSchedule ID may be updated by Runbook, so need to get the real id by list API
	tfID, err := commonids.ParseCompositeResourceID(d.Id(), &schedule.ScheduleId{}, &runbook.RunbookId{})
	if err != nil {
		return err
	}

	js, err := GetJobScheduleFromTFID(ctx, client, tfID)
	if err != nil {
		return err
	}
	if js == nil {
		d.SetId("")
		return nil
	}

	id, err := jobschedule.ParseJobScheduleID(pointer.From(js.Id))
	if err != nil {
		return err
	}

	d.Set("resource_manager_id", id.ID())
	d.Set("job_schedule_id", id.JobScheduleId)
	d.Set("resource_group_name", id.ResourceGroupName)
	d.Set("automation_account_name", id.AutomationAccountName)

	// The response from the list API has no parameter field, so use Get API to get the JobSchedule
	resp, err := client.Get(ctx, *id)
	if err != nil {
		return err
	}

	if resp.Model != nil && resp.Model.Properties != nil {
		props := resp.Model.Properties
		d.Set("runbook_name", props.Runbook.Name)
		d.Set("schedule_name", props.Schedule.Name)

		if v := props.RunOn; v != nil {
			d.Set("run_on", v)
		}

		if props.Parameters != nil {
			if v := *props.Parameters; v != nil {
				jsParameters := make(map[string]interface{})
				for key, value := range v {
					jsParameters[strings.ToLower(key)] = value
				}
				d.Set("parameters", jsParameters)
			}
		}
	}

	return nil
}
