package github.com/hashicorp/terraform-provider-azurerm/internal/services/automation
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/gofrs/uuid"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/jobschedule"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/runbook"
	"github.com/hashicorp/go-azure-sdk/resource-manager/automation/2023-11-01/schedule"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/automation/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceAutomationJobScheduleCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Automation.JobSchedule
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	log.Printf("[INFO] preparing arguments for AzureRM Automation Job Schedule creation.")

	resourceGroup := d.Get("resource_group_name").(string)
	accountName := d.Get("automation_account_name").(string)
	runbookName := d.Get("runbook_name").(string)
	scheduleName := d.Get("schedule_name").(string)

	jobScheduleUUID, err := uuid.NewV4()
	if err != nil {
		return err
	}
	if jobScheduleID, ok := d.GetOk("job_schedule_id"); ok {
		jobScheduleUUID = uuid.FromStringOrNil(jobScheduleID.(string))
	}

	scheduleID := schedule.NewScheduleID(subscriptionId, resourceGroup, accountName, scheduleName)
	runbookID := runbook.NewRunbookID(subscriptionId, resourceGroup, accountName, runbookName)
	id := jobschedule.NewJobScheduleID(subscriptionId, resourceGroup, accountName, jobScheduleUUID.String())

	tfID := &commonids.CompositeResourceID[*schedule.ScheduleId, *runbook.RunbookId]{
		First:  &scheduleID,
		Second: &runbookID,
	}

	if d.IsNewResource() {
		existing, err := GetJobScheduleFromTFID(ctx, client, tfID)
		if err != nil {
			return fmt.Errorf("checking for presence of existing %s: %s", id, err)
		}

		if existing != nil {
			return tf.ImportAsExistsError("azurerm_automation_job_schedule", tfID.ID())
		}
	}

	parameters := jobschedule.JobScheduleCreateParameters{
		Properties: jobschedule.JobScheduleCreateProperties{
			Schedule: jobschedule.ScheduleAssociationProperty{
				Name: &scheduleName,
			},
			Runbook: jobschedule.RunbookAssociationProperty{
				Name: &runbookName,
			},
		},
	}

	// parameters to be passed into the runbook
	if v, ok := d.GetOk("parameters"); ok {
		jsParameters := make(map[string]string)
		for k, v := range v.(map[string]interface{}) {
			value := v.(string)
			jsParameters[k] = value
		}
		parameters.Properties.Parameters = &jsParameters
	}

	if v, ok := d.GetOk("run_on"); ok {
		value := v.(string)
		parameters.Properties.RunOn = &value
	}

	if _, err := client.Create(ctx, id, parameters); err != nil {
		return err
	}

	d.SetId(tfID.ID())
	d.Set("resource_manager_id", id.ID())

	return resourceAutomationJobScheduleRead(d, meta)
}
