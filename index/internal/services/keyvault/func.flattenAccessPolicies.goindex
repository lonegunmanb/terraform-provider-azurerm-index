package github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault
import (
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/keyvault/2023-02-01/vaults"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenAccessPolicies(input *[]vaults.AccessPolicyEntry) []map[string]interface{} {
	result := make([]map[string]interface{}, 0)

	if input == nil {
		return result
	}

	for _, policy := range *input {
		applicationId := ""
		if policy.ApplicationId != nil {
			applicationId = *policy.ApplicationId
		}

		certs := flattenCertificatePermissions(policy.Permissions.Certificates)
		keys := flattenKeyPermissions(policy.Permissions.Keys)
		secrets := flattenSecretPermissions(policy.Permissions.Secrets)
		storage := flattenStoragePermissions(policy.Permissions.Storage)
		result = append(result, map[string]interface{}{
			"application_id":          applicationId,
			"certificate_permissions": certs,
			"key_permissions":         keys,
			"object_id":               policy.ObjectId,
			"secret_permissions":      secrets,
			"storage_permissions":     storage,
			"tenant_id":               policy.TenantId,
		})
	}

	return result
}
