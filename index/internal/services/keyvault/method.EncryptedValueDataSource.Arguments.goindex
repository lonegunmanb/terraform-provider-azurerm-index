package github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault
import (
	"context"
	"crypto/sha1"
	"encoding/base64"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/keyvault/7.4/keyvault"
)
func (EncryptedValueDataSource) Arguments() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"key_vault_key_id": {
			Type:         schema.TypeString,
			Required:     true,
			ValidateFunc: validate.NestedItemId,
		},
		"algorithm": {
			Type:     schema.TypeString,
			Required: true,
			ValidateFunc: validation.StringInSlice([]string{
				string(keyvault.JSONWebKeyEncryptionAlgorithmRSA15),
				string(keyvault.JSONWebKeyEncryptionAlgorithmRSAOAEP),
				string(keyvault.JSONWebKeyEncryptionAlgorithmRSAOAEP256),
			}, false),
		},
		"encrypted_data": {
			Type:      schema.TypeString,
			Optional:  true,
			Sensitive: true,
		},
		"plain_text_value": {
			Type:      schema.TypeString,
			Optional:  true,
			Sensitive: true,
		},
	}
}
