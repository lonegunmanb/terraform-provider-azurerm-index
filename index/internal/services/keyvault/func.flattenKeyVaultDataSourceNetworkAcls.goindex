package github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/keyvault/2023-02-01/vaults"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenKeyVaultDataSourceNetworkAcls(input *vaults.NetworkRuleSet) []interface{} {
	output := make([]interface{}, 0)

	if input != nil {
		bypass := ""
		if input.Bypass != nil {
			bypass = string(*input.Bypass)
		}

		defaultAction := ""
		if input.DefaultAction != nil {
			defaultAction = string(*input.DefaultAction)
		}

		ipRules := make([]interface{}, 0)
		if input.IPRules != nil {
			for _, v := range *input.IPRules {
				ipRules = append(ipRules, v.Value)
			}
		}

		virtualNetworkRules := make([]interface{}, 0)
		if input.VirtualNetworkRules != nil {
			for _, v := range *input.VirtualNetworkRules {
				virtualNetworkRules = append(virtualNetworkRules, v.Id)
			}
		}

		output = append(output, map[string]interface{}{
			"bypass":                     bypass,
			"default_action":             defaultAction,
			"ip_rules":                   ipRules,
			"virtual_network_subnet_ids": virtualNetworkRules,
		})
	}

	return output
}
