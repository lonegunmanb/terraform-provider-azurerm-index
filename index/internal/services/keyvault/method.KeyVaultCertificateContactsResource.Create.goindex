package github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/keyvault/7.4/keyvault"
)
func (r KeyVaultCertificateContactsResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			vaultClient := metadata.Client.KeyVault
			client := metadata.Client.KeyVault.ManagementClient
			var state KeyVaultCertificateContactsResourceModel
			if err := metadata.Decode(&state); err != nil {
				return err
			}

			keyVaultId, err := commonids.ParseKeyVaultID(state.KeyVaultId)
			if err != nil {
				return fmt.Errorf("parsing `key_vault_id`, %+v", err)
			}

			keyVaultBaseUri, err := vaultClient.BaseUriForKeyVault(ctx, *keyVaultId)
			if err != nil {
				return fmt.Errorf("looking up Base URI for Key Vault Certificate Contacts from %s: %+v", *keyVaultId, err)
			}

			id, err := parse.NewCertificateContactsID(*keyVaultBaseUri)
			if err != nil {
				return err
			}

			locks.ByID(id.ID())
			defer locks.UnlockByID(id.ID())

			existing, err := client.GetCertificateContacts(ctx, *keyVaultBaseUri)
			if err != nil {
				if !utils.ResponseWasNotFound(existing.Response) {
					return fmt.Errorf("checking for presence of existing Certificate Contacts (Key Vault %q): %s", *keyVaultBaseUri, err)
				}
			}

			if !utils.ResponseWasNotFound(existing.Response) {
				if existing.ContactList != nil && len(*existing.ContactList) != 0 {
					return tf.ImportAsExistsError(r.ResourceType(), id.ID())
				}
			}

			contacts := keyvault.Contacts{
				ContactList: expandKeyVaultCertificateContactsContact(state.Contact),
			}

			if len(*contacts.ContactList) == 0 {
				if _, err := client.DeleteCertificateContacts(ctx, id.KeyVaultBaseUrl); err != nil {
					return fmt.Errorf("removing Key Vault Certificate Contacts %s: %+v", id, err)
				}
			} else {
				if _, err := client.SetCertificateContacts(ctx, *keyVaultBaseUri, contacts); err != nil {
					return fmt.Errorf("creating Key Vault Certificate Contacts %s: %+v", id, err)
				}
			}

			metadata.SetID(id)
			return nil
		},
		Timeout: 30 * time.Minute,
	}
}
