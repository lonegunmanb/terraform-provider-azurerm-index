package github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/keyvault/2023-02-01/vaults"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	commonValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	dataplane "github.com/jackofallops/kermit/sdk/keyvault/7.4/keyvault"
)
func getSoftDeletedStateForKeyVault(ctx context.Context, client *vaults.VaultsClient, deletedVaultId vaults.DeletedVaultId) (*keyVaultDeletionStatus, error) {
	resp, err := client.GetDeleted(ctx, deletedVaultId)
	if err != nil {
		return nil, err
	}

	if model := resp.Model; model != nil {
		// the logic is this way because the GetDeleted call will return an existing key vault
		// that is not soft deleted, but the Deleted Vault properties will be nil
		result := keyVaultDeletionStatus{}
		if props := model.Properties; props != nil {
			if props.DeletionDate != nil {
				t, err := props.GetDeletionDateAsTime()
				if err != nil {
					return nil, fmt.Errorf("parsing `DeletionDate`: %+v", err)
				}
				result.deleteDate = t.Format(time.RFC3339)
			}
			if props.ScheduledPurgeDate != nil {
				t, err := props.GetScheduledPurgeDateAsTime()
				if err != nil {
					return nil, fmt.Errorf("parsing `ScheduledPurgeDate`: %+v", err)
				}
				result.purgeDate = t.Format(time.RFC3339)
			}
		}

		if result.deleteDate != "" && result.purgeDate != "" {
			return &result, nil
		}
	}

	// otherwise we've found an existing key vault that is not soft deleted
	return nil, nil
}
