package github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/keyvault/2023-02-01/vaults"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	commonValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	dataplane "github.com/jackofallops/kermit/sdk/keyvault/7.4/keyvault"
)
func flattenKeyVaultNetworkAcls(input *vaults.NetworkRuleSet) []interface{} {
	bypass := string(vaults.NetworkRuleBypassOptionsAzureServices)
	defaultAction := string(vaults.NetworkRuleActionAllow)
	ipRules := make([]interface{}, 0)
	virtualNetworkSubnetIds := make([]interface{}, 0)

	if input != nil {
		if input.Bypass != nil {
			bypass = string(*input.Bypass)
		}
		if input.DefaultAction != nil {
			defaultAction = string(*input.DefaultAction)
		}
		if input.IPRules != nil {
			for _, v := range *input.IPRules {
				ipRules = append(ipRules, v.Value)
			}
		}
		if input.VirtualNetworkRules != nil {
			for _, v := range *input.VirtualNetworkRules {
				subnetIdRaw := v.Id
				subnetId, err := commonids.ParseSubnetIDInsensitively(subnetIdRaw)
				if err == nil {
					subnetIdRaw = subnetId.ID()
				}
				virtualNetworkSubnetIds = append(virtualNetworkSubnetIds, subnetIdRaw)
			}
		}
	}

	return []interface{}{
		map[string]interface{}{
			"bypass":                     bypass,
			"default_action":             defaultAction,
			"ip_rules":                   pluginsdk.NewSet(pluginsdk.HashString, ipRules),
			"virtual_network_subnet_ids": pluginsdk.NewSet(pluginsdk.HashString, virtualNetworkSubnetIds),
		},
	}
}
