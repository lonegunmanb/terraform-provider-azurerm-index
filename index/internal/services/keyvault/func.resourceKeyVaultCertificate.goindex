package github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault
import (
	"context"
	"crypto/x509"
	"encoding/base64"
	"encoding/hex"
	"fmt"
	"log"
	"math"
	"strings"
	"time"

	"github.com/Azure/go-autorest/autorest"
	"github.com/google/go-cmp/cmp"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/keyvault/7.4/keyvault"
)
func resourceKeyVaultCertificate() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		// TODO: support Updating additional properties once we have more information about what can be updated
		Create: resourceKeyVaultCertificateCreate,
		Read:   resourceKeyVaultCertificateRead,
		Delete: resourceKeyVaultCertificateDelete,
		Update: resourceKeyVaultCertificateUpdate,

		Importer: pluginsdk.ImporterValidatingResourceIdThen(func(id string) error {
			_, err := parse.ParseNestedItemID(id)
			return err
		}, nestedItemResourceImporter),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(60 * time.Minute),
			// TODO: Change this back to 5min, once https://github.com/hashicorp/terraform-provider-azurerm/issues/11059 is addressed.
			Read:   pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: keyVaultValidate.NestedItemName,
			},

			"key_vault_id": commonschema.ResourceIDReferenceRequiredForceNew(&commonids.KeyVaultId{}),

			"certificate": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				AtLeastOneOf: []string{
					"certificate_policy",
					"certificate",
				},
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"contents": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							Sensitive:    true,
							ValidateFunc: validation.StringIsNotEmpty,
						},
						"password": {
							Type:      pluginsdk.TypeString,
							Optional:  true,
							Sensitive: true,
						},
					},
				},
			},

			"certificate_policy": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				Computed: true,
				AtLeastOneOf: []string{
					"certificate_policy",
					"certificate",
				},
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"issuer_parameters": {
							Type:     pluginsdk.TypeList,
							Required: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"name": {
										Type:     pluginsdk.TypeString,
										Required: true,
									},
								},
							},
						},
						"key_properties": {
							Type:     pluginsdk.TypeList,
							Required: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"curve": {
										Type:     pluginsdk.TypeString,
										Optional: true,
										Computed: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(keyvault.JSONWebKeyCurveNameP256),
											string(keyvault.JSONWebKeyCurveNameP256K),
											string(keyvault.JSONWebKeyCurveNameP384),
											string(keyvault.JSONWebKeyCurveNameP521),
										}, false),
									},
									"exportable": {
										Type:     pluginsdk.TypeBool,
										Required: true,
									},
									"key_size": {
										Type:     pluginsdk.TypeInt,
										Optional: true,
										Computed: true,
										ValidateFunc: validation.IntInSlice([]int{
											256,
											384,
											521,
											2048,
											3072,
											4096,
										}),
									},
									"key_type": {
										Type:     pluginsdk.TypeString,
										Required: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(keyvault.JSONWebKeyTypeEC),
											string(keyvault.JSONWebKeyTypeECHSM),
											string(keyvault.JSONWebKeyTypeRSA),
											string(keyvault.JSONWebKeyTypeRSAHSM),
											string(keyvault.JSONWebKeyTypeOct),
										}, false),
									},
									"reuse_key": {
										Type:     pluginsdk.TypeBool,
										Required: true,
									},
								},
							},
						},
						"lifetime_action": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"action": {
										Type:     pluginsdk.TypeList,
										Required: true,
										MaxItems: 1,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"action_type": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(keyvault.CertificatePolicyActionAutoRenew),
														string(keyvault.CertificatePolicyActionEmailContacts),
													}, false),
												},
											},
										},
									},
									// lintignore:XS003
									"trigger": {
										Type:     pluginsdk.TypeList,
										Required: true,
										MaxItems: 1,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"days_before_expiry": {
													Type:     pluginsdk.TypeInt,
													Optional: true,
												},
												"lifetime_percentage": {
													Type:     pluginsdk.TypeInt,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
						"secret_properties": {
							Type:     pluginsdk.TypeList,
							Required: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"content_type": {
										Type:     pluginsdk.TypeString,
										Required: true,
									},
								},
							},
						},

						"x509_certificate_properties": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Computed: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"extended_key_usage": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Computed: true,
										Elem: &pluginsdk.Schema{
											Type:         pluginsdk.TypeString,
											ValidateFunc: validation.StringIsNotEmpty,
										},
									},
									"key_usage": {
										Type:     pluginsdk.TypeSet,
										Required: true,
										Elem: &pluginsdk.Schema{
											Type: pluginsdk.TypeString,
											ValidateFunc: validation.StringInSlice([]string{
												string(keyvault.KeyUsageTypeCRLSign),
												string(keyvault.KeyUsageTypeDataEncipherment),
												string(keyvault.KeyUsageTypeDecipherOnly),
												string(keyvault.KeyUsageTypeDigitalSignature),
												string(keyvault.KeyUsageTypeEncipherOnly),
												string(keyvault.KeyUsageTypeKeyAgreement),
												string(keyvault.KeyUsageTypeKeyCertSign),
												string(keyvault.KeyUsageTypeKeyEncipherment),
												string(keyvault.KeyUsageTypeNonRepudiation),
											}, false),
										},
									},
									"subject": {
										Type:     pluginsdk.TypeString,
										Required: true,
									},
									"subject_alternative_names": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Computed: true,
										MaxItems: 1,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"emails": {
													Type:     pluginsdk.TypeSet,
													Optional: true,
													Elem: &pluginsdk.Schema{
														Type: pluginsdk.TypeString,
													},
													Set: pluginsdk.HashString,
													AtLeastOneOf: []string{
														"certificate_policy.0.x509_certificate_properties.0.subject_alternative_names.0.emails",
														"certificate_policy.0.x509_certificate_properties.0.subject_alternative_names.0.dns_names",
														"certificate_policy.0.x509_certificate_properties.0.subject_alternative_names.0.upns",
													},
												},
												"dns_names": {
													Type:     pluginsdk.TypeSet,
													Optional: true,
													Elem: &pluginsdk.Schema{
														Type: pluginsdk.TypeString,
													},
													Set: pluginsdk.HashString,
													AtLeastOneOf: []string{
														"certificate_policy.0.x509_certificate_properties.0.subject_alternative_names.0.emails",
														"certificate_policy.0.x509_certificate_properties.0.subject_alternative_names.0.dns_names",
														"certificate_policy.0.x509_certificate_properties.0.subject_alternative_names.0.upns",
													},
												},
												"upns": {
													Type:     pluginsdk.TypeSet,
													Optional: true,
													Elem: &pluginsdk.Schema{
														Type: pluginsdk.TypeString,
													},
													Set: pluginsdk.HashString,
													AtLeastOneOf: []string{
														"certificate_policy.0.x509_certificate_properties.0.subject_alternative_names.0.emails",
														"certificate_policy.0.x509_certificate_properties.0.subject_alternative_names.0.dns_names",
														"certificate_policy.0.x509_certificate_properties.0.subject_alternative_names.0.upns",
													},
												},
											},
										},
									},
									"validity_in_months": {
										Type:     pluginsdk.TypeInt,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			// Computed
			"certificate_attribute": {
				Type:     pluginsdk.TypeList,
				Computed: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"created": {
							Type:     pluginsdk.TypeString,
							Computed: true,
						},

						"enabled": {
							Type:     pluginsdk.TypeBool,
							Computed: true,
						},

						"expires": {
							Type:     pluginsdk.TypeString,
							Computed: true,
						},

						"not_before": {
							Type:     pluginsdk.TypeString,
							Computed: true,
						},

						"recovery_level": {
							Type:     pluginsdk.TypeString,
							Computed: true,
						},

						"updated": {
							Type:     pluginsdk.TypeString,
							Computed: true,
						},
					},
				},
			},

			"resource_manager_id": {
				Computed: true,
				Type:     pluginsdk.TypeString,
			},

			"resource_manager_versionless_id": {
				Computed: true,
				Type:     pluginsdk.TypeString,
			},

			"version": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"secret_id": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"versionless_id": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"versionless_secret_id": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"certificate_data": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"certificate_data_base64": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"thumbprint": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"tags": tags.Schema(),
		},
	}
}
