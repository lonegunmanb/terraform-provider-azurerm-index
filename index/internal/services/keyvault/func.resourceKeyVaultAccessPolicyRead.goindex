package github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/keyvault/2023-02-01/vaults"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceKeyVaultAccessPolicyRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).KeyVault.VaultsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.AccessPolicyID(d.Id())
	if err != nil {
		return err
	}

	vaultId := id.KeyVaultId()

	resp, err := client.Get(ctx, vaultId)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] parent %q was not found - removing from state", vaultId)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving parent %s: %+v", vaultId, err)
	}
	var accessPolicy *vaults.AccessPolicyEntry
	if model := resp.Model; model != nil {
		accessPolicy = findKeyVaultAccessPolicy(model.Properties.AccessPolicies, id.ObjectID(), id.ApplicationId())
	}
	if accessPolicy == nil {
		log.Printf("[ERROR] Access Policy (Object ID %q / Application ID %q) was not found in %s - removing from state", id.ObjectID(), id.ApplicationId(), vaultId)
		d.SetId("")
		return nil
	}

	d.Set("key_vault_id", id.KeyVaultId().ID())
	d.Set("application_id", id.ApplicationId())
	d.Set("object_id", id.ObjectID())
	d.Set("tenant_id", accessPolicy.TenantId)

	certificatePermissions := flattenCertificatePermissions(accessPolicy.Permissions.Certificates)
	if err := d.Set("certificate_permissions", certificatePermissions); err != nil {
		return fmt.Errorf("setting `certificate_permissions`: %+v", err)
	}

	keyPermissions := flattenKeyPermissions(accessPolicy.Permissions.Keys)
	if err := d.Set("key_permissions", keyPermissions); err != nil {
		return fmt.Errorf("setting `key_permissions`: %+v", err)
	}

	secretPermissions := flattenSecretPermissions(accessPolicy.Permissions.Secrets)
	if err := d.Set("secret_permissions", secretPermissions); err != nil {
		return fmt.Errorf("setting `secret_permissions`: %+v", err)
	}

	storagePermissions := flattenStoragePermissions(accessPolicy.Permissions.Storage)
	if err := d.Set("storage_permissions", storagePermissions); err != nil {
		return fmt.Errorf("setting `storage_permissions`: %+v", err)
	}

	return nil
}
