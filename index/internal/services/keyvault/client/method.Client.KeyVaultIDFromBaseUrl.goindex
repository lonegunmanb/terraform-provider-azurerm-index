package github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/client
import (
	"context"
	"fmt"
	"net/url"
	"strings"
	"sync"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
)
func (c *Client) KeyVaultIDFromBaseUrl(ctx context.Context, subscriptionId commonids.SubscriptionId, keyVaultBaseUrl string) (*string, error) {
	keyVaultName, err := c.parseNameFromBaseUrl(keyVaultBaseUrl)
	if err != nil {
		return nil, err
	}

	cacheKey := c.cacheKeyForKeyVault(*keyVaultName)

	// Check the cache to determine if we have an entry for this key vault
	if v, ok := getCachedKeyVaule(cacheKey); ok {
		return &v.keyVaultId, nil
	}

	// Populate the cache
	if err := c.populateCache(ctx, subscriptionId); err != nil {
		return nil, fmt.Errorf("populating the Key Vaults cache for %s: %+v", subscriptionId, err)
	}

	// Now that the cache has been repopulated, check if we have the key vault or not
	if v, ok := getCachedKeyVaule(cacheKey); ok {
		return &v.keyVaultId, nil
	}

	// We haven't found it, but Data Sources and Resources need to handle this error separately
	return nil, nil
}
