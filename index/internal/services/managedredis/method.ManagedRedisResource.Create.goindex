package github.com/hashicorp/terraform-provider-azurerm/internal/services/managedredis
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/redisenterprise/2025-04-01/databases"
	"github.com/hashicorp/go-azure-sdk/resource-manager/redisenterprise/2025-04-01/redisenterprise"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managedredis/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managedredis/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ManagedRedisResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 45 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			clusterClient := metadata.Client.ManagedRedis.Client
			dbClient := metadata.Client.ManagedRedis.DatabaseClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var model ManagedRedisResourceModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			clusterId := redisenterprise.NewRedisEnterpriseID(subscriptionId, model.ResourceGroupName, model.Name)

			existingCluster, err := clusterClient.Get(ctx, clusterId)
			if err != nil {
				if !response.WasNotFound(existingCluster.HttpResponse) {
					return fmt.Errorf("checking for presence of existing %s: %+v", clusterId, err)
				}
			}

			if !response.WasNotFound(existingCluster.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), clusterId)
			}

			dbId := databases.NewDatabaseID(subscriptionId, clusterId.ResourceGroupName, clusterId.RedisEnterpriseName, defaultDatabaseName)

			clusterParams := redisenterprise.Cluster{
				Location: location.Normalize(model.Location),
				Sku: redisenterprise.Sku{
					Name: redisenterprise.SkuName(model.SkuName),
				},
				Properties: &redisenterprise.ClusterProperties{
					Encryption:        expandManagedRedisClusterCustomerManagedKey(model.CustomerManagedKey),
					MinimumTlsVersion: pointer.To(redisenterprise.TlsVersionOnePointTwo),
					HighAvailability:  expandHighAvailability(model.HighAvailabilityEnabled),
				},
				Tags: pointer.To(model.Tags),
			}

			expandedIdentity, err := identity.ExpandSystemAndUserAssignedMapFromModel(model.Identity)
			if err != nil {
				return fmt.Errorf("expanding `identity`: %+v", err)
			}
			clusterParams.Identity = expandedIdentity

			if err := clusterClient.CreateThenPoll(ctx, clusterId, clusterParams); err != nil {
				return fmt.Errorf("creating %s: %+v", clusterId, err)
			}

			metadata.SetID(clusterId)

			pollerType := custompollers.NewClusterStatePoller(clusterClient, clusterId)
			poller := pollers.NewPoller(pollerType, 15*time.Second, pollers.DefaultNumberOfDroppedConnectionsToAllow)
			if err := poller.PollUntilDone(ctx); err != nil {
				return fmt.Errorf("waiting for `resourceState` to be `Running` for %s: %+v", clusterId, err)
			}

			if len(model.DefaultDatabase) == 1 {
				dbModel := model.DefaultDatabase[0]

				err := createDb(ctx, dbClient, dbId, dbModel)
				if err != nil {
					return fmt.Errorf("creating %s: %+v", dbId, err)
				}
			}

			return nil
		},
	}
}
