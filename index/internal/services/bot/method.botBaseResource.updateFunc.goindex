package github.com/hashicorp/terraform-provider-azurerm/internal/services/bot
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/bot/parse"
	kvValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/botservice/2021-05-01-preview/botservice"
)
func (br botBaseResource) updateFunc() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Bot.BotClient
			id, err := parse.BotServiceID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			existing, err := client.Get(ctx, id.ResourceGroup, id.Name)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			if metadata.ResourceData.HasChange("display_name") {
				existing.Properties.DisplayName = utils.String(metadata.ResourceData.Get("display_name").(string))
			}

			if metadata.ResourceData.HasChange("endpoint") {
				existing.Properties.Endpoint = utils.String(metadata.ResourceData.Get("endpoint").(string))
			}

			if metadata.ResourceData.HasChange("developer_app_insights_key") {
				existing.Properties.DeveloperAppInsightKey = utils.String(metadata.ResourceData.Get("developer_app_insights_key").(string))
			}

			if metadata.ResourceData.HasChange("developer_app_insights_api_key") {
				existing.Properties.DeveloperAppInsightsAPIKey = utils.String(metadata.ResourceData.Get("developer_app_insights_api_key").(string))
			}

			if metadata.ResourceData.HasChange("developer_app_insights_application_id") {
				existing.Properties.DeveloperAppInsightsApplicationID = utils.String(metadata.ResourceData.Get("developer_app_insights_application_id").(string))
			}

			if metadata.ResourceData.HasChange("local_authentication_enabled") {
				existing.Properties.DisableLocalAuth = utils.Bool(!metadata.ResourceData.Get("local_authentication_enabled").(bool))
			}

			if metadata.ResourceData.HasChange("luis_app_ids") {
				existing.Properties.LuisAppIds = utils.ExpandStringSlice(metadata.ResourceData.Get("luis_app_ids").([]interface{}))
			}

			if metadata.ResourceData.HasChange("luis_key") {
				existing.Properties.LuisKey = utils.String(metadata.ResourceData.Get("luis_key").(string))
			}

			if metadata.ResourceData.HasChange("public_network_access_enabled") {
				if metadata.ResourceData.Get("public_network_access_enabled").(bool) {
					existing.Properties.PublicNetworkAccess = botservice.PublicNetworkAccessEnabled
				} else {
					existing.Properties.PublicNetworkAccess = botservice.PublicNetworkAccessDisabled
				}
			}

			if metadata.ResourceData.HasChange("streaming_endpoint_enabled") {
				existing.Properties.IsStreamingSupported = utils.Bool(metadata.ResourceData.Get("streaming_endpoint_enabled").(bool))
			}

			if metadata.ResourceData.HasChange("icon_url") {
				existing.Properties.IconURL = utils.String(metadata.ResourceData.Get("icon_url").(string))
			}

			if metadata.ResourceData.HasChange("tags") {
				existing.Tags = tags.Expand(metadata.ResourceData.Get("tags").(map[string]interface{}))
			}

			if _, err := client.Update(ctx, id.ResourceGroup, id.Name, existing); err != nil {
				return fmt.Errorf("updating %s: %+v", *id, err)
			}

			return nil
		},
	}
}
