package github.com/hashicorp/terraform-provider-azurerm/internal/services/nginx
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/nginx/2024-11-01-preview/nginxconfiguration"
	"github.com/hashicorp/go-azure-sdk/resource-manager/nginx/2024-11-01-preview/nginxdeployment"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (m ConfigurationResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, meta sdk.ResourceMetaData) error {
			id, err := nginxconfiguration.ParseConfigurationID(meta.ResourceData.Id())
			if err != nil {
				return err
			}

			client := meta.Client.Nginx.NginxConfiguration
			result, err := client.ConfigurationsGet(ctx, *id)
			if err != nil {
				if response.WasNotFound(result.HttpResponse) {
					return meta.MarkAsGone(id)
				}
				return err
			}

			if result.Model == nil {
				return fmt.Errorf("retrieving %s got nil model", id)
			}

			var output ConfigurationModel
			// protected files content field not return by API so decode from state
			if err := meta.Decode(&output); err != nil {
				return err
			}

			deployID := nginxdeployment.NewNginxDeploymentID(id.SubscriptionId, id.ResourceGroupName, id.NginxDeploymentName)
			output.NginxDeploymentId = deployID.ID()

			if prop := result.Model.Properties; prop != nil {
				output.RootFile = pointer.ToString(prop.RootFile)

				if prop.Package != nil && prop.Package.Data != nil {
					output.PackageData = pointer.ToString(prop.Package.Data)
				}

				if files := prop.Files; files != nil {
					configs := []ConfigFile{}
					for _, file := range *files {
						if pointer.From(file.Content) != "" {
							configs = append(configs, ConfigFile{
								Content:     pointer.ToString(file.Content),
								VirtualPath: pointer.ToString(file.VirtualPath),
							})
						}
					}
					if len(configs) > 0 {
						output.ConfigFile = configs
					}
				}

				if files := prop.ProtectedFiles; files != nil {
					configs := []ProtectedFile{}
					for _, file := range *files {
						config := ProtectedFile{
							VirtualPath: pointer.ToString(file.VirtualPath),
							ContentHash: pointer.ToString(file.ContentHash),
						}
						// GET returns protected files without content, so fill in from state
						for _, protectedFile := range output.ProtectedFile {
							if protectedFile.VirtualPath == pointer.ToString(file.VirtualPath) {
								config.Content = protectedFile.Content
								break
							}
						}
						configs = append(configs, config)
					}
					if len(configs) > 0 {
						output.ProtectedFile = configs
					}
				}
			}

			return meta.Encode(&output)
		},
	}
}
