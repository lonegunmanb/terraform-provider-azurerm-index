package github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/privatedns/2024-06-01/privatedns"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func dataSourcePrivateDnsSoaRecordRead(d *pluginsdk.ResourceData, meta interface{}) error {
	recordSetsClient := meta.(*clients.Client).PrivateDns.RecordSetsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId

	id := privatedns.NewRecordTypeID(subscriptionId, d.Get("resource_group_name").(string), d.Get("zone_name").(string), privatedns.RecordTypeSOA, "@")
	resp, err := recordSetsClient.RecordSetsGet(ctx, id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return fmt.Errorf("%s was not found", id)
		}
		return fmt.Errorf("reading %s: %+v", id, err)
	}

	d.SetId(id.ID())

	d.Set("resource_group_name", id.ResourceGroupName)
	d.Set("zone_name", id.PrivateDnsZoneName)

	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			d.Set("ttl", props.Ttl)
			d.Set("fqdn", props.Fqdn)

			if soaRecord := props.SoaRecord; soaRecord != nil {
				d.Set("email", soaRecord.Email)
				d.Set("host_name", soaRecord.Host)
				d.Set("expire_time", soaRecord.ExpireTime)
				d.Set("minimum_ttl", soaRecord.MinimumTtl)
				d.Set("refresh_time", soaRecord.RefreshTime)
				d.Set("retry_time", soaRecord.RetryTime)
				d.Set("serial_number", soaRecord.SerialNumber)
			}

			return tags.FlattenAndSet(d, props.Metadata)
		}
	}

	return nil
}
