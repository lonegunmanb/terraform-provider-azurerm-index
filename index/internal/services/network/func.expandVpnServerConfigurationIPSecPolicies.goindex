package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/virtualwans"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandVpnServerConfigurationIPSecPolicies(input []interface{}) *[]virtualwans.IPsecPolicy {
	ipSecPolicies := make([]virtualwans.IPsecPolicy, 0)

	for _, raw := range input {
		v := raw.(map[string]interface{})
		ipSecPolicies = append(ipSecPolicies, virtualwans.IPsecPolicy{
			DhGroup:             virtualwans.DhGroup(v["dh_group"].(string)),
			IkeEncryption:       virtualwans.IkeEncryption(v["ike_encryption"].(string)),
			IkeIntegrity:        virtualwans.IkeIntegrity(v["ike_integrity"].(string)),
			IPsecEncryption:     virtualwans.IPsecEncryption(v["ipsec_encryption"].(string)),
			IPsecIntegrity:      virtualwans.IPsecIntegrity(v["ipsec_integrity"].(string)),
			PfsGroup:            virtualwans.PfsGroup(v["pfs_group"].(string)),
			SaLifeTimeSeconds:   int64(v["sa_lifetime_seconds"].(int)),
			SaDataSizeKilobytes: int64(v["sa_data_size_kilobytes"].(int)),
		})
	}

	return &ipSecPolicies
}
