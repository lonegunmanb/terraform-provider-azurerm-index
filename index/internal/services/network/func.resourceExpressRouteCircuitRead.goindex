package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/expressrouteports"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/expressroutecircuits"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceExpressRouteCircuitRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.ExpressRouteCircuits
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := expressroutecircuits.ParseExpressRouteCircuitID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[INFO] %s was not found - removing from state", *id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.ExpressRouteCircuitName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.NormalizeNilable(model.Location))
		sku := flattenExpressRouteCircuitSku(model.Sku)
		if err := d.Set("sku", sku); err != nil {
			return fmt.Errorf("setting `sku`: %+v", err)
		}
		if props := model.Properties; props != nil {
			d.Set("bandwidth_in_gbps", props.BandwidthInGbps)

			if props.ExpressRoutePort != nil && props.ExpressRoutePort.Id != nil {
				portID, err := expressrouteports.ParseExpressRoutePortIDInsensitively(*props.ExpressRoutePort.Id)
				if err != nil {
					return err
				}
				d.Set("express_route_port_id", portID.ID())
			}

			d.Set("service_provider_provisioning_state", string(pointer.From(props.ServiceProviderProvisioningState)))
			d.Set("service_key", props.ServiceKey)
			d.Set("allow_classic_operations", props.AllowClassicOperations)
			d.Set("rate_limiting_enabled", props.EnableDirectPortRateLimit)

			if serviceProviderProps := props.ServiceProviderProperties; serviceProviderProps != nil {
				d.Set("service_provider_name", serviceProviderProps.ServiceProviderName)
				d.Set("peering_location", serviceProviderProps.PeeringLocation)
				d.Set("bandwidth_in_mbps", serviceProviderProps.BandwidthInMbps)
			}
		}
		return tags.FlattenAndSet(d, model.Tags)
	}
	return nil
}
