package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/adminrules"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r ManagerAdminRuleResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model ManagerAdminRuleModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.Network.AdminRules
			ruleCollectionId, err := adminrules.ParseSecurityAdminConfigurationRuleCollectionID(model.NetworkRuleCollectionId)
			if err != nil {
				return err
			}

			id := adminrules.NewSecurityAdminConfigurationRuleCollectionRuleID(ruleCollectionId.SubscriptionId, ruleCollectionId.ResourceGroupName,
				ruleCollectionId.NetworkManagerName, ruleCollectionId.SecurityAdminConfigurationName, ruleCollectionId.RuleCollectionName, model.Name)
			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			rule := adminrules.AdminRule{
				Properties: &adminrules.AdminPropertiesFormat{
					Access:                model.Action,
					Destinations:          expandAddressPrefixItemModel(model.Destinations),
					DestinationPortRanges: &model.DestinationPortRanges,
					Direction:             model.Direction,
					Priority:              model.Priority,
					Protocol:              model.Protocol,
					SourcePortRanges:      &model.SourcePortRanges,
					Sources:               expandAddressPrefixItemModel(model.Sources),
				},
			}

			if model.Description != "" {
				rule.Properties.Description = &model.Description
			}

			if _, err := client.CreateOrUpdate(ctx, id, rule); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
