package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/localnetworkgateways"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceLocalNetworkGatewayUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.LocalNetworkGateways
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := localnetworkgateways.ParseLocalNetworkGatewayID(d.Id())
	if err != nil {
		return err
	}

	existing, err := client.Get(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	if existing.Model == nil {
		return fmt.Errorf("retrieving %s: `model` was nil", id)
	}

	payload := existing.Model

	if d.HasChange("gateway_address") {
		payload.Properties.GatewayIPAddress = pointer.To(d.Get("gateway_address").(string))
	}

	if d.HasChange("gateway_fqdn") {
		payload.Properties.Fqdn = pointer.To(d.Get("gateway_fqdn").(string))
	}

	if d.HasChange("bgp_settings") {
		payload.Properties.BgpSettings = expandLocalNetworkGatewayBGPSettings(d)
	}

	if d.HasChange("tags") {
		payload.Tags = tags.Expand(d.Get("tags").(map[string]interface{}))
	}

	// This custompoller can be removed once https://github.com/hashicorp/go-azure-sdk/issues/989 has been fixed
	pollerType := custompollers.NewLocalNetworkGatewayPoller(client, *id)
	poller := pollers.NewPoller(pollerType, 10*time.Second, pollers.DefaultNumberOfDroppedConnectionsToAllow)

	// There is a bug in the provider where the address space ordering doesn't change as expected.
	// In the UI we have to remove the current list of addresses in the address space and re-add them in the new order and we'll copy that here.
	if d.HasChange("address_space") {
		// since the local network gateway cannot have both empty address prefix and empty BGP setting(confirmed with service team, it is by design),
		// replace the empty address prefix with the first address prefix in the "address_space" list to avoid error.
		if v := d.Get("address_space").([]interface{}); len(v) > 0 {
			payload.Properties.LocalNetworkAddressSpace = &localnetworkgateways.AddressSpace{
				AddressPrefixes: &[]string{v[0].(string)},
			}
		}

		// This can be switched back over to CreateOrUpdateThenPoll once https://github.com/hashicorp/go-azure-sdk/issues/989 has been fixed
		if _, err := client.CreateOrUpdate(ctx, *id, *payload); err != nil {
			return fmt.Errorf("removing %s: %+v", id, err)
		}
		if err := poller.PollUntilDone(ctx); err != nil {
			return err
		}
	}

	payload.Properties.LocalNetworkAddressSpace = expandLocalNetworkGatewayAddressSpaces(d)

	if _, err := client.CreateOrUpdate(ctx, *id, *payload); err != nil {
		return fmt.Errorf("updating %s: %+v", id, err)
	}

	if err := poller.PollUntilDone(ctx); err != nil {
		return err
	}

	d.SetId(id.ID())

	return resourceLocalNetworkGatewayRead(d, meta)
}
