package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/applicationgateways"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
	networkValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenApplicationGatewayHTTPListeners(input *[]applicationgateways.ApplicationGatewayHTTPListener) ([]interface{}, error) {
	results := make([]interface{}, 0)
	if input == nil {
		return results, nil
	}

	for _, v := range *input {
		output := map[string]interface{}{}

		if v.Id != nil {
			output["id"] = *v.Id
		}

		if v.Name != nil {
			output["name"] = *v.Name
		}

		if props := v.Properties; props != nil {
			if port := props.FrontendPort; port != nil {
				if port.Id != nil {
					portId, err := parse.FrontendPortIDInsensitively(*port.Id)
					if err != nil {
						return nil, err
					}
					output["frontend_port_name"] = portId.Name
					output["frontend_port_id"] = portId.ID()
				}
			}

			if feConfig := props.FrontendIPConfiguration; feConfig != nil {
				if feConfig.Id != nil {
					feConfigId, err := parse.FrontendIPConfigurationIDInsensitively(*feConfig.Id)
					if err != nil {
						return nil, err
					}
					output["frontend_ip_configuration_name"] = feConfigId.Name
					output["frontend_ip_configuration_id"] = feConfigId.ID()
				}
			}

			if hostname := props.HostName; hostname != nil {
				output["host_name"] = *hostname
			}

			if hostnames := props.HostNames; hostnames != nil {
				output["host_names"] = utils.FlattenStringSlice(hostnames)
			}

			output["protocol"] = props.Protocol

			if cert := props.SslCertificate; cert != nil {
				if cert.Id != nil {
					certId, err := parse.SslCertificateIDInsensitively(*cert.Id)
					if err != nil {
						return nil, err
					}

					output["ssl_certificate_name"] = certId.Name
					output["ssl_certificate_id"] = certId.ID()
				}
			}

			if sni := props.RequireServerNameIndication; sni != nil {
				output["require_sni"] = *sni
			}

			if fwp := props.FirewallPolicy; fwp != nil && fwp.Id != nil {
				policyId, err := webapplicationfirewallpolicies.ParseApplicationGatewayWebApplicationFirewallPolicyIDInsensitively(*fwp.Id)
				if err != nil {
					return nil, err
				}
				output["firewall_policy_id"] = policyId.ID()
			}

			if sslp := props.SslProfile; sslp != nil {
				if sslp.Id != nil {
					sslProfileId, err := parse.SslProfileIDInsensitively(*sslp.Id)
					if err != nil {
						return nil, err
					}

					output["ssl_profile_name"] = sslProfileId.Name
					output["ssl_profile_id"] = sslProfileId.ID()
				}
			}

			output["custom_error_configuration"] = flattenApplicationGatewayCustomErrorConfigurations(props.CustomErrorConfigurations)
		}

		results = append(results, output)
	}

	return results, nil
}
