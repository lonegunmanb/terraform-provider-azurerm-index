package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"encoding/base64"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/publicipaddresses"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func dataSourcePublicIPsRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.PublicIPAddresses
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	resourceGroupId := commonids.NewResourceGroupID(subscriptionId, d.Get("resource_group_name").(string))

	resp, err := client.List(ctx, resourceGroupId)
	if err != nil {
		return fmt.Errorf("listing Public IP Addresses in %s: %v", resourceGroupId, err)
	}

	prefix := d.Get("name_prefix").(string)
	attachmentStatus, attachmentStatusOk := d.GetOk("attachment_status")
	allocationType := d.Get("allocation_type").(string)

	filteredIPAddresses := make([]publicipaddresses.PublicIPAddress, 0)

	if model := resp.Model; model != nil {
		for _, address := range *model {
			if props := address.Properties; props != nil {
				nicIsAttached := props.IPConfiguration != nil || props.NatGateway != nil

				if prefix != "" {
					if !strings.HasPrefix(*address.Name, prefix) {
						continue
					}
				}

				if attachmentStatusOk && attachmentStatus.(string) == "Attached" && !nicIsAttached {
					continue
				}
				if attachmentStatusOk && attachmentStatus.(string) == "Unattached" && nicIsAttached {
					continue
				}

				if allocationType != "" {
					allocation := publicipaddresses.IPAllocationMethod(allocationType)
					if props.PublicIPAllocationMethod != nil && *props.PublicIPAllocationMethod != allocation {
						continue
					}
				}
			}

			filteredIPAddresses = append(filteredIPAddresses, address)
		}
	}

	id := fmt.Sprintf("networkPublicIPs/resourceGroup/%s/namePrefix=%s;attachmentStatus=%s;allocationType=%s", resourceGroupId.ResourceGroupName, prefix, attachmentStatus, allocationType)
	d.SetId(base64.StdEncoding.EncodeToString([]byte(id)))

	results := flattenDataSourcePublicIPs(filteredIPAddresses)
	if err := d.Set("public_ips", results); err != nil {
		return fmt.Errorf("setting `public_ips`: %+v", err)
	}

	return nil
}
