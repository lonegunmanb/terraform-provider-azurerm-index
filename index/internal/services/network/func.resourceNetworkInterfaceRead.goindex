package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/networkinterfaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	lbvalidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/loadbalancer/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceNetworkInterfaceRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.NetworkInterfaces
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := commonids.ParseNetworkInterfaceID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id, networkinterfaces.DefaultGetOperationOptions())
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.NetworkInterfaceName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.NormalizeNilable(model.Location))
		d.Set("edge_zone", flattenEdgeZoneModel(model.ExtendedLocation))

		if props := model.Properties; props != nil {
			primaryPrivateIPAddress := ""
			privateIPAddresses := make([]interface{}, 0)
			if configs := props.IPConfigurations; configs != nil {
				for i, config := range *props.IPConfigurations {
					if ipProps := config.Properties; ipProps != nil {
						v := ipProps.PrivateIPAddress
						if v == nil {
							continue
						}

						if i == 0 {
							primaryPrivateIPAddress = *v
						}

						privateIPAddresses = append(privateIPAddresses, *v)
					}
				}
			}

			appliedDNSServers := make([]string, 0)
			dnsServers := make([]string, 0)
			internalDnsNameLabel := ""
			internalDomainNameSuffix := ""
			if dnsSettings := props.DnsSettings; dnsSettings != nil {
				appliedDNSServers = flattenNetworkInterfaceDnsServers(dnsSettings.AppliedDnsServers)
				dnsServers = flattenNetworkInterfaceDnsServers(dnsSettings.DnsServers)

				if dnsSettings.InternalDnsNameLabel != nil {
					internalDnsNameLabel = *dnsSettings.InternalDnsNameLabel
				}

				if dnsSettings.InternalDomainNameSuffix != nil {
					internalDomainNameSuffix = *dnsSettings.InternalDomainNameSuffix
				}
			}

			virtualMachineId := ""
			if props.VirtualMachine != nil && props.VirtualMachine.Id != nil {
				virtualMachineId = *props.VirtualMachine.Id
			}

			if err := d.Set("applied_dns_servers", appliedDNSServers); err != nil {
				return fmt.Errorf("setting `applied_dns_servers`: %+v", err)
			}

			if err := d.Set("dns_servers", dnsServers); err != nil {
				return fmt.Errorf("setting `applied_dns_servers`: %+v", err)
			}

			auxiliaryMode := ""
			if props.AuxiliaryMode != nil && *props.AuxiliaryMode != networkinterfaces.NetworkInterfaceAuxiliaryModeNone {
				auxiliaryMode = string(*props.AuxiliaryMode)
			}

			d.Set("auxiliary_mode", auxiliaryMode)

			auxiliarySku := ""
			if props.AuxiliarySku != nil && *props.AuxiliarySku != networkinterfaces.NetworkInterfaceAuxiliarySkuNone {
				auxiliarySku = string(*props.AuxiliarySku)
			}

			d.Set("auxiliary_sku", auxiliarySku)
			d.Set("ip_forwarding_enabled", props.EnableIPForwarding)
			d.Set("accelerated_networking_enabled", props.EnableAcceleratedNetworking)
			d.Set("internal_dns_name_label", internalDnsNameLabel)
			d.Set("internal_domain_name_suffix", internalDomainNameSuffix)
			d.Set("mac_address", props.MacAddress)
			d.Set("private_ip_address", primaryPrivateIPAddress)
			d.Set("virtual_machine_id", virtualMachineId)

			if err := d.Set("ip_configuration", flattenNetworkInterfaceIPConfigurations(props.IPConfigurations)); err != nil {
				return fmt.Errorf("setting `ip_configuration`: %+v", err)
			}

			if err := d.Set("private_ip_addresses", privateIPAddresses); err != nil {
				return fmt.Errorf("setting `private_ip_addresses`: %+v", err)
			}
		}

		if err := tags.FlattenAndSet(d, model.Tags); err != nil {
			return err
		}
	}

	return pluginsdk.SetResourceIdentityData(d, id)
}
