package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/applicationgateways"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
	networkValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandApplicationGatewayPrivateLinkConfigurations(d *pluginsdk.ResourceData) *[]applicationgateways.ApplicationGatewayPrivateLinkConfiguration {
	vs := d.Get("private_link_configuration").(*pluginsdk.Set).List()
	plConfigResults := make([]applicationgateways.ApplicationGatewayPrivateLinkConfiguration, 0)

	for _, rawPl := range vs {
		v := rawPl.(map[string]interface{})
		name := v["name"].(string)
		ipConfigurations := v["ip_configuration"].([]interface{})
		ipConfigurationResults := make([]applicationgateways.ApplicationGatewayPrivateLinkIPConfiguration, 0)
		for _, rawIp := range ipConfigurations {
			v := rawIp.(map[string]interface{})
			name := v["name"].(string)
			subnetId := v["subnet_id"].(string)
			primary := v["primary"].(bool)
			ipConfiguration := applicationgateways.ApplicationGatewayPrivateLinkIPConfiguration{
				Name: pointer.To(name),
				Properties: &applicationgateways.ApplicationGatewayPrivateLinkIPConfigurationProperties{
					Primary: &primary,
					Subnet: &applicationgateways.SubResource{
						Id: pointer.To(subnetId),
					},
				},
			}
			if privateIpAddress := v["private_ip_address"].(string); privateIpAddress != "" {
				ipConfiguration.Properties.PrivateIPAddress = pointer.To(privateIpAddress)
			}
			if privateIpAddressAllocation := v["private_ip_address_allocation"].(string); privateIpAddressAllocation != "" {
				ipConfiguration.Properties.PrivateIPAllocationMethod = pointer.To(applicationgateways.IPAllocationMethod(privateIpAddressAllocation))
			}
			ipConfigurationResults = append(ipConfigurationResults, ipConfiguration)
		}

		configuration := applicationgateways.ApplicationGatewayPrivateLinkConfiguration{
			Name: pointer.To(name),
			Properties: &applicationgateways.ApplicationGatewayPrivateLinkConfigurationProperties{
				IPConfigurations: &ipConfigurationResults,
			},
		}
		plConfigResults = append(plConfigResults, configuration)
	}

	return &plConfigResults
}
