package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"math"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/virtualwans"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandVpnGatewayConnectionIpSecPolicies(input []interface{}) *[]virtualwans.IPsecPolicy {
	if len(input) == 0 {
		return nil
	}

	result := make([]virtualwans.IPsecPolicy, 0)
	for _, itemRaw := range input {
		item := itemRaw.(map[string]interface{})
		result = append(result, virtualwans.IPsecPolicy{
			SaLifeTimeSeconds:   int64(item["sa_lifetime_sec"].(int)),
			SaDataSizeKilobytes: int64(item["sa_data_size_kb"].(int)),
			IPsecEncryption:     virtualwans.IPsecEncryption(item["encryption_algorithm"].(string)),
			IPsecIntegrity:      virtualwans.IPsecIntegrity(item["integrity_algorithm"].(string)),
			IkeEncryption:       virtualwans.IkeEncryption(item["ike_encryption_algorithm"].(string)),
			IkeIntegrity:        virtualwans.IkeIntegrity(item["ike_integrity_algorithm"].(string)),
			DhGroup:             virtualwans.DhGroup(item["dh_group"].(string)),
			PfsGroup:            virtualwans.PfsGroup(item["pfs_group"].(string)),
		})
	}

	return &result
}
