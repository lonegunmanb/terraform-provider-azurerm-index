package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/expressrouteports"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/expressroutecircuits"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceExpressRouteCircuit() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceExpressRouteCircuitCreate,
		Read:   resourceExpressRouteCircuitRead,
		Update: resourceExpressRouteCircuitUpdate,
		Delete: resourceExpressRouteCircuitDelete,
		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := expressroutecircuits.ParseExpressRouteCircuitID(id)
			return err
		}),

		CustomizeDiff: pluginsdk.CustomDiffInSequence(
			// If bandwidth is reduced force a new resource
			pluginsdk.ForceNewIfChange("bandwidth_in_mbps", func(ctx context.Context, old, new, meta interface{}) bool {
				return new.(int) < old.(int)
			}),
		),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ForceNew: true,
			},

			"resource_group_name": commonschema.ResourceGroupName(),

			"location": commonschema.Location(),

			"sku": {
				Type:     pluginsdk.TypeList,
				Required: true,
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"tier": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(expressroutecircuits.ExpressRouteCircuitSkuTierBasic),
								string(expressroutecircuits.ExpressRouteCircuitSkuTierLocal),
								string(expressroutecircuits.ExpressRouteCircuitSkuTierStandard),
								string(expressroutecircuits.ExpressRouteCircuitSkuTierPremium),
							}, false),
						},

						"family": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(expressroutecircuits.ExpressRouteCircuitSkuFamilyMeteredData),
								string(expressroutecircuits.ExpressRouteCircuitSkuFamilyUnlimitedData),
							}, false),
						},
					},
				},
			},

			"allow_classic_operations": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Default:  false,
			},

			"service_provider_name": {
				Type:             pluginsdk.TypeString,
				Optional:         true,
				ForceNew:         true,
				DiffSuppressFunc: suppress.CaseDifference,
				RequiredWith:     []string{"bandwidth_in_mbps", "peering_location"},
				ConflictsWith:    []string{"bandwidth_in_gbps", "express_route_port_id"},
			},

			"peering_location": {
				Type:             pluginsdk.TypeString,
				Optional:         true,
				ForceNew:         true,
				DiffSuppressFunc: suppress.CaseDifference,
				RequiredWith:     []string{"bandwidth_in_mbps", "service_provider_name"},
				ConflictsWith:    []string{"bandwidth_in_gbps", "express_route_port_id"},
			},

			"bandwidth_in_mbps": {
				Type:          pluginsdk.TypeInt,
				Optional:      true,
				RequiredWith:  []string{"peering_location", "service_provider_name"},
				ConflictsWith: []string{"bandwidth_in_gbps", "express_route_port_id"},
			},

			"bandwidth_in_gbps": {
				Type:          pluginsdk.TypeFloat,
				Optional:      true,
				RequiredWith:  []string{"express_route_port_id"},
				ConflictsWith: []string{"bandwidth_in_mbps", "peering_location", "service_provider_name"},
			},

			"express_route_port_id": {
				Type:          pluginsdk.TypeString,
				Optional:      true,
				ForceNew:      true,
				RequiredWith:  []string{"bandwidth_in_gbps"},
				ConflictsWith: []string{"bandwidth_in_mbps", "peering_location", "service_provider_name"},
				ValidateFunc:  expressrouteports.ValidateExpressRoutePortID,
			},

			"rate_limiting_enabled": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Default:  false,
			},

			"service_provider_provisioning_state": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"authorization_key": {
				Type:      pluginsdk.TypeString,
				Optional:  true,
				Sensitive: true,
			},

			"service_key": {
				Type:      pluginsdk.TypeString,
				Computed:  true,
				Sensitive: true,
			},

			"tags": commonschema.Tags(),
		},
	}
}
