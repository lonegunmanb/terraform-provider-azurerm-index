package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/networkprofiles"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenNetworkProfileContainerNetworkInterface(input *[]networkprofiles.ContainerNetworkInterfaceConfiguration) []interface{} {
	output := make([]interface{}, 0)
	if input == nil {
		return output
	}

	for _, cniConfig := range *input {
		ipConfigurations := make([]interface{}, 0)
		if props := cniConfig.Properties; props != nil && props.IPConfigurations != nil {
			for _, ipConfig := range *props.IPConfigurations {
				subnetId := ""
				if ipProps := ipConfig.Properties; ipProps != nil && ipProps.Subnet != nil && ipProps.Subnet.Id != nil {
					subnetId = *ipProps.Subnet.Id
				}

				ipConfigurations = append(ipConfigurations, map[string]interface{}{
					"name":      pointer.From(ipConfig.Name),
					"subnet_id": subnetId,
				})
			}
		}

		output = append(output, map[string]interface{}{
			"name":             pointer.From(cniConfig.Name),
			"ip_configuration": ipConfigurations,
		})
	}

	return output
}
