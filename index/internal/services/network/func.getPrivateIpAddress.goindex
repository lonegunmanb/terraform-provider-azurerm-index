package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/networkinterfaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/privateendpoints"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func getPrivateIpAddress(ctx context.Context, client *networkinterfaces.NetworkInterfacesClient, networkInterfaceId string) string {
	privateIpAddress := ""
	id, err := commonids.ParseNetworkInterfaceID(networkInterfaceId)
	if err != nil {
		return privateIpAddress
	}

	resp, err := client.Get(ctx, *id, networkinterfaces.DefaultGetOperationOptions())
	if err != nil {
		return privateIpAddress
	}

	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			if configs := props.IPConfigurations; configs != nil {
				for i, config := range *configs {
					if propFmt := config.Properties; propFmt != nil {
						if propFmt.PrivateIPAddress != nil && *propFmt.PrivateIPAddress != "" && i == 0 {
							privateIpAddress = *propFmt.PrivateIPAddress
						}
						break
					}
				}
			}
		}
	}

	return privateIpAddress
}
