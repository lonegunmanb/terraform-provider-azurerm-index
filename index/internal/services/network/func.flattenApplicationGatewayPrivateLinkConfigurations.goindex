package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/applicationgateways"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
	networkValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenApplicationGatewayPrivateLinkConfigurations(input *[]applicationgateways.ApplicationGatewayPrivateLinkConfiguration) []interface{} {
	plConfigResults := make([]interface{}, 0)
	if input == nil {
		return plConfigResults
	}

	for _, plConfig := range *input {
		plConfigResult := map[string]interface{}{}
		if plConfig.Name != nil {
			plConfigResult["name"] = *plConfig.Name
		}
		if plConfig.Id != nil {
			plConfigResult["id"] = *plConfig.Id
		}
		ipConfigResults := make([]interface{}, 0)
		if props := plConfig.Properties; props != nil {
			for _, ipConfig := range *props.IPConfigurations {
				ipConfigResult := map[string]interface{}{}
				if ipConfig.Name != nil {
					ipConfigResult["name"] = *ipConfig.Name
				}
				if ipConfigProps := ipConfig.Properties; ipConfigProps != nil {
					if ipConfigProps.Subnet != nil {
						ipConfigResult["subnet_id"] = *ipConfigProps.Subnet.Id
					}
					if ipConfigProps.PrivateIPAddress != nil {
						ipConfigResult["private_ip_address"] = *ipConfigProps.PrivateIPAddress
					}
					ipConfigResult["private_ip_address_allocation"] = string(pointer.From(ipConfigProps.PrivateIPAllocationMethod))
					if ipConfigProps.Primary != nil {
						ipConfigResult["primary"] = *ipConfigProps.Primary
					}
					ipConfigResults = append(ipConfigResults, ipConfigResult)
				}
			}
		}
		plConfigResult["ip_configuration"] = ipConfigResults
		plConfigResults = append(plConfigResults, plConfigResult)
	}
	return plConfigResults
}
