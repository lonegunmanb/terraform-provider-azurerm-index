package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/routefilters"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/expressroutecircuitconnections"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/expressroutecircuitpeerings"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func expandExpressRouteCircuitIpv6PeeringConfig(input []interface{}) (*expressroutecircuitpeerings.IPv6ExpressRouteCircuitPeeringConfig, error) {
	if len(input) == 0 {
		return nil, nil
	}

	v := input[0].(map[string]interface{})
	peeringConfig := expressroutecircuitpeerings.IPv6ExpressRouteCircuitPeeringConfig{
		MicrosoftPeeringConfig: expandExpressRouteCircuitPeeringMicrosoftConfig(v["microsoft_peering"].([]interface{})),
		State:                  pointer.To(expressroutecircuitpeerings.ExpressRouteCircuitPeeringStateEnabled),
	}

	primaryPeerAddressPrefix := v["primary_peer_address_prefix"].(string)
	secondaryPeerAddressPrefix := v["secondary_peer_address_prefix"].(string)
	if !strings.EqualFold(primaryPeerAddressPrefix, "") {
		peeringConfig.PrimaryPeerAddressPrefix = pointer.To(primaryPeerAddressPrefix)
	}
	if !strings.EqualFold(secondaryPeerAddressPrefix, "") {
		peeringConfig.SecondaryPeerAddressPrefix = pointer.To(secondaryPeerAddressPrefix)
	}

	ipv6Enabled := v["enabled"].(bool)
	if !ipv6Enabled {
		peeringConfig.State = pointer.To(expressroutecircuitpeerings.ExpressRouteCircuitPeeringStateDisabled)
	}

	routeFilterId := v["route_filter_id"].(string)
	if routeFilterId != "" {
		if _, err := routefilters.ParseRouteFilterID(routeFilterId); err != nil {
			return nil, err
		}
		peeringConfig.RouteFilter = &expressroutecircuitpeerings.SubResource{
			Id: pointer.To(routeFilterId),
		}
	}
	return &peeringConfig, nil
}
