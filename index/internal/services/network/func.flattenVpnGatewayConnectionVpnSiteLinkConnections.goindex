package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"math"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/virtualwans"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenVpnGatewayConnectionVpnSiteLinkConnections(input *[]virtualwans.VpnSiteLinkConnection) interface{} {
	if input == nil {
		return []interface{}{}
	}

	output := make([]interface{}, 0)

	for _, item := range *input {
		if item.Properties == nil {
			continue
		}

		props := *item.Properties

		connectionProtocolType := ""
		if props.VpnConnectionProtocolType != nil {
			connectionProtocolType = string(*props.VpnConnectionProtocolType)
		}

		vpnLinkConnectionMode := ""
		if props.VpnLinkConnectionMode != nil {
			vpnLinkConnectionMode = string(*props.VpnLinkConnectionMode)
		}

		vpnSiteLinkId := ""
		if props.VpnSiteLink != nil && props.VpnSiteLink.Id != nil {
			vpnSiteLinkId = *props.VpnSiteLink.Id
		}

		output = append(output, map[string]interface{}{
			"name":                                  pointer.From(item.Name),
			"egress_nat_rule_ids":                   flattenVpnGatewayConnectionNatRuleIds(props.EgressNatRules),
			"ingress_nat_rule_ids":                  flattenVpnGatewayConnectionNatRuleIds(props.IngressNatRules),
			"vpn_site_link_id":                      vpnSiteLinkId,
			"route_weight":                          int(pointer.From(props.RoutingWeight)),
			"protocol":                              connectionProtocolType,
			"connection_mode":                       vpnLinkConnectionMode,
			"bandwidth_mbps":                        int(pointer.From(props.ConnectionBandwidth)),
			"shared_key":                            pointer.From(props.SharedKey),
			"bgp_enabled":                           pointer.From(props.EnableBgp),
			"ipsec_policy":                          flattenVpnGatewayConnectionIpSecPolicies(props.IPsecPolicies),
			"ratelimit_enabled":                     pointer.From(props.EnableRateLimiting),
			"local_azure_ip_address_enabled":        pointer.From(props.UseLocalAzureIPAddress),
			"policy_based_traffic_selector_enabled": pointer.From(props.UsePolicyBasedTrafficSelectors),
			"custom_bgp_address":                    flattenVpnGatewayConnectionCustomBgpAddresses(props.VpnGatewayCustomBgpAddresses),
		})
	}

	return output
}
