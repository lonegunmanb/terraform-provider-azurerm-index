package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/ddosprotectionplans"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/publicipprefixes"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/publicipaddresses"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourcePublicIpRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.PublicIPAddresses
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := commonids.ParsePublicIPAddressID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id, publicipaddresses.DefaultGetOperationOptions())
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	d.Set("name", id.PublicIPAddressesName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.NormalizeNilable(model.Location))
		d.Set("edge_zone", flattenEdgeZoneNew(model.ExtendedLocation))
		d.Set("zones", zones.FlattenUntyped(model.Zones))

		if sku := model.Sku; sku != nil {
			d.Set("sku", string(pointer.From(sku.Name)))
			d.Set("sku_tier", string(pointer.From(sku.Tier)))
		}
		if props := model.Properties; props != nil {
			d.Set("allocation_method", string(pointer.From(props.PublicIPAllocationMethod)))
			d.Set("ip_version", string(pointer.From(props.PublicIPAddressVersion)))

			if publicIpPrefix := props.PublicIPPrefix; publicIpPrefix != nil {
				d.Set("public_ip_prefix_id", publicIpPrefix.Id)
			}

			if settings := props.DnsSettings; settings != nil {
				d.Set("fqdn", settings.Fqdn)
				d.Set("reverse_fqdn", settings.ReverseFqdn)
				d.Set("domain_name_label", settings.DomainNameLabel)
				d.Set("domain_name_label_scope", string(pointer.From(settings.DomainNameLabelScope)))
			}

			ddosProtectionMode := string(publicipaddresses.DdosSettingsProtectionModeVirtualNetworkInherited)
			if ddosSetting := props.DdosSettings; ddosSetting != nil {
				ddosProtectionMode = string(pointer.From(ddosSetting.ProtectionMode))
				if subResource := ddosSetting.DdosProtectionPlan; subResource != nil {
					d.Set("ddos_protection_plan_id", subResource.Id)
				}
			}
			d.Set("ddos_protection_mode", ddosProtectionMode)

			d.Set("ip_tags", flattenPublicIpPropsIpTags(props.IPTags))

			d.Set("ip_address", props.IPAddress)
			d.Set("idle_timeout_in_minutes", props.IdleTimeoutInMinutes)
		}
		return tags.FlattenAndSet(d, model.Tags)
	}
	return nil
}
