package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/applicationgateways"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
	networkValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceApplicationGatewayRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.ApplicationGateways
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := applicationgateways.ParseApplicationGatewayID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] %s was not found - removing from state", *id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.ApplicationGatewayName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.NormalizeNilable(model.Location))
		d.Set("zones", zones.FlattenUntyped(model.Zones))

		identity, err := identity.FlattenSystemAndUserAssignedMap(model.Identity)
		if err != nil {
			return err
		}
		if err = d.Set("identity", identity); err != nil {
			return err
		}

		if props := model.Properties; props != nil {
			if err = d.Set("authentication_certificate", flattenApplicationGatewayAuthenticationCertificates(props.AuthenticationCertificates, d)); err != nil {
				return fmt.Errorf("setting `authentication_certificate`: %+v", err)
			}

			if err = d.Set("trusted_root_certificate", flattenApplicationGatewayTrustedRootCertificates(props.TrustedRootCertificates, d)); err != nil {
				return fmt.Errorf("setting `trusted_root_certificate`: %+v", err)
			}

			if setErr := d.Set("backend_address_pool", flattenApplicationGatewayBackendAddressPools(props.BackendAddressPools)); setErr != nil {
				return fmt.Errorf("setting `backend_address_pool`: %+v", setErr)
			}

			backendHttpSettings, err := flattenApplicationGatewayBackendHTTPSettings(props.BackendHTTPSettingsCollection)
			if err != nil {
				return fmt.Errorf("flattening `backend_http_settings`: %+v", err)
			}
			if setErr := d.Set("backend_http_settings", backendHttpSettings); setErr != nil {
				return fmt.Errorf("setting `backend_http_settings`: %+v", setErr)
			}

			if setErr := d.Set("ssl_policy", flattenApplicationGatewaySslPolicy(props.SslPolicy)); setErr != nil {
				return fmt.Errorf("setting `ssl_policy`: %+v", setErr)
			}

			d.Set("enable_http2", props.EnableHTTP2)
			d.Set("fips_enabled", props.EnableFips)
			d.Set("force_firewall_policy_association", props.ForceFirewallPolicyAssociation)

			httpListeners, err := flattenApplicationGatewayHTTPListeners(props.HTTPListeners)
			if err != nil {
				return fmt.Errorf("flattening `http_listener`: %+v", err)
			}
			if setErr := d.Set("http_listener", httpListeners); setErr != nil {
				return fmt.Errorf("setting `http_listener`: %+v", setErr)
			}

			if setErr := d.Set("frontend_port", flattenApplicationGatewayFrontendPorts(props.FrontendPorts)); setErr != nil {
				return fmt.Errorf("setting `frontend_port`: %+v", setErr)
			}

			frontendIPConfigurations, err := flattenApplicationGatewayFrontendIPConfigurations(props.FrontendIPConfigurations)
			if err != nil {
				return fmt.Errorf("flattening `frontend IP configuration`: %+v", err)
			}
			if setErr := d.Set("frontend_ip_configuration", frontendIPConfigurations); setErr != nil {
				return fmt.Errorf("setting `frontend_ip_configuration`: %+v", setErr)
			}

			if setErr := d.Set("gateway_ip_configuration", flattenApplicationGatewayIPConfigurations(props.GatewayIPConfigurations)); setErr != nil {
				return fmt.Errorf("setting `gateway_ip_configuration`: %+v", setErr)
			}

			if setErr := d.Set("global", flattenApplicationGatewayGlobalConfiguration(props.GlobalConfiguration)); setErr != nil {
				return fmt.Errorf("setting `global`: %+v", setErr)
			}

			if setErr := d.Set("private_endpoint_connection", flattenApplicationGatewayPrivateEndpoints(props.PrivateEndpointConnections)); setErr != nil {
				return fmt.Errorf("setting `private_endpoint_connection`: %+v", setErr)
			}

			if setErr := d.Set("private_link_configuration", flattenApplicationGatewayPrivateLinkConfigurations(props.PrivateLinkConfigurations)); setErr != nil {
				return fmt.Errorf("setting `private_link_configuration`: %+v", setErr)
			}

			if setErr := d.Set("probe", flattenApplicationGatewayProbes(props.Probes)); setErr != nil {
				return fmt.Errorf("setting `probe`: %+v", setErr)
			}

			requestRoutingRules, err := flattenApplicationGatewayRequestRoutingRules(props.RequestRoutingRules)
			if err != nil {
				return fmt.Errorf("flattening `request_routing_rule`: %+v", err)
			}
			if setErr := d.Set("request_routing_rule", requestRoutingRules); setErr != nil {
				return fmt.Errorf("setting `request_routing_rule`: %+v", setErr)
			}

			redirectConfigurations, err := flattenApplicationGatewayRedirectConfigurations(props.RedirectConfigurations)
			if err != nil {
				return fmt.Errorf("flattening `redirect configuration`: %+v", err)
			}
			if setErr := d.Set("redirect_configuration", redirectConfigurations); setErr != nil {
				return fmt.Errorf("setting `redirect_configuration`: %+v", setErr)
			}

			rewriteRuleSets := flattenApplicationGatewayRewriteRuleSets(props.RewriteRuleSets)
			if setErr := d.Set("rewrite_rule_set", rewriteRuleSets); setErr != nil {
				return fmt.Errorf("setting `rewrite_rule_set`: %+v", setErr)
			}

			if setErr := d.Set("sku", flattenApplicationGatewaySku(props.Sku)); setErr != nil {
				return fmt.Errorf("setting `sku`: %+v", setErr)
			}

			if setErr := d.Set("autoscale_configuration", flattenApplicationGatewayAutoscaleConfiguration(props.AutoscaleConfiguration)); setErr != nil {
				return fmt.Errorf("setting `autoscale_configuration`: %+v", setErr)
			}

			if setErr := d.Set("ssl_certificate", flattenApplicationGatewaySslCertificates(props.SslCertificates, d)); setErr != nil {
				return fmt.Errorf("setting `ssl_certificate`: %+v", setErr)
			}

			if setErr := d.Set("trusted_client_certificate", flattenApplicationGatewayTrustedClientCertificates(props.TrustedClientCertificates)); setErr != nil {
				return fmt.Errorf("setting `trusted_client_certificate`: %+v", setErr)
			}

			sslProfiles, err := flattenApplicationGatewaySslProfiles(props.SslProfiles)
			if err != nil {
				return fmt.Errorf("flattening `ssl_profile`: %+v", err)
			}
			if setErr := d.Set("ssl_profile", sslProfiles); setErr != nil {
				return fmt.Errorf("setting `ssl_profile`: %+v", setErr)
			}

			if setErr := d.Set("custom_error_configuration", flattenApplicationGatewayCustomErrorConfigurations(props.CustomErrorConfigurations)); setErr != nil {
				return fmt.Errorf("setting `custom_error_configuration`: %+v", setErr)
			}

			urlPathMaps, err := flattenApplicationGatewayURLPathMaps(props.UrlPathMaps)
			if err != nil {
				return fmt.Errorf("flattening `url_path_map`: %+v", err)
			}
			if setErr := d.Set("url_path_map", urlPathMaps); setErr != nil {
				return fmt.Errorf("setting `url_path_map`: %+v", setErr)
			}

			if setErr := d.Set("waf_configuration", flattenApplicationGatewayWafConfig(props.WebApplicationFirewallConfiguration)); setErr != nil {
				return fmt.Errorf("setting `waf_configuration`: %+v", setErr)
			}

			firewallPolicyId := ""
			if props.FirewallPolicy != nil && props.FirewallPolicy.Id != nil {
				firewallPolicyId = *props.FirewallPolicy.Id
				policyId, err := webapplicationfirewallpolicies.ParseApplicationGatewayWebApplicationFirewallPolicyIDInsensitively(firewallPolicyId)
				if err == nil {
					firewallPolicyId = policyId.ID()
				}
			}
			d.Set("firewall_policy_id", firewallPolicyId)
		}
		if err := tags.FlattenAndSet(d, model.Tags); err != nil {
			return err
		}
	}

	return pluginsdk.SetResourceIdentityData(d, id)
}
