package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"math"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/virtualwans"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandVpnGatewayConnectionVpnSiteLinkConnections(input []interface{}) *[]virtualwans.VpnSiteLinkConnection {
	if len(input) == 0 {
		return nil
	}

	result := make([]virtualwans.VpnSiteLinkConnection, 0)
	for _, itemRaw := range input {
		item := itemRaw.(map[string]interface{})
		v := virtualwans.VpnSiteLinkConnection{
			Name: utils.String(item["name"].(string)),
			Properties: &virtualwans.VpnSiteLinkConnectionProperties{
				VpnSiteLink: &virtualwans.SubResource{
					Id: utils.String(item["vpn_site_link_id"].(string)),
				},
				RoutingWeight:                  pointer.To(int64(item["route_weight"].(int))),
				VpnConnectionProtocolType:      pointer.To(virtualwans.VirtualNetworkGatewayConnectionProtocol(item["protocol"].(string))),
				VpnLinkConnectionMode:          pointer.To(virtualwans.VpnLinkConnectionMode(item["connection_mode"].(string))),
				ConnectionBandwidth:            pointer.To(int64(item["bandwidth_mbps"].(int))),
				EnableBgp:                      pointer.To(item["bgp_enabled"].(bool)),
				IPsecPolicies:                  expandVpnGatewayConnectionIpSecPolicies(item["ipsec_policy"].([]interface{})),
				EnableRateLimiting:             pointer.To(item["ratelimit_enabled"].(bool)),
				UseLocalAzureIPAddress:         pointer.To(item["local_azure_ip_address_enabled"].(bool)),
				UsePolicyBasedTrafficSelectors: pointer.To(item["policy_based_traffic_selector_enabled"].(bool)),
				VpnGatewayCustomBgpAddresses:   expandVpnGatewayConnectionCustomBgpAddresses(item["custom_bgp_address"].(*pluginsdk.Set).List()),
			},
		}

		if egressNatRuleIds := item["egress_nat_rule_ids"].(*pluginsdk.Set).List(); len(egressNatRuleIds) != 0 {
			v.Properties.EgressNatRules = expandVpnGatewayConnectionNatRuleIds(egressNatRuleIds)
		}

		if ingressNatRuleIds := item["ingress_nat_rule_ids"].(*pluginsdk.Set).List(); len(ingressNatRuleIds) != 0 {
			v.Properties.IngressNatRules = expandVpnGatewayConnectionNatRuleIds(ingressNatRuleIds)
		}

		if sharedKey := item["shared_key"]; sharedKey != "" {
			v.Properties.SharedKey = pointer.To(sharedKey.(string))
		}
		result = append(result, v)
	}

	return &result
}
