package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/staticcidrs"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ManagerIpamPoolStaticCidrResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Network.StaticCidrs

			id, err := staticcidrs.ParseStaticCidrID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}

				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			ipamPoolId := staticcidrs.NewIPamPoolID(id.SubscriptionId, id.ResourceGroupName, id.NetworkManagerName, id.IpamPoolName).ID()
			schema := ManagerIpamPoolStaticCidrResourceModel{
				Name:       id.StaticCidrName,
				IpamPoolId: ipamPoolId,
			}

			if model := resp.Model; model != nil {
				if props := model.Properties; props != nil {
					schema.AddressPrefixes = pointer.From(props.AddressPrefixes)
					schema.NumberOfIPAddressesToAllocate = pointer.From(props.NumberOfIPAddressesToAllocate)
				}
			}

			return metadata.Encode(&schema)
		},
	}
}
