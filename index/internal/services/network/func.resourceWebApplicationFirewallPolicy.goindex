package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceWebApplicationFirewallPolicy() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceWebApplicationFirewallPolicyCreate,
		Read:   resourceWebApplicationFirewallPolicyRead,
		Update: resourceWebApplicationFirewallPolicyUpdate,
		Delete: resourceWebApplicationFirewallPolicyDelete,
		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := webapplicationfirewallpolicies.ParseApplicationGatewayWebApplicationFirewallPolicyID(id)
			return err
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		SchemaVersion: 1,
		StateUpgraders: pluginsdk.StateUpgrades(map[int]pluginsdk.StateUpgrade{
			0: migration.WebApplicationFirewallPolicyV0ToV1{},
		}),

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validation.StringIsNotEmpty,
			},

			"location": commonschema.Location(),

			"resource_group_name": azure.SchemaResourceGroupNameDiffSuppress(),

			"custom_rules": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"action": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(webapplicationfirewallpolicies.WebApplicationFirewallActionAllow),
								string(webapplicationfirewallpolicies.WebApplicationFirewallActionBlock),
								string(webapplicationfirewallpolicies.WebApplicationFirewallActionLog),
							}, false),
						},
						"enabled": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
							Default:  true,
						},
						"match_conditions": {
							Type:     pluginsdk.TypeList,
							Required: true,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"match_values": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type: pluginsdk.TypeString,
										},
									},
									"match_variables": {
										Type:     pluginsdk.TypeList,
										Required: true,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"variable_name": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														string(webapplicationfirewallpolicies.WebApplicationFirewallMatchVariableRemoteAddr),
														string(webapplicationfirewallpolicies.WebApplicationFirewallMatchVariableRequestMethod),
														string(webapplicationfirewallpolicies.WebApplicationFirewallMatchVariableQueryString),
														string(webapplicationfirewallpolicies.WebApplicationFirewallMatchVariablePostArgs),
														string(webapplicationfirewallpolicies.WebApplicationFirewallMatchVariableRequestUri),
														string(webapplicationfirewallpolicies.WebApplicationFirewallMatchVariableRequestHeaders),
														string(webapplicationfirewallpolicies.WebApplicationFirewallMatchVariableRequestBody),
														string(webapplicationfirewallpolicies.WebApplicationFirewallMatchVariableRequestCookies),
													}, false),
												},
												"selector": {
													Type:     pluginsdk.TypeString,
													Optional: true,
												},
											},
										},
									},
									"operator": {
										Type:     pluginsdk.TypeString,
										Required: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorAny),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorIPMatch),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorGeoMatch),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorEqual),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorContains),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorLessThan),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorGreaterThan),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorLessThanOrEqual),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorGreaterThanOrEqual),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorBeginsWith),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorEndsWith),
											string(webapplicationfirewallpolicies.WebApplicationFirewallOperatorRegex),
										}, false),
									},
									"negation_condition": {
										Type:     pluginsdk.TypeBool,
										Optional: true,
									},
									"transforms": {
										Type:     pluginsdk.TypeSet,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type:         pluginsdk.TypeString,
											ValidateFunc: validation.StringInSlice(webapplicationfirewallpolicies.PossibleValuesForWebApplicationFirewallTransform(), false),
										},
									},
								},
							},
						},
						"priority": {
							Type:     pluginsdk.TypeInt,
							Required: true,
						},
						"rule_type": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(webapplicationfirewallpolicies.WebApplicationFirewallRuleTypeMatchRule),
								string(webapplicationfirewallpolicies.WebApplicationFirewallRuleTypeRateLimitRule),
								string(webapplicationfirewallpolicies.WebApplicationFirewallRuleTypeInvalid),
							}, false),
						},
						"name": {
							Type:     pluginsdk.TypeString,
							Optional: true,
						},
						"rate_limit_duration": {
							Type:         pluginsdk.TypeString,
							Optional:     true,
							ValidateFunc: validation.StringInSlice(webapplicationfirewallpolicies.PossibleValuesForApplicationGatewayFirewallRateLimitDuration(), false),
						},
						"rate_limit_threshold": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							ValidateFunc: validation.IntAtLeast(1),
						},
						"group_rate_limit_by": {
							// group variables combination not supported yet, use a single variable name
							Type:         pluginsdk.TypeString,
							Optional:     true,
							ValidateFunc: validation.StringInSlice(webapplicationfirewallpolicies.PossibleValuesForApplicationGatewayFirewallUserSessionVariable(), false),
						},
					},
				},
			},

			"managed_rules": {
				Type:     pluginsdk.TypeList,
				Required: true,
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"exclusion": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"match_variable": {
										Type:     pluginsdk.TypeString,
										Required: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntryMatchVariableRequestArgKeys),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntryMatchVariableRequestArgNames),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntryMatchVariableRequestArgValues),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntryMatchVariableRequestCookieKeys),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntryMatchVariableRequestCookieNames),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntryMatchVariableRequestCookieValues),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntryMatchVariableRequestHeaderKeys),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntryMatchVariableRequestHeaderNames),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntryMatchVariableRequestHeaderValues),
										}, false),
									},
									"selector": {
										Type:         pluginsdk.TypeString,
										Required:     true,
										ValidateFunc: validation.NoZeroValues,
									},
									"selector_match_operator": {
										Type:     pluginsdk.TypeString,
										Required: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntrySelectorMatchOperatorContains),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntrySelectorMatchOperatorEquals),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntrySelectorMatchOperatorEqualsAny),
											string(webapplicationfirewallpolicies.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
										}, false),
									},
									"excluded_rule_set": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										MaxItems: 1,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"type": {
													Type:         pluginsdk.TypeString,
													Optional:     true,
													Default:      "OWASP",
													ValidateFunc: validate.ValidateWebApplicationFirewallPolicyExclusionRuleSetType,
												},
												"version": {
													Type:         pluginsdk.TypeString,
													Optional:     true,
													Default:      "3.2",
													ValidateFunc: validate.ValidateWebApplicationFirewallPolicyExclusionRuleSetVersion,
												},
												"rule_group": {
													Type:     pluginsdk.TypeList,
													Optional: true,
													Elem: &pluginsdk.Resource{
														Schema: map[string]*pluginsdk.Schema{
															"rule_group_name": {
																Type:         pluginsdk.TypeString,
																Required:     true,
																ValidateFunc: validate.ValidateWebApplicationFirewallPolicyRuleGroupName,
															},
															"excluded_rules": {
																Type:     pluginsdk.TypeList,
																Optional: true,
																Elem: &pluginsdk.Schema{
																	Type: pluginsdk.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"managed_rule_set": {
							Type:     pluginsdk.TypeList,
							Required: true,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"type": {
										Type:         pluginsdk.TypeString,
										Optional:     true,
										Default:      "OWASP",
										ValidateFunc: validate.ValidateWebApplicationFirewallPolicyRuleSetType,
									},
									"version": {
										Type:         pluginsdk.TypeString,
										Required:     true,
										ValidateFunc: validate.ValidateWebApplicationFirewallPolicyRuleSetVersion,
									},
									"rule_group_override": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"rule_group_name": {
													Type:         pluginsdk.TypeString,
													Required:     true,
													ValidateFunc: validate.ValidateWebApplicationFirewallPolicyRuleGroupName,
												},
												"rule": {
													Type:     pluginsdk.TypeList,
													Optional: true,
													Elem: &pluginsdk.Resource{
														Schema: map[string]*pluginsdk.Schema{
															"id": {
																Type:         pluginsdk.TypeString,
																Required:     true,
																ValidateFunc: validation.StringIsNotEmpty,
															},

															"enabled": {
																Type:     pluginsdk.TypeBool,
																Optional: true,
																Default:  false,
															},

															"action": {
																Type:     pluginsdk.TypeString,
																Optional: true,
																ValidateFunc: validation.StringInSlice([]string{
																	string(webapplicationfirewallpolicies.ActionTypeAllow),
																	string(webapplicationfirewallpolicies.ActionTypeAnomalyScoring),
																	string(webapplicationfirewallpolicies.ActionTypeBlock),
																	string(webapplicationfirewallpolicies.ActionTypeJSChallenge),
																	string(webapplicationfirewallpolicies.ActionTypeLog),
																}, false),
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"policy_settings": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"enabled": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
							Default:  true,
						},

						"mode": {
							Type:     pluginsdk.TypeString,
							Optional: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(webapplicationfirewallpolicies.WebApplicationFirewallModePrevention),
								string(webapplicationfirewallpolicies.WebApplicationFirewallModeDetection),
							}, false),
							Default: string(webapplicationfirewallpolicies.WebApplicationFirewallModePrevention),
						},

						"request_body_check": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
							Default:  true,
						},

						"file_upload_limit_in_mb": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							ValidateFunc: validation.IntBetween(1, 4000),
							Default:      100,
						},

						"request_body_enforcement": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
							Default:  true,
						},

						"file_upload_enforcement": {
							Type: pluginsdk.TypeBool,
							/*
								NOTE: O+C: This value defaults to true but is only available under certain conditions (i.e. when version is 3.2)
									managed_rules {
										managed_rule_set {
										  type    = "OWASP"
										  version = "3.2"
										}
									  }
							*/
							Optional: true,
							// We'll remove computed in 5.0 so we don't break existing configurations
							Computed: !features.FivePointOh(),
						},

						"max_request_body_size_in_kb": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							ValidateFunc: validation.IntBetween(8, 2000),
							Default:      128,
						},

						"request_body_inspect_limit_in_kb": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							Default:      128,
							ValidateFunc: validation.IntAtLeast(0),
						},

						"js_challenge_cookie_expiration_in_minutes": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							Default:      30,
							ValidateFunc: validation.IntBetween(5, 1440),
						},

						"log_scrubbing": {
							Type:     pluginsdk.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"enabled": {
										Type:     pluginsdk.TypeBool,
										Optional: true,
										Default:  true,
									},

									"rule": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"enabled": {
													Type:     pluginsdk.TypeBool,
													Optional: true,
													Default:  true,
												},

												"match_variable": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice(
														webapplicationfirewallpolicies.PossibleValuesForScrubbingRuleEntryMatchVariable(),
														false),
												},

												"selector_match_operator": {
													Type:     pluginsdk.TypeString,
													Optional: true,
													Default:  "Equals",
													ValidateFunc: validation.StringInSlice(
														webapplicationfirewallpolicies.PossibleValuesForScrubbingRuleEntryMatchOperator(),
														false),
												},

												"selector": {
													Type:        pluginsdk.TypeString,
													Optional:    true,
													Description: "When matchVariable is a collection, operator used to specify which elements in the collection this rule applies to.",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"http_listener_ids": {
				Type:     pluginsdk.TypeList,
				Computed: true,
				Elem:     &pluginsdk.Schema{Type: pluginsdk.TypeString},
			},

			"path_based_rule_ids": {
				Type:     pluginsdk.TypeList,
				Computed: true,
				Elem:     &pluginsdk.Schema{Type: pluginsdk.TypeString},
			},

			"tags": commonschema.Tags(),
		},
	}
}
