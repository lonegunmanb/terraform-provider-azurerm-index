package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"context"
	"fmt"
	"log"
	"math"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/expressroutecircuits"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/localnetworkgateways"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/virtualnetworkgatewayconnections"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/virtualnetworkgateways"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceVirtualNetworkGatewayConnectionCreate,
		Read:   resourceVirtualNetworkGatewayConnectionRead,
		Update: resourceVirtualNetworkGatewayConnectionUpdate,
		Delete: resourceVirtualNetworkGatewayConnectionDelete,

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := virtualnetworkgatewayconnections.ParseConnectionID(id)
			return err
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validation.StringIsNotEmpty,
			},

			"resource_group_name": commonschema.ResourceGroupName(),

			"location": commonschema.Location(),

			"type": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionTypeExpressRoute),
					string(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionTypeIPsec),
					string(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionTypeVnetTwoVnet),
				}, false),
			},

			"virtual_network_gateway_id": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: virtualnetworkgateways.ValidateVirtualNetworkGatewayID,
			},

			"shared_key": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				// NOTE: O+C the API generates a key for the user if not supplied
				Computed:  true,
				Sensitive: true,
			},

			"authorization_key": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				Sensitive:    true,
				ValidateFunc: validation.StringIsNotEmpty,
			},

			"dpd_timeout_seconds": {
				Type:     pluginsdk.TypeInt,
				Optional: true,
				ForceNew: true,
			},

			"express_route_circuit_id": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: expressroutecircuits.ValidateExpressRouteCircuitID,
			},

			"egress_nat_rule_ids": {
				Type:     pluginsdk.TypeSet,
				Optional: true,
				Elem: &pluginsdk.Schema{
					Type:         pluginsdk.TypeString,
					ValidateFunc: virtualnetworkgateways.ValidateVirtualNetworkGatewayNatRuleID,
				},
			},

			"ingress_nat_rule_ids": {
				Type:     pluginsdk.TypeSet,
				Optional: true,
				Elem: &pluginsdk.Schema{
					Type:         pluginsdk.TypeString,
					ValidateFunc: virtualnetworkgateways.ValidateVirtualNetworkGatewayNatRuleID,
				},
			},

			"peer_virtual_network_gateway_id": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: virtualnetworkgateways.ValidateVirtualNetworkGatewayID,
			},

			"local_azure_ip_address_enabled": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				ForceNew: true,
			},

			"local_network_gateway_id": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ValidateFunc: localnetworkgateways.ValidateLocalNetworkGatewayID,
			},

			// TODO 4.0: change this from enable_* to *_enabled
			"enable_bgp": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Computed: true,
			},

			"use_policy_based_traffic_selectors": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Computed: true,
			},

			"routing_weight": {
				Type:         pluginsdk.TypeInt,
				Optional:     true,
				Computed:     true,
				ValidateFunc: validation.IntBetween(0, 32000),
			},

			"express_route_gateway_bypass": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Computed: true,
			},

			"private_link_fast_path_enabled": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Default:  false,
			},

			"connection_protocol": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionProtocolIKEvOne),
					string(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionProtocolIKEvTwo),
				}, false),
			},

			"connection_mode": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionModeInitiatorOnly),
					string(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionModeResponderOnly),
					string(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionModeDefault),
				}, false),
				Default: string(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionModeDefault),
			},

			"traffic_selector_policy": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"local_address_cidrs": {
							Type:     pluginsdk.TypeList,
							Required: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
							},
						},
						"remote_address_cidrs": {
							Type:     pluginsdk.TypeList,
							Required: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
							},
						},
					},
				},
			},

			"custom_bgp_addresses": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"primary": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ValidateFunc: validation.Any(validation.IsIPv4Address),
						},
						"secondary": {
							Type:         pluginsdk.TypeString,
							Optional:     true,
							ValidateFunc: validation.Any(validation.IsIPv4Address),
						},
					},
				},
			},

			"ipsec_policy": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"dh_group": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(virtualnetworkgatewayconnections.DhGroupDHGroupOne),
								string(virtualnetworkgatewayconnections.DhGroupDHGroupOneFour),
								string(virtualnetworkgatewayconnections.DhGroupDHGroupTwo),
								string(virtualnetworkgatewayconnections.DhGroupDHGroupTwoZeroFourEight),
								string(virtualnetworkgatewayconnections.DhGroupDHGroupTwoFour),
								string(virtualnetworkgatewayconnections.DhGroupECPTwoFiveSix),
								string(virtualnetworkgatewayconnections.DhGroupECPThreeEightFour),
								string(virtualnetworkgatewayconnections.DhGroupNone),
							}, false),
						},

						"ike_encryption": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(virtualnetworkgatewayconnections.IkeEncryptionAESOneTwoEight),
								string(virtualnetworkgatewayconnections.IkeEncryptionAESOneNineTwo),
								string(virtualnetworkgatewayconnections.IkeEncryptionAESTwoFiveSix),
								string(virtualnetworkgatewayconnections.IkeEncryptionDES),
								string(virtualnetworkgatewayconnections.IkeEncryptionDESThree),
								string(virtualnetworkgatewayconnections.IkeEncryptionGCMAESOneTwoEight),
								string(virtualnetworkgatewayconnections.IkeEncryptionGCMAESTwoFiveSix),
							}, false),
						},

						"ike_integrity": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(virtualnetworkgatewayconnections.IkeIntegrityGCMAESOneTwoEight),
								string(virtualnetworkgatewayconnections.IkeIntegrityGCMAESTwoFiveSix),
								string(virtualnetworkgatewayconnections.IkeIntegrityMDFive),
								string(virtualnetworkgatewayconnections.IkeIntegritySHAOne),
								string(virtualnetworkgatewayconnections.IkeIntegritySHATwoFiveSix),
								string(virtualnetworkgatewayconnections.IkeIntegritySHAThreeEightFour),
							}, false),
						},

						"ipsec_encryption": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(virtualnetworkgatewayconnections.IPsecEncryptionAESOneTwoEight),
								string(virtualnetworkgatewayconnections.IPsecEncryptionAESOneNineTwo),
								string(virtualnetworkgatewayconnections.IPsecEncryptionAESTwoFiveSix),
								string(virtualnetworkgatewayconnections.IPsecEncryptionDES),
								string(virtualnetworkgatewayconnections.IPsecEncryptionDESThree),
								string(virtualnetworkgatewayconnections.IPsecEncryptionGCMAESOneTwoEight),
								string(virtualnetworkgatewayconnections.IPsecEncryptionGCMAESOneNineTwo),
								string(virtualnetworkgatewayconnections.IPsecEncryptionGCMAESTwoFiveSix),
								string(virtualnetworkgatewayconnections.IPsecEncryptionNone),
							}, false),
						},

						"ipsec_integrity": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(virtualnetworkgatewayconnections.IPsecIntegrityGCMAESOneTwoEight),
								string(virtualnetworkgatewayconnections.IPsecIntegrityGCMAESOneNineTwo),
								string(virtualnetworkgatewayconnections.IPsecIntegrityGCMAESTwoFiveSix),
								string(virtualnetworkgatewayconnections.IPsecIntegrityMDFive),
								string(virtualnetworkgatewayconnections.IPsecIntegritySHAOne),
								string(virtualnetworkgatewayconnections.IPsecIntegritySHATwoFiveSix),
							}, false),
						},

						"pfs_group": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(virtualnetworkgatewayconnections.PfsGroupECPTwoFiveSix),
								string(virtualnetworkgatewayconnections.PfsGroupECPThreeEightFour),
								string(virtualnetworkgatewayconnections.PfsGroupNone),
								string(virtualnetworkgatewayconnections.PfsGroupPFSOne),
								string(virtualnetworkgatewayconnections.PfsGroupPFSOneFour),
								string(virtualnetworkgatewayconnections.PfsGroupPFSTwo),
								string(virtualnetworkgatewayconnections.PfsGroupPFSTwoZeroFourEight),
								string(virtualnetworkgatewayconnections.PfsGroupPFSTwoFour),
								string(virtualnetworkgatewayconnections.PfsGroupPFSMM),
							}, false),
						},

						"sa_datasize": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							Computed:     true,
							ValidateFunc: validation.IntBetween(0, math.MaxInt32),
						},

						"sa_lifetime": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							Computed:     true,
							ValidateFunc: validation.IntAtLeast(300),
						},
					},
				},
			},

			"tags": commonschema.Tags(),
		},
	}
}
