package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/applicationgateways"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
	networkValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandApplicationGatewaySslProfiles(d *pluginsdk.ResourceData, gatewayID string) *[]applicationgateways.ApplicationGatewaySslProfile {
	vs := d.Get("ssl_profile").([]interface{})
	results := make([]applicationgateways.ApplicationGatewaySslProfile, 0)

	for _, raw := range vs {
		v := raw.(map[string]interface{})

		name := v["name"].(string)
		verifyClientCertIssuerDn := v["verify_client_cert_issuer_dn"].(bool)
		verifyClientCertificateRevocation := applicationgateways.ApplicationGatewayClientRevocationOptionsNone
		if v["verify_client_certificate_revocation"].(string) != "" {
			verifyClientCertificateRevocation = applicationgateways.ApplicationGatewayClientRevocationOptions(v["verify_client_certificate_revocation"].(string))
		}

		output := applicationgateways.ApplicationGatewaySslProfile{
			Name: pointer.To(name),
			Properties: &applicationgateways.ApplicationGatewaySslProfilePropertiesFormat{
				ClientAuthConfiguration: &applicationgateways.ApplicationGatewayClientAuthConfiguration{
					VerifyClientCertIssuerDN: pointer.To(verifyClientCertIssuerDn),
					VerifyClientRevocation:   pointer.To(verifyClientCertificateRevocation),
				},
			},
		}

		if v["trusted_client_certificate_names"] != nil {
			clientCerts := v["trusted_client_certificate_names"].([]interface{})
			clientCertSubResources := make([]applicationgateways.SubResource, 0)

			for _, rawClientCert := range clientCerts {
				clientCertName := rawClientCert
				clientCertID := fmt.Sprintf("%s/trustedClientCertificates/%s", gatewayID, clientCertName)
				clientCertSubResource := applicationgateways.SubResource{
					Id: pointer.To(clientCertID),
				}
				clientCertSubResources = append(clientCertSubResources, clientCertSubResource)
			}
			output.Properties.TrustedClientCertificates = &clientCertSubResources
		}

		sslPolicy := v["ssl_policy"].([]interface{})
		if len(sslPolicy) > 0 {
			output.Properties.SslPolicy = expandApplicationGatewaySslPolicy(sslPolicy)
		} else {
			output.Properties.SslPolicy = nil
		}
		results = append(results, output)
	}

	return &results
}
