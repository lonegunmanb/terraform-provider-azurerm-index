package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"context"
	"fmt"
	"log"
	"math"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/expressroutecircuits"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/localnetworkgateways"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/virtualnetworkgatewayconnections"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/virtualnetworkgateways"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func getVirtualNetworkGatewayConnectionProperties(d *pluginsdk.ResourceData, virtualNetworkGateway virtualnetworkgateways.VirtualNetworkGateway) (*virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionPropertiesFormat, error) {
	connectionType := virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionType(d.Get("type").(string))
	connectionMode := virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionMode(d.Get("connection_mode").(string))

	props := &virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionPropertiesFormat{
		ConnectionType:                 connectionType,
		ConnectionMode:                 pointer.To(connectionMode),
		EnableBgp:                      pointer.To(d.Get("enable_bgp").(bool)),
		EnablePrivateLinkFastPath:      pointer.To(d.Get("private_link_fast_path_enabled").(bool)),
		ExpressRouteGatewayBypass:      pointer.To(d.Get("express_route_gateway_bypass").(bool)),
		UsePolicyBasedTrafficSelectors: pointer.To(d.Get("use_policy_based_traffic_selectors").(bool)),
	}

	if virtualNetworkGateway.Name != nil && virtualNetworkGateway.Id != nil {
		props.VirtualNetworkGateway1 = virtualnetworkgatewayconnections.VirtualNetworkGateway{
			Id:   virtualNetworkGateway.Id,
			Name: virtualNetworkGateway.Name,
			Properties: virtualnetworkgatewayconnections.VirtualNetworkGatewayPropertiesFormat{
				IPConfigurations: &[]virtualnetworkgatewayconnections.VirtualNetworkGatewayIPConfiguration{},
			},
		}
	}

	if v, ok := d.GetOk("authorization_key"); ok {
		authorizationKey := v.(string)
		props.AuthorizationKey = &authorizationKey
	}

	if v, ok := d.GetOk("dpd_timeout_seconds"); ok {
		props.DpdTimeoutSeconds = pointer.To(int64(v.(int)))
	}

	if v, ok := d.GetOk("express_route_circuit_id"); ok {
		expressRouteCircuitId := v.(string)
		props.Peer = &virtualnetworkgatewayconnections.SubResource{
			Id: &expressRouteCircuitId,
		}
	}

	if v, ok := d.GetOk("egress_nat_rule_ids"); ok {
		props.EgressNatRules = expandVirtualNetworkGatewayConnectionNatRuleIds(v.(*pluginsdk.Set).List())
	}

	if v, ok := d.GetOk("ingress_nat_rule_ids"); ok {
		props.IngressNatRules = expandVirtualNetworkGatewayConnectionNatRuleIds(v.(*pluginsdk.Set).List())
	}

	if v, ok := d.GetOk("peer_virtual_network_gateway_id"); ok {
		gwid, err := virtualnetworkgateways.ParseVirtualNetworkGatewayID(v.(string))
		if err != nil {
			return nil, err
		}
		props.VirtualNetworkGateway2 = &virtualnetworkgatewayconnections.VirtualNetworkGateway{
			Id:   pointer.To(gwid.ID()),
			Name: &gwid.VirtualNetworkGatewayName,
			Properties: virtualnetworkgatewayconnections.VirtualNetworkGatewayPropertiesFormat{
				IPConfigurations: &[]virtualnetworkgatewayconnections.VirtualNetworkGatewayIPConfiguration{},
			},
		}
	}

	if v, ok := d.GetOk("local_azure_ip_address_enabled"); ok {
		props.UseLocalAzureIPAddress = pointer.To(v.(bool))
	}

	if v, ok := d.GetOk("local_network_gateway_id"); ok {
		localNetworkGatewayId := v.(string)
		name, err := localNetworkGatewayFromId(localNetworkGatewayId)
		if err != nil {
			return nil, fmt.Errorf("getting LocalNetworkGateway Name and Group: %+v", err)
		}

		props.LocalNetworkGateway2 = &virtualnetworkgatewayconnections.LocalNetworkGateway{
			Id:   &localNetworkGatewayId,
			Name: &name,
			Properties: virtualnetworkgatewayconnections.LocalNetworkGatewayPropertiesFormat{
				LocalNetworkAddressSpace: &virtualnetworkgatewayconnections.AddressSpace{},
			},
		}
	}

	if v, ok := d.GetOk("routing_weight"); ok {
		props.RoutingWeight = pointer.To(int64(v.(int)))
	}

	if v, ok := d.GetOk("shared_key"); ok {
		props.SharedKey = pointer.To(v.(string))
	}

	if v, ok := d.GetOk("connection_protocol"); ok {
		connectionProtocol := v.(string)
		props.ConnectionProtocol = pointer.To(virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionProtocol(connectionProtocol))
	}

	if v, ok := d.GetOk("traffic_selector_policy"); ok {
		props.TrafficSelectorPolicies = expandVirtualNetworkGatewayConnectionTrafficSelectorPolicies(v.([]interface{}))
	}

	if v, ok := d.GetOk("ipsec_policy"); ok {
		props.IPsecPolicies = expandVirtualNetworkGatewayConnectionIpsecPolicies(v.([]interface{}))
	}

	if pointer.From(props.EnableBgp) {
		if _, ok := d.GetOk("custom_bgp_addresses"); ok {
			if virtualNetworkGateway.Properties.BgpSettings == nil || virtualNetworkGateway.Properties.BgpSettings.BgpPeeringAddresses == nil {
				return nil, fmt.Errorf("retrieving BGP peering address from `virtual_network_gateway` %s (%s) failed: get nil", *virtualNetworkGateway.Name, *virtualNetworkGateway.Id)
			}

			gatewayCustomBgpIPAddresses, err := expandGatewayCustomBgpIPAddresses(d, virtualNetworkGateway.Properties.BgpSettings.BgpPeeringAddresses)
			if err != nil {
				return nil, err
			}

			props.GatewayCustomBgpIPAddresses = gatewayCustomBgpIPAddresses
		}
	}

	if props.ConnectionType == virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionTypeExpressRoute {
		if props.Peer == nil || props.Peer.Id == nil {
			return nil, fmt.Errorf("`express_route_circuit_id` must be specified when `type` is set to `ExpressRoute`")
		}
		if d.Get("private_link_fast_path_enabled").(bool) && !d.Get("express_route_gateway_bypass").(bool) {
			return nil, fmt.Errorf("`express_route_gateway_bypass` must be enabled when `private_link_fast_path_enabled` is set to `true`")
		}
	}

	if props.ConnectionType == virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionTypeIPsec {
		if props.LocalNetworkGateway2 == nil || props.LocalNetworkGateway2.Id == nil {
			return nil, fmt.Errorf("`local_network_gateway_id` must be specified when `type` is set to `IPsec`")
		}
	}

	if props.ConnectionType == virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionTypeVnetTwoVnet {
		if props.VirtualNetworkGateway2 == nil || props.VirtualNetworkGateway2.Id == nil {
			return nil, fmt.Errorf("`peer_virtual_network_gateway_id` must be specified when `type` is set to `Vnet2Vnet`")
		}
	}

	if props.GatewayCustomBgpIPAddresses != nil && props.ConnectionType != virtualnetworkgatewayconnections.VirtualNetworkGatewayConnectionTypeIPsec {
		return nil, fmt.Errorf("`custom_bgp_addresses` can only be used when `type` is set to `IPsec`")
	}

	if props.GatewayCustomBgpIPAddresses != nil && virtualNetworkGateway.Properties.ActiveActive == pointer.To(false) {
		return nil, fmt.Errorf("`custom_bgp_addresses` can only be used when `azurerm_virtual_network_gateway` `active_active` is set enabled`")
	}

	return props, nil
}
