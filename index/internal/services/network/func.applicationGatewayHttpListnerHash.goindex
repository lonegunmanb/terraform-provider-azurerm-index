package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/applicationgateways"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
	networkValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func applicationGatewayHttpListnerHash(v interface{}) int {
	var buf bytes.Buffer

	if m, ok := v.(map[string]interface{}); ok {
		buf.WriteString(m["name"].(string))
		buf.WriteString(m["frontend_ip_configuration_name"].(string))
		buf.WriteString(m["frontend_port_name"].(string))
		buf.WriteString(m["protocol"].(string))
		if v, ok := m["host_name"]; ok {
			buf.WriteString(v.(string))
		}
		if hostNames, ok := m["host_names"]; ok {
			buf.WriteString(fmt.Sprintf("%s-", hostNames.(*pluginsdk.Set).List()))
		}
		if v, ok := m["ssl_certificate_name"]; ok {
			buf.WriteString(v.(string))
		}
		if v, ok := m["require_sni"]; ok {
			buf.WriteString(fmt.Sprintf("%t", v.(bool)))
		}
		if v, ok := m["firewall_policy_id"]; ok {
			buf.WriteString(strings.ToLower(v.(string)))
		}
		if v, ok := m["ssl_profile_name"]; ok {
			buf.WriteString(v.(string))
		}
		if customErrorConfiguration, ok := m["custom_error_configuration"].([]interface{}); ok {
			for _, customErrorAttrs := range customErrorConfiguration {
				customError := customErrorAttrs.(map[string]interface{})
				if statusCode, ok := customError["status_code"]; ok {
					buf.WriteString(statusCode.(string))
				}
				if pageUrl, ok := customError["custom_error_page_url"]; ok {
					buf.WriteString(pageUrl.(string))
				}
			}
		}
	}

	return pluginsdk.HashString(buf.String())
}
