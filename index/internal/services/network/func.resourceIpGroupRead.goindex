package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/azurefirewalls"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/firewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/ipgroups"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/firewall"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceIpGroupRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.Client.IPGroups
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := ipgroups.ParseIPGroupID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id, ipgroups.DefaultGetOperationOptions())
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	d.Set("name", id.IpGroupName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.NormalizeNilable(model.Location))

		if props := model.Properties; props != nil {
			if props.IPAddresses == nil {
				return fmt.Errorf("list of ipAddresses returned is nil")
			}
			if err := d.Set("cidrs", props.IPAddresses); err != nil {
				return fmt.Errorf("setting `cidrs`: %+v", err)
			}

			firewallIDs := make([]string, 0)
			for _, idStr := range getIds(props.Firewalls) {
				firewallID, err := azurefirewalls.ParseAzureFirewallIDInsensitively(idStr)
				if err != nil {
					return fmt.Errorf("parsing Azure Firewall ID %q: %+v", idStr, err)
				}
				firewallIDs = append(firewallIDs, firewallID.ID())
			}
			d.Set("firewall_ids", firewallIDs)

			firewallPolicyIDs := make([]string, 0)
			for _, idStr := range getIds(props.FirewallPolicies) {
				policyID, err := firewallpolicies.ParseFirewallPolicyIDInsensitively(idStr)
				if err != nil {
					return fmt.Errorf("parsing Azure Firewall Policy ID %q: %+v", idStr, err)
				}
				firewallPolicyIDs = append(firewallPolicyIDs, policyID.ID())
			}
			d.Set("firewall_policy_ids", firewallPolicyIDs)
		}
		return tags.FlattenAndSet(d, model.Tags)
	}
	return nil
}
