package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/localnetworkgateways"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceLocalNetworkGatewayCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.Client.LocalNetworkGateways
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := localnetworkgateways.NewLocalNetworkGatewayID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))

	existing, err := client.Get(ctx, id)
	if err != nil {
		if !response.WasNotFound(existing.HttpResponse) {
			return fmt.Errorf("checking for presence of existing %s: %s", id, err)
		}
	}

	if !response.WasNotFound(existing.HttpResponse) {
		return tf.ImportAsExistsError("azurerm_local_network_gateway", id.ID())
	}

	gateway := localnetworkgateways.LocalNetworkGateway{
		Name:     pointer.To(id.LocalNetworkGatewayName),
		Location: pointer.To(location.Normalize(d.Get("location").(string))),
		Properties: localnetworkgateways.LocalNetworkGatewayPropertiesFormat{
			LocalNetworkAddressSpace: &localnetworkgateways.AddressSpace{},
			BgpSettings:              expandLocalNetworkGatewayBGPSettings(d),
		},
		Tags: tags.Expand(d.Get("tags").(map[string]interface{})),
	}

	ipAddress := d.Get("gateway_address").(string)
	fqdn := d.Get("gateway_fqdn").(string)
	if ipAddress != "" {
		gateway.Properties.GatewayIPAddress = &ipAddress
	} else {
		gateway.Properties.Fqdn = &fqdn
	}

	// This custompoller can be removed once https://github.com/hashicorp/go-azure-sdk/issues/989 has been fixed
	pollerType := custompollers.NewLocalNetworkGatewayPoller(client, id)
	poller := pollers.NewPoller(pollerType, 10*time.Second, pollers.DefaultNumberOfDroppedConnectionsToAllow)

	gateway.Properties.LocalNetworkAddressSpace = expandLocalNetworkGatewayAddressSpaces(d)

	if _, err := client.CreateOrUpdate(ctx, id, gateway); err != nil {
		return fmt.Errorf("creating %s: %+v", id, err)
	}

	if err := poller.PollUntilDone(ctx); err != nil {
		return err
	}

	d.SetId(id.ID())

	return resourceLocalNetworkGatewayRead(d, meta)
}
