package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/networkprofiles"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandNetworkProfileVirtualNetworkSubnetNames(input *[]networkprofiles.ContainerNetworkInterfaceConfiguration) (*[]string, *[]string, error) {
	subnetNames := make([]string, 0)
	vnetNames := make([]string, 0)

	if input != nil {
		for _, item := range *input {
			if item.Properties == nil || item.Properties.IPConfigurations == nil {
				continue
			}

			for _, config := range *item.Properties.IPConfigurations {
				if config.Properties == nil || config.Properties.Subnet == nil || config.Properties.Subnet.Id == nil {
					continue
				}

				subnetId, err := commonids.ParseSubnetIDInsensitively(*config.Properties.Subnet.Id)
				if err != nil {
					return nil, nil, err
				}

				if !utils.SliceContainsValue(subnetNames, subnetId.SubnetName) {
					subnetNames = append(subnetNames, subnetId.SubnetName)
				}

				if !utils.SliceContainsValue(vnetNames, subnetId.VirtualNetworkName) {
					vnetNames = append(vnetNames, subnetId.VirtualNetworkName)
				}
			}
		}
	}

	return &subnetNames, &vnetNames, nil
}
