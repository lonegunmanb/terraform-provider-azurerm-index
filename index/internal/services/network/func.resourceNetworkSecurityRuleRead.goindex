package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/securityrules"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceNetworkSecurityRuleRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.SecurityRules
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := securityrules.ParseSecurityRuleID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}
		return fmt.Errorf("making Read request on %s: %+v", *id, err)
	}

	d.Set("name", id.SecurityRuleName)
	d.Set("resource_group_name", id.ResourceGroupName)
	d.Set("network_security_group_name", id.NetworkSecurityGroupName)

	// For fixing the case insensitive issue for the NSR protocol in Azure
	// See: https://github.com/hashicorp/terraform-provider-azurerm/issues/16092
	protocolMap := map[string]securityrules.SecurityRuleProtocol{}
	for _, protocol := range securityrules.PossibleValuesForSecurityRuleProtocol() {
		protocolMap[strings.ToLower(protocol)] = securityrules.SecurityRuleProtocol(protocol)
	}

	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			d.Set("description", props.Description)
			d.Set("protocol", string(protocolMap[strings.ToLower(string(props.Protocol))]))
			d.Set("destination_address_prefix", props.DestinationAddressPrefix)
			d.Set("destination_address_prefixes", props.DestinationAddressPrefixes)
			d.Set("destination_port_range", props.DestinationPortRange)
			d.Set("destination_port_ranges", props.DestinationPortRanges)
			d.Set("source_address_prefix", props.SourceAddressPrefix)
			d.Set("source_address_prefixes", props.SourceAddressPrefixes)
			d.Set("source_port_range", props.SourcePortRange)
			d.Set("source_port_ranges", props.SourcePortRanges)
			d.Set("access", string(props.Access))
			d.Set("priority", int(props.Priority))
			d.Set("direction", string(props.Direction))

			if err := d.Set("source_application_security_group_ids", flattenApplicationSecurityGroupIds(props.SourceApplicationSecurityGroups)); err != nil {
				return fmt.Errorf("setting `source_application_security_group_ids`: %+v", err)
			}

			if err := d.Set("destination_application_security_group_ids", flattenApplicationSecurityGroupIds(props.DestinationApplicationSecurityGroups)); err != nil {
				return fmt.Errorf("setting `source_application_security_group_ids`: %+v", err)
			}
		}
	}

	return pluginsdk.SetResourceIdentityData(d, id)
}
