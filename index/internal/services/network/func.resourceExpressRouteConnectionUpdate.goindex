package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/expressroutegateways"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/virtualwans"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/expressrouteconnections"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceExpressRouteConnectionUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.ExpressRouteConnections
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := expressrouteconnections.ParseExpressRouteConnectionID(d.Id())
	if err != nil {
		return err
	}

	parameters := expressrouteconnections.ExpressRouteConnection{
		Name: id.ExpressRouteConnectionName,
		Properties: &expressrouteconnections.ExpressRouteConnectionProperties{
			ExpressRouteCircuitPeering: expressrouteconnections.ExpressRouteCircuitPeeringId{
				Id: pointer.To(d.Get("express_route_circuit_peering_id").(string)),
			},
			EnableInternetSecurity:    pointer.To(d.Get("enable_internet_security").(bool)),
			RoutingConfiguration:      expandExpressRouteConnectionRouting(d.Get("routing").([]interface{})),
			RoutingWeight:             pointer.To(int64(d.Get("routing_weight").(int))),
			ExpressRouteGatewayBypass: pointer.To(d.Get("express_route_gateway_bypass_enabled").(bool)),
		},
	}

	if v, ok := d.GetOk("authorization_key"); ok {
		parameters.Properties.AuthorizationKey = pointer.To(v.(string))
	}

	if err := client.CreateOrUpdateThenPoll(ctx, *id, parameters); err != nil {
		return fmt.Errorf("updating %s: %+v", id, err)
	}

	return resourceExpressRouteConnectionRead(d, meta)
}
