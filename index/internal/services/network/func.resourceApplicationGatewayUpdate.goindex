package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/applicationgateways"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
	networkValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceApplicationGatewayUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.ApplicationGateways
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := applicationgateways.ParseApplicationGatewayID(d.Id())
	if err != nil {
		return err
	}

	existing, err := client.Get(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	if existing.Model == nil {
		return fmt.Errorf("retrieving %s: `model` was nil", id)
	}

	payload := existing.Model

	if d.HasChange("tags") {
		payload.Tags = tags.Expand(d.Get("tags").(map[string]interface{}))
	}

	if payload.Properties == nil {
		payload.Properties = &applicationgateways.ApplicationGatewayPropertiesFormat{}
	}

	if d.HasChange("enable_http2") {
		payload.Properties.EnableHTTP2 = pointer.To(d.Get("enable_http2").(bool))
	}

	if d.HasChange("trusted_root_certificate") {
		trustedRootCertificates, err := expandApplicationGatewayTrustedRootCertificates(d.Get("trusted_root_certificate").([]interface{}))
		if err != nil {
			return fmt.Errorf("expanding `trusted_root_certificate`: %+v", err)
		}
		payload.Properties.TrustedRootCertificates = trustedRootCertificates
	}

	if d.HasChange("request_routing_rule") {
		requestRoutingRules, err := expandApplicationGatewayRequestRoutingRules(d, id.ID())
		if err != nil {
			return fmt.Errorf("expanding `request_routing_rule`: %+v", err)
		}
		payload.Properties.RequestRoutingRules = requestRoutingRules
	}

	if d.HasChange("url_path_map") {
		urlPathMaps, err := expandApplicationGatewayURLPathMaps(d, id.ID())
		if err != nil {
			return fmt.Errorf("expanding `url_path_map`: %+v", err)
		}

		payload.Properties.UrlPathMaps = urlPathMaps
	}

	if d.HasChange("redirect_configuration") {
		redirectConfigurations, err := expandApplicationGatewayRedirectConfigurations(d, id.ID())
		if err != nil {
			return fmt.Errorf("expanding `redirect_configuration`: %+v", err)
		}

		payload.Properties.RedirectConfigurations = redirectConfigurations
	}

	if d.HasChange("ssl_certificate") {
		sslCertificates, err := expandApplicationGatewaySslCertificates(d)
		if err != nil {
			return fmt.Errorf("expanding `ssl_certificate`: %+v", err)
		}

		payload.Properties.SslCertificates = sslCertificates
	}

	if d.HasChange("trusted_client_certificate") {
		trustedClientCertificates, err := expandApplicationGatewayTrustedClientCertificates(d)
		if err != nil {
			return fmt.Errorf("expanding `trusted_client_certificate`: %+v", err)
		}

		payload.Properties.TrustedClientCertificates = trustedClientCertificates
	}

	if d.HasChange("ssl_profile") {
		payload.Properties.SslProfiles = expandApplicationGatewaySslProfiles(d, id.ID())
	}

	gatewayIPConfigurations, stopApplicationGateway := expandApplicationGatewayIPConfigurations(d)
	if d.HasChange("gateway_ip_configuration") {
		payload.Properties.GatewayIPConfigurations = gatewayIPConfigurations
	}

	if d.HasChange("global") {
		globalConfiguration := expandApplicationGatewayGlobalConfiguration(d.Get("global").([]interface{}))
		payload.Properties.GlobalConfiguration = globalConfiguration
	}

	if d.HasChange("http_listener") {
		httpListeners, err := expandApplicationGatewayHTTPListeners(d, id.ID())
		if err != nil {
			return fmt.Errorf("fail to expand `http_listener`: %+v", err)
		}

		payload.Properties.HTTPListeners = httpListeners
	}

	if d.HasChange("rewrite_rule_set") {
		rewriteRuleSets, err := expandApplicationGatewayRewriteRuleSets(d)
		if err != nil {
			return fmt.Errorf("expanding `rewrite_rule_set`: %v", err)
		}

		payload.Properties.RewriteRuleSets = rewriteRuleSets
	}

	if d.HasChange("autoscale_configuration") {
		payload.Properties.AutoscaleConfiguration = expandApplicationGatewayAutoscaleConfiguration(d)
	}

	if d.HasChange("authentication_certificate") {
		payload.Properties.AuthenticationCertificates = expandApplicationGatewayAuthenticationCertificates(d.Get("authentication_certificate").([]interface{}))
	}

	if d.HasChange("custom_error_configuration") {
		payload.Properties.CustomErrorConfigurations = expandApplicationGatewayCustomErrorConfigurations(d.Get("custom_error_configuration").([]interface{}))
	}

	if d.HasChange("backend_address_pool") {
		payload.Properties.BackendAddressPools = expandApplicationGatewayBackendAddressPools(d)
	}

	if d.HasChange("backend_http_settings") {
		payload.Properties.BackendHTTPSettingsCollection = expandApplicationGatewayBackendHTTPSettings(d, id.ID())
	}

	if d.HasChange("frontend_ip_configuration") {
		payload.Properties.FrontendIPConfigurations = expandApplicationGatewayFrontendIPConfigurations(d, id.ID())
	}

	if d.HasChange("frontend_port") {
		payload.Properties.FrontendPorts = expandApplicationGatewayFrontendPorts(d)
	}

	if d.HasChange("private_link_configuration") {
		payload.Properties.PrivateLinkConfigurations = expandApplicationGatewayPrivateLinkConfigurations(d)
	}

	if d.HasChange("probe") {
		payload.Properties.Probes = expandApplicationGatewayProbes(d)
	}

	if d.HasChange("sku") {
		payload.Properties.Sku = expandApplicationGatewaySku(d)
	}

	if d.HasChange("ssl_policy") {
		payload.Properties.SslPolicy = expandApplicationGatewaySslPolicy(d.Get("ssl_policy").([]interface{}))
	}

	if d.HasChange("zones") {
		zones := zones.ExpandUntyped(d.Get("zones").(*schema.Set).List())
		if len(zones) > 0 {
			payload.Zones = &zones
		}
	}

	if d.HasChange("fips_enabled") {
		payload.Properties.EnableFips = pointer.To(d.Get("fips_enabled").(bool))
	}

	if d.HasChange("force_firewall_policy_association") {
		payload.Properties.ForceFirewallPolicyAssociation = pointer.To(d.Get("force_firewall_policy_association").(bool))
	}

	if _, ok := d.GetOk("identity"); ok {
		expandedIdentity, err := identity.ExpandSystemAndUserAssignedMap(d.Get("identity").([]interface{}))
		if err != nil {
			return fmt.Errorf("expanding `identity`: %+v", err)
		}

		payload.Identity = expandedIdentity
	}

	// validation (todo these should probably be moved into their respective expand functions, which would then return an error?)
	if payload.Properties != nil && payload.Properties.BackendHTTPSettingsCollection != nil {
		for _, backendHttpSettings := range *payload.Properties.BackendHTTPSettingsCollection {
			if props := backendHttpSettings.Properties; props != nil {
				if props.HostName == nil || props.PickHostNameFromBackendAddress == nil {
					continue
				}

				if *props.HostName != "" && *props.PickHostNameFromBackendAddress {
					return fmt.Errorf("only one of `host_name` or `pick_host_name_from_backend_address` can be set")
				}
			}
		}
	}

	if payload.Properties != nil && payload.Properties.Probes != nil {
		for _, probe := range *payload.Properties.Probes {
			if props := probe.Properties; props != nil {
				if props.Host == nil || props.PickHostNameFromBackendHTTPSettings == nil {
					continue
				}

				if *props.Host == "" && !*props.PickHostNameFromBackendHTTPSettings {
					return fmt.Errorf("one of `host` or `pick_host_name_from_backend_http_settings` must be set")
				}

				if *props.Host != "" && *props.PickHostNameFromBackendHTTPSettings {
					return fmt.Errorf("only one of `host` or `pick_host_name_from_backend_http_settings` can be set")
				}
			}
		}
	}

	if d.HasChange("waf_configuration") {
		payload.Properties.WebApplicationFirewallConfiguration = expandApplicationGatewayWafConfig(d)
	}

	appGWSkuTier := d.Get("sku.0.tier").(string)
	wafFileUploadLimit := d.Get("waf_configuration.0.file_upload_limit_mb").(int)

	if appGWSkuTier != string(applicationgateways.ApplicationGatewayTierWAFVTwo) && wafFileUploadLimit > 500 {
		return fmt.Errorf("only SKU `%s` allows `file_upload_limit_mb` to exceed 500MB", applicationgateways.ApplicationGatewayTierWAFVTwo)
	}

	if d.HasChange("firewall_policy_id") {
		if d.Get("firewall_policy_id").(string) != "" {
			payload.Properties.FirewallPolicy = &applicationgateways.SubResource{
				Id: pointer.To(d.Get("firewall_policy_id").(string)),
			}
		} else {
			payload.Properties.FirewallPolicy = nil
		}
	}

	if stopApplicationGateway {
		if err := client.StopThenPoll(ctx, *id); err != nil {
			return fmt.Errorf("stopping %s: %+v", id, err)
		}
	}

	if err := client.CreateOrUpdateThenPoll(ctx, *id, *payload); err != nil {
		return fmt.Errorf("updating %s: %+v", id, err)
	}

	if stopApplicationGateway {
		if err := client.StartThenPoll(ctx, *id); err != nil {
			return fmt.Errorf("starting %s: %+v", id, err)
		}
	}

	d.SetId(id.ID())
	return resourceApplicationGatewayRead(d, meta)
}
