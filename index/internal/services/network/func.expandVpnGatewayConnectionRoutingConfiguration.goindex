package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"fmt"
	"log"
	"math"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/virtualwans"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandVpnGatewayConnectionRoutingConfiguration(input []interface{}) *virtualwans.RoutingConfiguration {
	if len(input) == 0 || input[0] == nil {
		return nil
	}

	raw := input[0].(map[string]interface{})

	output := &virtualwans.RoutingConfiguration{
		AssociatedRouteTable: &virtualwans.SubResource{
			Id: utils.String(raw["associated_route_table"].(string)),
		},
	}

	if inboundRouteMapId := raw["inbound_route_map_id"].(string); inboundRouteMapId != "" {
		output.InboundRouteMap = &virtualwans.SubResource{
			Id: utils.String(inboundRouteMapId),
		}
	}

	if outboundRouteMapId := raw["outbound_route_map_id"].(string); outboundRouteMapId != "" {
		output.OutboundRouteMap = &virtualwans.SubResource{
			Id: utils.String(outboundRouteMapId),
		}
	}

	if v := raw["propagated_route_table"].([]interface{}); len(v) != 0 {
		output.PropagatedRouteTables = expandVpnGatewayConnectionPropagatedRouteTable(v)
	}

	return output
}
