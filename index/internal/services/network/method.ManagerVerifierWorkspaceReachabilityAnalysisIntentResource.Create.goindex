package github.com/hashicorp/terraform-provider-azurerm/internal/services/network
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cosmosdb/2024-08-15/cosmosdb"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/reachabilityanalysisintent"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/reachabilityanalysisintents"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ManagerVerifierWorkspaceReachabilityAnalysisIntentResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Network.ReachabilityAnalysisIntents
			subscriptionId := metadata.Client.Account.SubscriptionId

			var config ManagerVerifierWorkspaceReachabilityAnalysisIntentResourceModel
			if err := metadata.Decode(&config); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			workspaceId, err := reachabilityanalysisintents.ParseVerifierWorkspaceID(config.VerifierWorkspaceId)
			if err != nil {
				return err
			}

			id := reachabilityanalysisintents.NewReachabilityAnalysisIntentID(subscriptionId, workspaceId.ResourceGroupName, workspaceId.NetworkManagerName, workspaceId.VerifierWorkspaceName, config.Name)

			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}
			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			payload := reachabilityanalysisintents.ReachabilityAnalysisIntent{
				Name: pointer.To(config.Name),
				Properties: reachabilityanalysisintents.ReachabilityAnalysisIntentProperties{
					Description:           pointer.To(config.Description),
					SourceResourceId:      config.SourceResourceId,
					DestinationResourceId: config.DestinationResourceId,
					IPTraffic:             expandReachabilityAnalysisIntentIPTraffic(config.IpTraffic),
				},
			}

			if _, err := client.Create(ctx, id, payload); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)

			return nil
		},
	}
}
