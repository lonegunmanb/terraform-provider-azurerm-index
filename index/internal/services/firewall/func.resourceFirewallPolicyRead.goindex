package github.com/hashicorp/terraform-provider-azurerm/internal/services/firewall
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/firewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/firewall/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceFirewallPolicyRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.FirewallPolicies
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := firewallpolicies.ParseFirewallPolicyID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id, firewallpolicies.DefaultGetOperationOptions())
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] %s was not found - removing from state!", id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	d.Set("name", id.FirewallPolicyName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.NormalizeNilable(model.Location))

		if props := model.Properties; props != nil {
			basePolicyID := ""
			if props.BasePolicy != nil && props.BasePolicy.Id != nil {
				basePolicyID = *props.BasePolicy.Id
			}
			d.Set("base_policy_id", basePolicyID)

			d.Set("threat_intelligence_mode", string(pointer.From(props.ThreatIntelMode)))

			if sku := props.Sku; sku != nil {
				d.Set("sku", string(pointer.From(sku.Tier)))
			}

			if err := d.Set("threat_intelligence_allowlist", flattenFirewallPolicyThreatIntelWhitelist(props.ThreatIntelWhitelist)); err != nil {
				return fmt.Errorf(`setting "threat_intelligence_allowlist": %+v`, err)
			}

			if err := d.Set("dns", flattenFirewallPolicyDNSSetting(props.DnsSettings)); err != nil {
				return fmt.Errorf(`setting "dns": %+v`, err)
			}

			if err := d.Set("intrusion_detection", flattenFirewallPolicyIntrusionDetection(props.IntrusionDetection)); err != nil {
				return fmt.Errorf(`setting "intrusion_detection": %+v`, err)
			}

			if err := d.Set("tls_certificate", flattenFirewallPolicyTransportSecurity(props.TransportSecurity)); err != nil {
				return fmt.Errorf(`setting "tls_certificate": %+v`, err)
			}

			if err := d.Set("child_policies", flattenNetworkSubResourceID(props.ChildPolicies)); err != nil {
				return fmt.Errorf(`setting "child_policies": %+v`, err)
			}

			if err := d.Set("firewalls", flattenNetworkSubResourceID(props.Firewalls)); err != nil {
				return fmt.Errorf(`setting "firewalls": %+v`, err)
			}

			if err := d.Set("rule_collection_groups", flattenNetworkSubResourceID(props.RuleCollectionGroups)); err != nil {
				return fmt.Errorf(`setting "rule_collection_groups": %+v`, err)
			}

			var privateIPRanges []interface{}
			var isAutoLearnPrivateRangeEnabled bool
			if props.Snat != nil {
				privateIPRanges = utils.FlattenStringSlice(props.Snat.PrivateRanges)
				isAutoLearnPrivateRangeEnabled = pointer.From(props.Snat.AutoLearnPrivateRanges) == firewallpolicies.AutoLearnPrivateRangesModeEnabled
			}
			if err := d.Set("private_ip_ranges", privateIPRanges); err != nil {
				return fmt.Errorf("setting `private_ip_ranges`: %+v", err)
			}

			if err := d.Set("auto_learn_private_ranges_enabled", isAutoLearnPrivateRangeEnabled); err != nil {
				return fmt.Errorf("setting `auto_learn_private_ranges_enabled`: %+v", err)
			}

			if err := d.Set("insights", flattenFirewallPolicyInsights(props.Insights)); err != nil {
				return fmt.Errorf(`setting "insights": %+v`, err)
			}

			proxySettings := flattenFirewallPolicyExplicitProxy(props.ExplicitProxy)
			if err := d.Set("explicit_proxy", proxySettings); err != nil {
				return fmt.Errorf("setting `explicit_proxy`: %+v", err)
			}

			if props.Sql != nil && props.Sql.AllowSqlRedirect != nil {
				if err := d.Set("sql_redirect_allowed", props.Sql.AllowSqlRedirect); err != nil {
					return fmt.Errorf("setting `sql_redirect_allowed`: %+v", err)
				}
			}
		}

		flattenedIdentity, err := identity.FlattenSystemAndUserAssignedMap(model.Identity)
		if err != nil {
			return fmt.Errorf("flattening `identity`: %+v", err)
		}
		if err := d.Set("identity", flattenedIdentity); err != nil {
			return fmt.Errorf("setting `identity`: %+v", err)
		}

		if err := tags.FlattenAndSet(d, model.Tags); err != nil {
			return fmt.Errorf("flattening `tags`: %+v", err)
		}
	}

	return pluginsdk.SetResourceIdentityData(d, id)
}
