package github.com/hashicorp/terraform-provider-azurerm/internal/services/firewall
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2024-05-01/firewallpolicies"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/firewall/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceFirewallPolicyCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Network.FirewallPolicies
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := firewallpolicies.NewFirewallPolicyID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))

	if d.IsNewResource() {
		resp, err := client.Get(ctx, id, firewallpolicies.DefaultGetOperationOptions())
		if err != nil {
			if !response.WasNotFound(resp.HttpResponse) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}
		}

		if resp.Model != nil {
			return tf.ImportAsExistsError("azurerm_firewall_policy", id.ID())
		}
	}

	props := firewallpolicies.FirewallPolicy{
		Properties: &firewallpolicies.FirewallPolicyPropertiesFormat{
			ThreatIntelMode:      pointer.To(firewallpolicies.AzureFirewallThreatIntelMode(d.Get("threat_intelligence_mode").(string))),
			ThreatIntelWhitelist: expandFirewallPolicyThreatIntelWhitelist(d.Get("threat_intelligence_allowlist").([]interface{})),
			DnsSettings:          expandFirewallPolicyDNSSetting(d.Get("dns").([]interface{})),
			IntrusionDetection:   expandFirewallPolicyIntrusionDetection(d.Get("intrusion_detection").([]interface{})),
			TransportSecurity:    expandFirewallPolicyTransportSecurity(d.Get("tls_certificate").([]interface{})),
			Insights:             expandFirewallPolicyInsights(d.Get("insights").([]interface{})),
			ExplicitProxy:        expandFirewallPolicyExplicitProxy(d.Get("explicit_proxy").([]interface{})),
		},
		Location: utils.String(location.Normalize(d.Get("location").(string))),
		Tags:     tags.Expand(d.Get("tags").(map[string]interface{})),
	}
	expandedIdentity, err := identity.ExpandSystemAndUserAssignedMap(d.Get("identity").([]interface{}))
	if err != nil {
		return fmt.Errorf("expanding `identity`: %+v", err)
	}

	// api will error if TypeNone is passed in
	if expandedIdentity.Type != identity.TypeNone {
		props.Identity = expandedIdentity
	}

	if id, ok := d.GetOk("base_policy_id"); ok {
		props.Properties.BasePolicy = &firewallpolicies.SubResource{Id: utils.String(id.(string))}
	}

	if v, ok := d.GetOk("sku"); ok {
		props.Properties.Sku = &firewallpolicies.FirewallPolicySku{
			Tier: pointer.To(firewallpolicies.FirewallPolicySkuTier(v.(string))),
		}
	}

	if v, ok := d.GetOk("sql_redirect_allowed"); ok {
		props.Properties.Sql = &firewallpolicies.FirewallPolicySQL{
			AllowSqlRedirect: utils.Bool(v.(bool)),
		}
	}

	if v, ok := d.GetOk("private_ip_ranges"); ok {
		privateIPRanges := utils.ExpandStringSlice(v.([]interface{}))
		props.Properties.Snat = &firewallpolicies.FirewallPolicySNAT{
			PrivateRanges: privateIPRanges,
		}
	}

	if v, ok := d.GetOk("auto_learn_private_ranges_enabled"); ok {
		if props.Properties.Snat == nil {
			props.Properties.Snat = &firewallpolicies.FirewallPolicySNAT{}
		}
		if v.(bool) {
			props.Properties.Snat.AutoLearnPrivateRanges = pointer.To(firewallpolicies.AutoLearnPrivateRangesModeEnabled)
		}
	}

	locks.ByName(id.FirewallPolicyName, AzureFirewallPolicyResourceName)
	defer locks.UnlockByName(id.FirewallPolicyName, AzureFirewallPolicyResourceName)

	if err := client.CreateOrUpdateThenPoll(ctx, id, props); err != nil {
		return fmt.Errorf("creating/updating %s: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceFirewallPolicyRead(d, meta)
}
