package github.com/hashicorp/terraform-provider-azurerm/internal/services/voiceservices
import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/voiceservices/2023-04-03/communicationsgateways"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenServiceRegionPropertiesModel(inputList *[]communicationsgateways.ServiceRegionProperties) []ServiceRegionPropertiesModel {
	outputList := make([]ServiceRegionPropertiesModel, 0)
	if inputList == nil {
		return outputList
	}

	for _, input := range *inputList {
		output := ServiceRegionPropertiesModel{
			Location: location.Normalize(input.Name),
		}

		v := &input.PrimaryRegionProperties
		if v.OperatorAddresses != nil {
			output.OperatorAddresses = v.OperatorAddresses
		}

		if v.AllowedMediaSourceAddressPrefixes != nil {
			output.AllowedMediaSourceAddressPrefixes = *v.AllowedMediaSourceAddressPrefixes
		}

		if v.AllowedSignalingSourceAddressPrefixes != nil {
			output.AllowedSignalingSourceAddressPrefixes = *v.AllowedSignalingSourceAddressPrefixes
		}

		if v.EsrpAddresses != nil {
			output.EsrpAddresses = *v.EsrpAddresses
		}

		outputList = append(outputList, output)
	}

	return outputList
}
