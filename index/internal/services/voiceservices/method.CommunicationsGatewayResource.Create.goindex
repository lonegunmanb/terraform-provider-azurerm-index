package github.com/hashicorp/terraform-provider-azurerm/internal/services/voiceservices
import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/voiceservices/2023-04-03/communicationsgateways"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r CommunicationsGatewayResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model CommunicationsGatewayModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.VoiceServices.CommunicationsGatewaysClient
			subscriptionId := metadata.Client.Account.SubscriptionId
			id := communicationsgateways.NewCommunicationsGatewayID(subscriptionId, model.ResourceGroupName, model.Name)

			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			properties := &communicationsgateways.CommunicationsGateway{
				Location: location.Normalize(model.Location),
				Properties: &communicationsgateways.CommunicationsGatewayProperties{
					AutoGeneratedDomainNameLabelScope: &model.AutoGeneratedDomainNameLabelScope,
					Connectivity:                      communicationsgateways.Connectivity(model.Connectivity),
					Codecs: []communicationsgateways.TeamsCodecs{
						communicationsgateways.TeamsCodecs(model.Codecs),
					},
					E911Type:         model.E911Type,
					Platforms:        expandCommunicationsPlatformModel(model.Platforms),
					ServiceLocations: expandServiceRegionPropertiesModel(model.ServiceLocation),
				},
				Tags: &model.Tags,
			}

			var apiBridgeValue interface{}
			if model.ApiBridge != "" {
				log.Printf("[DEBUG] unmarshalling json for ApiBridge")
				if err = json.Unmarshal([]byte(model.ApiBridge), &apiBridgeValue); err != nil {
					return fmt.Errorf("unmarshalling value for ApiBridge: %+v", err)
				}
			}
			properties.Properties.ApiBridge = &apiBridgeValue

			if model.EmergencyDialStrings != nil {
				properties.Properties.EmergencyDialStrings = &model.EmergencyDialStrings
			}

			properties.Properties.OnPremMcpEnabled = &model.OnPremMcpEnabled

			properties.Properties.TeamsVoicemailPilotNumber = &model.MicrosoftTeamsVoicemailPilotNumber

			if err := client.CreateOrUpdateThenPoll(ctx, id, *properties); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)

			return nil
		},
	}
}
