package github.com/hashicorp/terraform-provider-azurerm/internal/services/voiceservices
import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/voiceservices/2023-04-03/communicationsgateways"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r CommunicationsGatewayResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.VoiceServices.CommunicationsGatewaysClient

			id, err := communicationsgateways.ParseCommunicationsGatewayID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model CommunicationsGatewayModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			properties := resp.Model
			if properties == nil {
				return fmt.Errorf("retrieving %s: model was nil", id)
			}

			if metadata.ResourceData.HasChange("codecs") {
				properties.Properties.Codecs = []communicationsgateways.TeamsCodecs{
					communicationsgateways.TeamsCodecs(model.Codecs),
				}
			}

			if metadata.ResourceData.HasChange("e911_type") {
				properties.Properties.E911Type = model.E911Type
			}

			if metadata.ResourceData.HasChange("platforms") {
				properties.Properties.Platforms = expandCommunicationsPlatformModel(model.Platforms)
			}

			if metadata.ResourceData.HasChange("service_location") {
				properties.Properties.ServiceLocations = expandServiceRegionPropertiesModel(model.ServiceLocation)
			}

			if metadata.ResourceData.HasChange("api_bridge") {
				if model.ApiBridge != "" {
					var apiBridgeValue interface{}
					log.Printf("[DEBUG] unmarshalling json for ApiBridge")
					err = json.Unmarshal([]byte(model.ApiBridge), &apiBridgeValue)
					if err != nil {
						return fmt.Errorf("unmarshalling json value for ApiBridge: %+v", err)
					}
					properties.Properties.ApiBridge = &apiBridgeValue
				} else {
					properties.Properties.ApiBridge = nil
				}
			}

			if metadata.ResourceData.HasChange("emergency_dial_strings") {
				properties.Properties.EmergencyDialStrings = &model.EmergencyDialStrings
			}

			if metadata.ResourceData.HasChange("on_prem_mcp_enabled") {
				properties.Properties.OnPremMcpEnabled = &model.OnPremMcpEnabled
			}

			if metadata.ResourceData.HasChange("tags") {
				properties.Tags = &model.Tags
			}

			if metadata.ResourceData.HasChange("microsoft_teams_voicemail_pilot_number") {
				properties.Properties.TeamsVoicemailPilotNumber = &model.MicrosoftTeamsVoicemailPilotNumber
			}

			if err := client.CreateOrUpdateThenPoll(ctx, *id, *properties); err != nil {
				return fmt.Errorf("updating %s: %+v", *id, err)
			}

			return nil
		},
	}
}
