package github.com/hashicorp/terraform-provider-azurerm/internal/services/paloalto
import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	certificates "github.com/hashicorp/go-azure-sdk/resource-manager/paloaltonetworks/2022-08-29/certificateobjectlocalrulestack"
	"github.com/hashicorp/go-azure-sdk/resource-manager/paloaltonetworks/2022-08-29/localrules"
	"github.com/hashicorp/go-azure-sdk/resource-manager/paloaltonetworks/2022-08-29/localrulestacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/paloalto/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/paloalto/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r LocalRuleStackRule) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.PaloAlto.LocalRules

			id, err := localrules.ParseLocalRuleID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var state LocalRuleModel

			existing, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(existing.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			state.RuleStackID = localrulestacks.NewLocalRulestackID(id.SubscriptionId, id.ResourceGroupName, id.LocalRulestackName).ID()
			p, err := strconv.ParseInt(id.LocalRuleName, 10, 0)
			if err != nil {
				return fmt.Errorf("parsing Rule Priortiy for %s: %+v", *id, err)
			}
			state.Priority = p
			if model := existing.Model; model != nil {
				props := model.Properties
				state.Name = props.RuleName
				state.Action = string(pointer.From(props.ActionType))
				state.Applications = pointer.From(props.Applications)
				state.AuditComment = pointer.From(props.AuditComment)
				state.Category = schema.FlattenCategory(props.Category)
				state.DecryptionRuleType = string(pointer.From(props.DecryptionRuleType))
				state.Description = pointer.From(props.Description)
				state.Destination = schema.FlattenDestination(props.Destination, *id)
				state.LoggingEnabled = stateEnumAsBool(props.EnableLogging)
				if certName := pointer.From(props.InboundInspectionCertificate); certName != "" {
					state.InspectionCertificateID = certificates.NewLocalRulestackCertificateID(id.SubscriptionId, id.ResourceGroupName, id.LocalRulestackName, certName).ID()
				} else {
					state.InspectionCertificateID = certName
				}
				state.NegateDestination = boolEnumAsBoolRule(props.NegateDestination)
				state.NegateSource = boolEnumAsBoolRule(props.NegateSource)
				state.Protocol = pointer.From(props.Protocol)
				state.ProtocolPorts = pointer.From(props.ProtocolPortList)
				state.RuleEnabled = stateEnumAsBool(props.RuleState)
				state.Source = schema.FlattenSource(props.Source, *id)
				state.Tags = flattenTagsFromRule(props.Tags)
			}

			return metadata.Encode(&state)
		},
	}
}
