package github.com/hashicorp/terraform-provider-azurerm/internal/services/lighthouse
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/managedservices/2022-10-01/registrationdefinitions"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenLighthouseDefinitionApprover(input *[]registrationdefinitions.EligibleApprover) []interface{} {
	if input == nil {
		return nil
	}

	results := make([]interface{}, 0, len(*input))
	for _, item := range *input {
		result := map[string]interface{}{
			"principal_id": item.PrincipalId,
		}

		if item.PrincipalIdDisplayName != nil {
			result["principal_display_name"] = *item.PrincipalIdDisplayName
		}

		results = append(results, result)
	}

	return results
}
