package github.com/hashicorp/terraform-provider-azurerm/internal/services/lighthouse
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/managedservices/2022-10-01/registrationdefinitions"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandLighthouseDefinitionJustInTimeAccessPolicy(input []interface{}) *registrationdefinitions.JustInTimeAccessPolicy {
	if len(input) == 0 || input[0] == nil {
		return nil
	}

	justInTimeAccessPolicy := input[0].(map[string]interface{})

	result := registrationdefinitions.JustInTimeAccessPolicy{
		MaximumActivationDuration: utils.String(justInTimeAccessPolicy["maximum_activation_duration"].(string)),
		ManagedByTenantApprovers:  expandLighthouseDefinitionApprover(justInTimeAccessPolicy["approver"].(*pluginsdk.Set).List()),
	}

	multiFactorAuthProvider := registrationdefinitions.MultiFactorAuthProviderNone
	if v := justInTimeAccessPolicy["multi_factor_auth_provider"].(string); v != "" {
		multiFactorAuthProvider = registrationdefinitions.MultiFactorAuthProvider(v)
	}
	result.MultiFactorAuthProvider = multiFactorAuthProvider

	return &result
}
