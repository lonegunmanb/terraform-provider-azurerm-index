package github.com/hashicorp/terraform-provider-azurerm/internal/services/lighthouse
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/managedservices/2022-10-01/registrationdefinitions"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenLighthouseDefinitionJustInTimeAccessPolicy(input *registrationdefinitions.JustInTimeAccessPolicy) []interface{} {
	if input == nil {
		return nil
	}

	var results []interface{}

	result := map[string]interface{}{}

	if v := input.MultiFactorAuthProvider; v != registrationdefinitions.MultiFactorAuthProviderNone {
		result["multi_factor_auth_provider"] = string(v)
	}

	if input.ManagedByTenantApprovers != nil {
		result["approver"] = flattenLighthouseDefinitionApprover(input.ManagedByTenantApprovers)
	}

	maximumActivationDuration := "PT8H"
	if input.MaximumActivationDuration != nil {
		maximumActivationDuration = *input.MaximumActivationDuration
	}
	result["maximum_activation_duration"] = maximumActivationDuration

	return append(results, result)
}
