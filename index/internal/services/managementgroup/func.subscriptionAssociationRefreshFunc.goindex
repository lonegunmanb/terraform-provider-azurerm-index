package github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/managementgroups/2020-05-01/managementgroups"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func subscriptionAssociationRefreshFunc(ctx context.Context, client *managementgroups.ManagementGroupsClient, id managementgroups.SubscriptionId) pluginsdk.StateRefreshFunc {
	return func() (interface{}, string, error) {
		managementGroup, err := client.Get(ctx, commonids.NewManagementGroupID(id.GroupId), managementgroups.GetOperationOptions{
			CacheControl: &managementGroupCacheControl,
			Expand:       pointer.To(managementgroups.ExpandChildren),
			Recurse:      pointer.FromBool(false),
		})
		if err != nil {
			return nil, "", fmt.Errorf("reading Management Group %q for Subscription Associations: %+v", id.GroupId, err)
		}

		if model := managementGroup.Model; model != nil {
			if props := model.Properties; props != nil && props.Children != nil {
				for _, v := range *props.Children {
					if v.Type != nil && *v.Type == managementgroups.ManagementGroupChildTypeSubscriptions {
						if v.Name != nil && strings.EqualFold(*v.Name, id.SubscriptionId) {
							return managementGroup, "Exists", nil
						}
					}
				}
			}
		}

		return "NotFound", "NotFound", nil
	}
}
