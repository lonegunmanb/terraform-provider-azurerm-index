package github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/managementgroups/2020-05-01/managementgroups"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceManagementGroupRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).ManagementGroups.GroupsClient
	accountClient := meta.(*clients.Client)
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := commonids.ParseManagementGroupID(d.Id())
	if err != nil {
		return err
	}

	tenantID := accountClient.Account.TenantId
	tenantScopedID := parse.NewTenantScopedManagementGroupID(tenantID, id.GroupId)
	d.Set("tenant_scoped_id", tenantScopedID.TenantScopedID())

	recurse := pointer.FromBool(true)
	resp, err := client.Get(ctx, *id, managementgroups.GetOperationOptions{
		CacheControl: &managementGroupCacheControl,
		Filter:       pointer.To("children.childType eq Subscription"),
		Expand:       pointer.To(managementgroups.ExpandChildren),
		Recurse:      recurse,
	})
	if err != nil {
		if response.WasForbidden(resp.HttpResponse) || response.WasNotFound(resp.HttpResponse) {
			log.Printf("[INFO] Management Group %q doesn't exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}

		return fmt.Errorf("unable to read Management Group %q: %+v", d.Id(), err)
	}

	d.Set("name", id.GroupId)

	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			d.Set("display_name", props.DisplayName)

			subscriptionIds, err := flattenManagementGroupSubscriptionIds(props.Children)
			if err != nil {
				return fmt.Errorf("unable to flatten `subscription_ids`: %+v", err)
			}
			d.Set("subscription_ids", subscriptionIds)

			parentId := ""
			if details := props.Details; details != nil {
				if parent := details.Parent; parent != nil {
					if pid := parent.Id; pid != nil {
						parentId = *pid
					}
				}
			}
			d.Set("parent_management_group_id", parentId)
		}
	}

	return nil
}
