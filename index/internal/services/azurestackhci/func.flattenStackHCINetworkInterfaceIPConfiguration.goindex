package github.com/hashicorp/terraform-provider-azurerm/internal/services/azurestackhci
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/azurestackhci/2024-01-01/logicalnetworks"
	"github.com/hashicorp/go-azure-sdk/resource-manager/azurestackhci/2024-01-01/networkinterfaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/extendedlocation/2021-08-15/customlocations"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenStackHCINetworkInterfaceIPConfiguration(input *[]networkinterfaces.IPConfiguration) ([]StackHCIIPConfigurationModel, error) {
	if input == nil {
		return make([]StackHCIIPConfigurationModel, 0), nil
	}

	results := make([]StackHCIIPConfigurationModel, 0)
	for _, v := range *input {
		result := StackHCIIPConfigurationModel{}

		if v.Properties != nil {
			result.Gateway = pointer.From(v.Properties.Gateway)
			result.PrefixLength = pointer.From(v.Properties.PrefixLength)
			result.PrivateIPAddress = pointer.From(v.Properties.PrivateIPAddress)

			var subnetId string
			if v.Properties.Subnet != nil && v.Properties.Subnet.Id != nil {
				parsedSubnetId, err := logicalnetworks.ParseLogicalNetworkIDInsensitively(*v.Properties.Subnet.Id)
				if err != nil {
					return results, err
				}

				subnetId = parsedSubnetId.ID()
			}
			result.SubnetID = subnetId

			results = append(results, result)
		}
	}

	return results, nil
}
