package github.com/hashicorp/terraform-provider-azurerm/internal/services/azurestackhci
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/azurestackhci/2024-01-01/logicalnetworks"
	"github.com/hashicorp/go-azure-sdk/resource-manager/azurestackhci/2024-01-01/networkinterfaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/extendedlocation/2021-08-15/customlocations"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandStackHCINetworkInterfaceIPConfiguration(input []StackHCIIPConfigurationModel) *[]networkinterfaces.IPConfiguration {
	if len(input) == 0 {
		return nil
	}

	results := make([]networkinterfaces.IPConfiguration, 0)
	for _, v := range input {
		result := networkinterfaces.IPConfiguration{
			Properties: &networkinterfaces.IPConfigurationProperties{
				Subnet: &networkinterfaces.IPConfigurationPropertiesSubnet{
					Id: pointer.To(v.SubnetID),
				},
			},
		}

		if v.PrivateIPAddress != "" {
			result.Properties.PrivateIPAddress = pointer.To(v.PrivateIPAddress)
		}

		results = append(results, result)
	}

	return &results
}
