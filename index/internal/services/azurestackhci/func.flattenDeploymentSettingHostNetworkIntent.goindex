package github.com/hashicorp/terraform-provider-azurerm/internal/services/azurestackhci
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/azurestackhci/2024-01-01/deploymentsettings"
	"github.com/hashicorp/go-azure-sdk/resource-manager/azurestackhci/2024-01-01/storagecontainers"
	"github.com/hashicorp/go-azure-sdk/resource-manager/extendedlocation/2021-08-15/customlocations"
	"github.com/hashicorp/go-azure-sdk/resource-manager/hybridcompute/2022-11-10/machines"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resourceconnector/2022-10-27/appliances"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	storageValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenDeploymentSettingHostNetworkIntent(input *[]deploymentsettings.Intents) []HostNetworkIntentModel {
	if input == nil {
		return make([]HostNetworkIntentModel, 0)
	}

	results := make([]HostNetworkIntentModel, 0, len(*input))
	for _, item := range *input {
		results = append(results, HostNetworkIntentModel{
			Adapter:                        pointer.From(item.Adapter),
			AdapterPropertyOverride:        flattenHostNetworkIntentAdapterPropertyOverride(item.AdapterPropertyOverrides),
			Name:                           pointer.From(item.Name),
			AdapterPropertyOverrideEnabled: pointer.From(item.OverrideAdapterProperty),
			QosPolicyOverrideEnabled:       pointer.From(item.OverrideQosPolicy),
			VirtualSwitchConfigurationOverrideEnabled: pointer.From(item.OverrideVirtualSwitchConfiguration),
			QosPolicyOverride:                         flattenHostNetworkIntentQosPolicyOverride(item.QosPolicyOverrides),
			TrafficType:                               pointer.From(item.TrafficType),
			VirtualSwitchConfigurationOverride:        flattenHostNetworkIntentVirtualSwitchConfigurationOverride(item.VirtualSwitchConfigurationOverrides),
		})
	}

	return results
}
