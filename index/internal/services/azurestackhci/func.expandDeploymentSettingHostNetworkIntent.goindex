package github.com/hashicorp/terraform-provider-azurerm/internal/services/azurestackhci
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/azurestackhci/2024-01-01/deploymentsettings"
	"github.com/hashicorp/go-azure-sdk/resource-manager/azurestackhci/2024-01-01/storagecontainers"
	"github.com/hashicorp/go-azure-sdk/resource-manager/extendedlocation/2021-08-15/customlocations"
	"github.com/hashicorp/go-azure-sdk/resource-manager/hybridcompute/2022-11-10/machines"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resourceconnector/2022-10-27/appliances"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	storageValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandDeploymentSettingHostNetworkIntent(input []HostNetworkIntentModel) *[]deploymentsettings.Intents {
	if len(input) == 0 {
		return nil
	}

	results := make([]deploymentsettings.Intents, 0, len(input))
	for _, item := range input {
		results = append(results, deploymentsettings.Intents{
			Adapter:                             pointer.To(item.Adapter),
			AdapterPropertyOverrides:            expandHostNetworkIntentAdapterPropertyOverride(item.AdapterPropertyOverride),
			Name:                                pointer.To(item.Name),
			OverrideAdapterProperty:             pointer.To(item.AdapterPropertyOverrideEnabled),
			OverrideQosPolicy:                   pointer.To(item.QosPolicyOverrideEnabled),
			OverrideVirtualSwitchConfiguration:  pointer.To(item.VirtualSwitchConfigurationOverrideEnabled),
			QosPolicyOverrides:                  expandHostNetworkIntentQosPolicyOverride(item.QosPolicyOverride),
			TrafficType:                         pointer.To(item.TrafficType),
			VirtualSwitchConfigurationOverrides: expandHostNetworkIntentVirtualSwitchConfigurationOverride(item.VirtualSwitchConfigurationOverride),
		})
	}

	return &results
}
