package github.com/hashicorp/terraform-provider-azurerm/internal/services/web
import (
	"time"

	"github.com/Azure/azure-sdk-for-go/services/web/mgmt/2021-02-01/web" // nolint: staticcheck
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenAppServiceBackup(input *web.BackupRequestProperties) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	output := make(map[string]interface{})

	if input.BackupName != nil {
		output["name"] = *input.BackupName
	}
	if input.Enabled != nil {
		output["enabled"] = *input.Enabled
	}
	if input.StorageAccountURL != nil {
		output["storage_account_url"] = *input.StorageAccountURL
	}

	schedules := make([]interface{}, 0)
	if input.BackupSchedule != nil {
		v := *input.BackupSchedule

		schedule := make(map[string]interface{})

		if v.FrequencyInterval != nil {
			schedule["frequency_interval"] = int(*v.FrequencyInterval)
		}

		schedule["frequency_unit"] = string(v.FrequencyUnit)

		if v.KeepAtLeastOneBackup != nil {
			schedule["keep_at_least_one_backup"] = *v.KeepAtLeastOneBackup
		}
		if v.RetentionPeriodInDays != nil {
			schedule["retention_period_in_days"] = int(*v.RetentionPeriodInDays)
		}
		if v.StartTime != nil && !v.StartTime.IsZero() {
			schedule["start_time"] = v.StartTime.Format(time.RFC3339)
		}

		schedules = append(schedules, schedule)
	}
	output["schedule"] = schedules

	return []interface{}{
		output,
	}
}
