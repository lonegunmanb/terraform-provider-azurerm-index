package github.com/hashicorp/terraform-provider-azurerm/internal/services/web
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/web/mgmt/2021-02-01/web" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/web/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/web/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceAppServiceCertificateOrderCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Web.CertificatesOrderClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	log.Printf("[INFO] preparing arguments for App Service Certificate creation.")

	id := parse.NewCertificateOrderID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))

	if d.IsNewResource() {
		existing, err := client.Get(ctx, id.ResourceGroup, id.Name)
		if err != nil {
			if !utils.ResponseWasNotFound(existing.Response) {
				return fmt.Errorf("checking for presence of existing %s: %s", id, err)
			}
		}

		if !utils.ResponseWasNotFound(existing.Response) {
			return tf.ImportAsExistsError("azurerm_app_service_certificate_order", id.ID())
		}
	}

	location := azure.NormalizeLocation(d.Get("location").(string))
	t := d.Get("tags").(map[string]interface{})
	distinguishedName := d.Get("distinguished_name").(string)
	csr := d.Get("csr").(string)
	keySize := d.Get("key_size").(int)
	autoRenew := d.Get("auto_renew").(bool)
	validityInYears := d.Get("validity_in_years").(int)

	properties := web.AppServiceCertificateOrderProperties{
		DistinguishedName: utils.String(distinguishedName),
		Csr:               utils.String(csr),
		KeySize:           utils.Int32(int32(keySize)),
		AutoRenew:         utils.Bool(autoRenew),
		ValidityInYears:   utils.Int32(int32(validityInYears)),
	}

	switch d.Get("product_type").(string) {
	case "Standard":
		properties.ProductType = web.CertificateProductTypeStandardDomainValidatedSsl
	case "WildCard":
		properties.ProductType = web.CertificateProductTypeStandardDomainValidatedWildCardSsl
	default:
		return fmt.Errorf("`product_type` must be `Standard` or `WildCard`")
	}

	certificateOrder := web.AppServiceCertificateOrder{
		AppServiceCertificateOrderProperties: &properties,
		Location:                             utils.String(location),
		Tags:                                 tags.Expand(t),
	}

	future, err := client.CreateOrUpdate(ctx, id.ResourceGroup, id.Name, certificateOrder)
	if err != nil {
		return fmt.Errorf("creating/updating %s: %s", id, err)
	}

	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		return fmt.Errorf("waiting for creating/updating %s: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceAppServiceCertificateOrderRead(d, meta)
}
