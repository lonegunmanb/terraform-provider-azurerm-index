package github.com/hashicorp/terraform-provider-azurerm/internal/services/storagecache
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storagecache/2023-05-01/caches"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storagecache/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceHPCCacheAccessPolicy() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceHPCCacheAccessPolicyCreateUpdate,
		Read:   resourceHPCCacheAccessPolicyRead,
		Update: resourceHPCCacheAccessPolicyCreateUpdate,
		Delete: resourceHPCCacheAccessPolicyDelete,

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := parse.CacheAccessPolicyID(id)
			return err
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validation.StringNotInSlice([]string{"default"}, false),
			},

			"hpc_cache_id": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: caches.ValidateCacheID,
			},

			"access_rule": {
				// Order doesn't matter for the access policies, as each one will be selected by one namespace path.
				Type:     pluginsdk.TypeSet,
				Required: true,
				MinItems: 1,
				MaxItems: 3,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"scope": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(caches.NfsAccessRuleScopeDefault),
								string(caches.NfsAccessRuleScopeNetwork),
								string(caches.NfsAccessRuleScopeHost),
							}, false),
						},

						"access": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(caches.NfsAccessRuleAccessRw),
								string(caches.NfsAccessRuleAccessRo),
								string(caches.NfsAccessRuleAccessNo),
							}, false),
						},

						"filter": {
							Type:         pluginsdk.TypeString,
							Optional:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"suid_enabled": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
						},

						"submount_access_enabled": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
						},

						"root_squash_enabled": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
						},

						"anonymous_uid": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							ValidateFunc: validation.IntAtLeast(0),
						},

						"anonymous_gid": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							ValidateFunc: validation.IntAtLeast(0),
						},
					},
				},
			},
		},
	}
}
