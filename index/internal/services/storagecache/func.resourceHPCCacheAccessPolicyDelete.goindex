package github.com/hashicorp/terraform-provider-azurerm/internal/services/storagecache
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storagecache/2023-05-01/caches"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storagecache/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceHPCCacheAccessPolicyDelete(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).StorageCache_2023_05_01.Caches
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.CacheAccessPolicyID(d.Id())
	if err != nil {
		return err
	}
	cacheId := caches.NewCacheID(id.SubscriptionId, id.ResourceGroup, id.CacheName)

	locks.ByID(id.ID())
	defer locks.UnlockByID(id.ID())

	existCache, err := client.Get(ctx, cacheId)
	if err != nil {
		return fmt.Errorf("checking for containing HPC Cache %s: %+v", cacheId, err)
	}

	m := existCache.Model
	if m == nil {
		return nil
	}

	prop := m.Properties
	if prop == nil {
		return nil
	}

	settings := prop.SecuritySettings
	if settings == nil {
		return nil
	}

	policies := settings.AccessPolicies
	if policies == nil {
		return nil
	}

	*policies = CacheDeleteAccessPolicyByName(*policies, id.Name)

	if err = client.CreateOrUpdateThenPoll(ctx, cacheId, *existCache.Model); err != nil {
		return fmt.Errorf("updating the HPC Cache for deleting Access Policy %q: %v", id, err)
	}

	return nil
}
