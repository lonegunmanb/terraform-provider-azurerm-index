package github.com/hashicorp/terraform-provider-azurerm/internal/services/storagecache
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storagecache/2023-05-01/caches"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storagecache/2023-05-01/storagetargets"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func resourceHPCCacheWaitForCreating(ctx context.Context, client *caches.CachesClient, id caches.CacheId, d *pluginsdk.ResourceData) (caches.GetOperationResponse, error) {
	state := &pluginsdk.StateChangeConf{
		MinTimeout: 30 * time.Second,
		Delay:      10 * time.Second,
		Pending:    []string{string(storagetargets.ProvisioningStateTypeCreating)},
		Target:     []string{string(storagetargets.ProvisioningStateTypeSucceeded)},
		Refresh:    resourceHPCCacheRefresh(ctx, client, id),
		Timeout:    d.Timeout(pluginsdk.TimeoutCreate),
	}

	resp, err := state.WaitForStateContext(ctx)
	if err != nil {
		return resp.(caches.GetOperationResponse), fmt.Errorf("waiting for the HPC Cache to be missing (%q): %+v", id.String(), err)
	}

	return resp.(caches.GetOperationResponse), nil
}
