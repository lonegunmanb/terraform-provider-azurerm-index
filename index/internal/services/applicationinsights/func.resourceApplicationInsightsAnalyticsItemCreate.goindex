package github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	analyticsitems "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2015-05-01/analyticsitemsapis"
	components "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2020-02-02/componentsapis"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceApplicationInsightsAnalyticsItemCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).AppInsights.AnalyticsItemsClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	appInsightsId, err := components.ParseComponentID(d.Get("application_insights_id").(string))
	if err != nil {
		return err
	}

	name := d.Get("name").(string)
	scopeName := d.Get("scope").(string)
	typeName := d.Get("type").(string)

	itemType := analyticsitems.ItemType(typeName)
	itemScope := analyticsitems.ItemScope(scopeName)

	itemScopePath := sharedScopePath
	if itemScope == analyticsitems.ItemScopeUser {
		itemScopePath = userScopePath
	}

	id := analyticsitems.NewProviderComponentID(appInsightsId.SubscriptionId, appInsightsId.ResourceGroupName, appInsightsId.ComponentName, itemScopePath)

	// We cannot get specific analytics items without their itemID which is why we need to list all the
	// available items of a certain type and scope in order to check whether a resource already exists and needs
	// to be imported first
	// https://github.com/Azure/azure-rest-api-specs/issues/20712 itemScopePath should be set to insights.ItemScopePathAnalyticsItems in List method
	listId := analyticsitems.NewProviderComponentID(appInsightsId.SubscriptionId, appInsightsId.ResourceGroupName, appInsightsId.ComponentName, "analyticsItems")
	existing, err := client.AnalyticsItemsList(ctx, listId, analyticsitems.DefaultAnalyticsItemsListOperationOptions())
	if err != nil {
		if !response.WasNotFound(existing.HttpResponse) {
			return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
		}
	}

	if model := existing.Model; model != nil {
		for _, value := range *model {
			if v := value.Name; v != nil && *v == name {
				return tf.ImportAsExistsError("azurerm_application_insights_analytics_item", *value.Id)
			}
		}
	}

	properties := analyticsitems.ApplicationInsightsComponentAnalyticsItem{
		Name:    pointer.To(name),
		Type:    pointer.To(itemType),
		Scope:   pointer.To(itemScope),
		Content: pointer.To(d.Get("content").(string)),
	}
	if v := d.Get("function_alias").(string); v != "" {
		properties.Properties = &analyticsitems.ApplicationInsightsComponentAnalyticsItemProperties{
			FunctionAlias: &v,
		}
	}

	resp, err := client.AnalyticsItemsPut(ctx, id, properties, analyticsitems.DefaultAnalyticsItemsPutOperationOptions())
	if err != nil {
		return fmt.Errorf("creating %s: %+v", id, err)
	}

	if resp.Model == nil && resp.Model.Id == nil {
		return fmt.Errorf("model and model ID for %s are nil", id)
	}

	generatedId := parse.NewAnalyticsSharedItemID(id.SubscriptionId, id.ResourceGroupName, id.ComponentName, *resp.Model.Id).ID()
	if itemScope == analyticsitems.ItemScopeUser {
		generatedId = parse.NewAnalyticsUserItemID(id.SubscriptionId, id.ResourceGroupName, id.ComponentName, *resp.Model.Id).ID()
	}

	d.SetId(generatedId)

	return resourceApplicationInsightsAnalyticsItemRead(d, meta)
}
