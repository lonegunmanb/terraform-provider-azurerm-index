package github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights/migration
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (AnalyticsItemUpgradeV0ToV1) UpgradeFunc() pluginsdk.StateUpgraderFunc {
	return func(ctx context.Context, rawState map[string]interface{}, meta interface{}) (map[string]interface{}, error) {
		// old:
		// 	/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/component1/[myanalyticsItems|analyticsItems]/item1
		// new:
		// 	/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/component1/[myAnalyticsItems|analyticsItems]/item1
		oldId, err := azure.ParseAzureResourceID(rawState["id"].(string))
		if err != nil {
			return rawState, err
		}

		itemName := ""
		newId := ""
		for key, value := range oldId.Path {
			if strings.EqualFold(key, "analyticsitems") {
				itemName = value
				newId = parse.NewAnalyticsSharedItemID(oldId.SubscriptionID, oldId.ResourceGroup, oldId.Path["components"], itemName).ID()
				break
			} else if strings.EqualFold(key, "myanalyticsitems") {
				itemName = value
				newId = parse.NewAnalyticsUserItemID(oldId.SubscriptionID, oldId.ResourceGroup, oldId.Path["components"], itemName).ID()
				break
			}
		}

		if itemName == "" {
			return rawState, fmt.Errorf("couldn't find the `analyticsitems` or `myanalyticsitems` segment in the old resource id %q", oldId)
		}

		log.Printf("[DEBUG] Updating ID from %q to %q", oldId, newId)

		rawState["id"] = newId

		return rawState, nil
	}
}
