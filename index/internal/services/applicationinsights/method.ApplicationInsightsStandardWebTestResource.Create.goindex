package github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights
import (
	"context"
	"encoding/base64"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	components "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2020-02-02/componentsapis"
	webtests "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2022-06-15/webtestsapis"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r ApplicationInsightsStandardWebTestResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,

		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.AppInsights.StandardWebTestsClient

			subscriptionId := metadata.Client.Account.SubscriptionId

			var model ApplicationInsightsStandardWebTestResourceModel
			if err := metadata.Decode(&model); err != nil {
				return err
			}

			id := webtests.NewWebTestID(subscriptionId, model.ResourceGroupName, model.Name)

			existing, err := client.WebTestsGet(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}
			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			validations := expandApplicationInsightsStandardWebTestValidations(model.ValidationRules)

			appInsightsId, err := webtests.ParseComponentID(model.ApplicationInsightsID)
			if err != nil {
				return err
			}

			if model.Tags == nil {
				model.Tags = make(map[string]string)
			}

			model.Tags[fmt.Sprintf("hidden-link:%s", appInsightsId.ID())] = "Resource"

			props := webtests.WebTestProperties{
				Name:               id.WebTestName, // API requires this to be specified despite ARM spec guidance that it should come from the ID
				Enabled:            pointer.To(model.Enabled),
				Frequency:          pointer.To(model.Frequency),
				Kind:               webtests.WebTestKindStandard,
				SyntheticMonitorId: id.WebTestName,
				RetryEnabled:       pointer.To(model.Retry),
				Timeout:            pointer.To(model.Timeout),
				Locations:          expandApplicationInsightsStandardWebTestGeoLocations(model.GeoLocations),
				ValidationRules:    pointer.To(validations),
				Request:            expandApplicationInsightsStandardWebTestRequest(model.Request),
			}

			if model.Description != "" {
				props.Description = pointer.To(model.Description)
			}

			param := webtests.WebTest{
				Kind:       pointer.To(webtests.WebTestKindStandard),
				Location:   location.Normalize(model.Location),
				Properties: &props,
				Tags:       pointer.To(model.Tags),
			}

			if _, err := client.WebTestsCreateOrUpdate(ctx, id, param); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
