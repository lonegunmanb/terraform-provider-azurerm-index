package github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/alertsmanagement/2019-06-01/smartdetectoralertrules"
	billing "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2015-05-01/componentfeaturesandpricingapis"
	components "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2020-02-02/componentsapis"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceApplicationInsightsUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).AppInsights.ComponentsClient
	billingClient := meta.(*clients.Client).AppInsights.BillingClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := components.ParseComponentID(d.Id())
	if err != nil {
		return err
	}

	existing, err := client.ComponentsGet(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving %s: %v", id, err)
	}
	if existing.Model == nil {
		return fmt.Errorf("retrieving %s: `model` was nil", id)
	}
	if existing.Model.Properties == nil {
		return fmt.Errorf("retrieving %s: `properties` was nil", id)
	}

	componentProps := existing.Model.Properties

	oldWorkspaceId, newWorkspaceId := d.GetChange("workspace_id")
	if oldWorkspaceId.(string) != "" && newWorkspaceId.(string) == "" {
		return fmt.Errorf("`workspace_id` cannot be removed after set. If `workspace_id` is not specified but you encounter a diff, this might indicate a Microsoft initiated automatic migration from classic resources to workspace-based resources. If this is the case, please update `workspace_id` in your config file to the new value")
	}

	if d.HasChange("sampling_percentage") {
		componentProps.SamplingPercentage = pointer.To(d.Get("sampling_percentage").(float64))
	}

	if d.HasChange("disable_ip_masking") {
		componentProps.DisableIPMasking = pointer.To(d.Get("disable_ip_masking").(bool))
	}

	if d.HasChange("local_authentication_disabled") {
		componentProps.DisableLocalAuth = pointer.To(d.Get("local_authentication_disabled").(bool))
	}

	if d.HasChange("internet_ingestion_enabled") {
		componentProps.PublicNetworkAccessForIngestion = pointer.To(components.PublicNetworkAccessTypeDisabled)
		if d.Get("internet_ingestion_enabled").(bool) {
			componentProps.PublicNetworkAccessForIngestion = pointer.To(components.PublicNetworkAccessTypeEnabled)
		}
	}

	if d.HasChange("internet_query_enabled") {
		componentProps.PublicNetworkAccessForQuery = pointer.To(components.PublicNetworkAccessTypeDisabled)
		if d.Get("internet_query_enabled").(bool) {
			componentProps.PublicNetworkAccessForQuery = pointer.To(components.PublicNetworkAccessTypeEnabled)
		}
	}

	if d.HasChange("force_customer_storage_for_profiler") {
		componentProps.ForceCustomerStorageForProfiler = pointer.To(d.Get("force_customer_storage_for_profiler").(bool))
	}

	if d.HasChange("workspace_id") {
		workspaceID, err := workspaces.ParseWorkspaceID(d.Get("workspace_id").(string))
		if err != nil {
			return err
		}
		componentProps.WorkspaceResourceId = pointer.To(workspaceID.ID())
	}

	if d.HasChange("retention_in_days") {
		componentProps.RetentionInDays = pointer.To(int64(d.Get("retention_in_days").(int)))
	}

	insightProperties := components.ApplicationInsightsComponent{
		Name:       pointer.To(id.ComponentName),
		Location:   location.Normalize(d.Get("location").(string)),
		Kind:       d.Get("application_type").(string),
		Properties: componentProps,
	}

	if d.HasChange("tags") {
		insightProperties.Tags = tags.Expand(d.Get("tags").(map[string]interface{}))
	}

	if _, err = client.ComponentsCreateOrUpdate(ctx, *id, insightProperties); err != nil {
		return fmt.Errorf("updating %s: %+v", id, err)
	}

	read, err := client.ComponentsGet(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", id, err)
	}
	if read.Model == nil {
		return fmt.Errorf("retrieving %s: `model` was nil", id)
	}

	if read.Model.Id == nil {
		return fmt.Errorf("retrieving %s: `id` was nil", id)
	}
	billingId, err := billing.ParseComponentID(id.ID())
	if err != nil {
		return err
	}
	billingExisting, err := billingClient.ComponentCurrentBillingFeaturesGet(ctx, *billingId)
	if err != nil {
		return fmt.Errorf("retrieving Billing Features for %s: %+v", id, err)
	}

	if billingExisting.Model == nil {
		return fmt.Errorf("retrieving Billing Features for %s: `model` was nil", id)
	}

	billingProps := billingExisting.Model

	if billingProps.DataVolumeCap == nil {
		billingProps.DataVolumeCap = &billing.ApplicationInsightsComponentDataVolumeCap{}
	}

	if d.HasChange("daily_data_cap_in_gb") {
		billingProps.DataVolumeCap.Cap = pointer.To(d.Get(("daily_data_cap_in_gb")).(float64))
	}

	if d.HasChange("daily_data_cap_notifications_disabled") {
		billingProps.DataVolumeCap.StopSendNotificationWhenHitCap = pointer.To(d.Get("daily_data_cap_notifications_disabled").(bool))
	}

	if _, err = billingClient.ComponentCurrentBillingFeaturesUpdate(ctx, *billingId, *billingProps); err != nil {
		return fmt.Errorf("updating Billing Features for %s: %+v", id, err)
	}

	return resourceApplicationInsightsRead(d, meta)
}
