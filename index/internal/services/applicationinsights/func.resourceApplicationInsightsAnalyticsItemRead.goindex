package github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	analyticsitems "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2015-05-01/analyticsitemsapis"
	components "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2020-02-02/componentsapis"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceApplicationInsightsAnalyticsItemRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).AppInsights.AnalyticsItemsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, itemId, err := ParseGeneratedAnalyticsItemId(d.Id())
	if err != nil {
		return err
	}

	options := analyticsitems.AnalyticsItemsGetOperationOptions{
		Id: pointer.To(itemId),
	}

	resp, err := client.AnalyticsItemsGet(ctx, *id, options)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	appInsightsId := components.NewComponentID(id.SubscriptionId, id.ResourceGroupName, id.ComponentName)

	d.Set("application_insights_id", appInsightsId.ID())
	if model := resp.Model; model != nil {
		d.Set("name", model.Name)
		d.Set("version", model.Version)
		d.Set("content", model.Content)
		d.Set("scope", pointer.From(model.Scope))
		d.Set("type", pointer.From(model.Type))
		d.Set("time_created", model.TimeCreated)
		d.Set("time_modified", model.TimeModified)
		if props := model.Properties; props != nil {
			d.Set("function_alias", pointer.From(props.FunctionAlias))
		}
	}

	return nil
}
