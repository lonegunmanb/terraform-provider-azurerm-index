package github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	components "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2020-02-02/componentsapis"
	webtests "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2022-06-15/webtestsapis"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceApplicationInsightsWebTestsRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).AppInsights.WebTestsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := webtests.ParseWebTestID(d.Id())
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Reading AzureRM Application Insights %q", *id)

	resp, err := client.WebTestsGet(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] %s was not found - removing from state!", *id)
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.WebTestName)
	d.Set("resource_group_name", id.ResourceGroupName)

	appInsightsId := ""

	if model := resp.Model; model != nil {
		if model.Tags != nil {
			for i := range *model.Tags {
				if strings.HasPrefix(i, "hidden-link") {
					appInsightsId = strings.Split(i, ":")[1]
				}
			}
		}
		d.Set("kind", pointer.From(model.Kind))
		d.Set("location", location.Normalize(model.Location))

		if props := model.Properties; props != nil {
			// It is possible that the root level `kind` in response is empty in some cases (see PR #8372 for more info)
			if model.Kind == nil || *model.Kind == "" {
				d.Set("kind", props.Kind)
			}
			d.Set("synthetic_monitor_id", props.SyntheticMonitorId)
			d.Set("description", props.Description)
			d.Set("enabled", props.Enabled)
			d.Set("frequency", props.Frequency)
			d.Set("timeout", props.Timeout)
			d.Set("retry_enabled", props.RetryEnabled)

			if config := props.Configuration; config != nil {
				d.Set("configuration", config.WebTest)
			}

			if err := d.Set("geo_locations", flattenApplicationInsightsWebTestGeoLocations(props.Locations)); err != nil {
				return fmt.Errorf("setting `geo_locations`: %+v", err)
			}
		}

		parsedAppInsightsId, err := webtests.ParseComponentIDInsensitively(appInsightsId)
		if err != nil {
			return err
		}
		d.Set("application_insights_id", parsedAppInsightsId.ID())

		return tags.FlattenAndSet(d, model.Tags)
	}
	return nil
}
