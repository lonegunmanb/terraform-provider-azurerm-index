package github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	apikeys "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2015-05-01/componentapikeysapis"
	components "github.com/hashicorp/go-azure-sdk/resource-manager/applicationinsights/2020-02-02/componentsapis"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/applicationinsights/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceApplicationInsightsAPIKeyCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).AppInsights.APIKeysClient
	ctx, cancel := timeouts.ForCreate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	appInsightsId, err := apikeys.ParseComponentID(d.Get("application_insights_id").(string))
	if err != nil {
		return err
	}

	name := d.Get("name").(string)

	var existingAPIKeyList apikeys.APIKeysListOperationResponse
	var existingAPIKeyId *apikeys.ApiKeyId
	existingAPIKeyList, err = client.APIKeysList(ctx, *appInsightsId)
	if err != nil {
		if !response.WasNotFound(existingAPIKeyList.HttpResponse) {
			return fmt.Errorf("checking for presence of existing Application Insights API key list for %s: %+v", appInsightsId, err)
		}
	}

	if existingAPIKeyList.Model != nil && len(existingAPIKeyList.Model.Value) > 0 {
		for _, existingAPIKey := range existingAPIKeyList.Model.Value {
			existingAPIKeyId, err = apikeys.ParseApiKeyIDInsensitively(*existingAPIKey.Id)
			if err != nil {
				return err
			}

			if name == *existingAPIKey.Name {
				return tf.ImportAsExistsError("azurerm_application_insights_api_key", existingAPIKeyId.ID())
			}
		}
	}

	linkedReadProperties := expandApplicationInsightsAPIKeyLinkedProperties(d.Get("read_permissions").(*pluginsdk.Set), appInsightsId.ID())
	linkedWriteProperties := expandApplicationInsightsAPIKeyLinkedProperties(d.Get("write_permissions").(*pluginsdk.Set), appInsightsId.ID())
	if len(*linkedReadProperties) == 0 && len(*linkedWriteProperties) == 0 {
		return fmt.Errorf("at least one read or write permission must be defined")
	}
	apiKeyProperties := apikeys.APIKeyRequest{
		Name:                  &name,
		LinkedReadProperties:  linkedReadProperties,
		LinkedWriteProperties: linkedWriteProperties,
	}

	resp, err := client.APIKeysCreate(ctx, *appInsightsId, apiKeyProperties)
	if err != nil {
		return fmt.Errorf("creating API key %q for %s: %+v", name, appInsightsId, err)
	}

	if resp.Model == nil || resp.Model.ApiKey == nil {
		return fmt.Errorf("creating API key %q for %s: got empty API key", name, appInsightsId)
	}

	// API returns lower case on resourceGroups and apiKeys
	id, err := apikeys.ParseApiKeyIDInsensitively(*resp.Model.Id)
	if err != nil {
		return err
	}
	d.SetId(id.ID())

	// API key can only be retrieved at key creation
	d.Set("api_key", resp.Model.ApiKey)

	return resourceApplicationInsightsAPIKeyRead(d, meta)
}
