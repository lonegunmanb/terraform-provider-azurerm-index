package github.com/hashicorp/terraform-provider-azurerm/internal/services/eventhub
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/checknameavailabilitydisasterrecoveryconfigs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventhub/2021-11-01/disasterrecoveryconfigs"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/eventhub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceEventHubNamespaceDisasterRecoveryConfigDelete(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Eventhub.DisasterRecoveryConfigsClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := disasterrecoveryconfigs.ParseDisasterRecoveryConfigID(d.Id())
	if err != nil {
		return err
	}

	locks.ByName(id.NamespaceName, eventHubNamespaceResourceName)
	defer locks.UnlockByName(id.NamespaceName, eventHubNamespaceResourceName)

	pairingStatus, err := client.Get(ctx, *id)
	if err != nil {
		return fmt.Errorf("checking the status of eventhub disaster recovery error: %+v", err)
	}

	// need to check if DCR needs pair-breaking first
	breakPairFirst := false
	if model := pairingStatus.Model; model != nil {
		if model.Properties != nil {
			if model.Properties.PartnerNamespace != nil && *model.Properties.PartnerNamespace != "" {
				breakPairFirst = true
			}
		}
	}

	if breakPairFirst {
		if _, err := client.BreakPairing(ctx, *id); err != nil {
			return fmt.Errorf("breaking pairing of %s: %+v", *id, err)
		}
		if err := resourceEventHubNamespaceDisasterRecoveryConfigWaitForState(ctx, client, *id); err != nil {
			return fmt.Errorf("waiting for pairing to break for %s: %+v", *id, err)
		}
	}

	if _, err := client.Delete(ctx, *id); err != nil {
		return fmt.Errorf("deleting %s: %+v", *id, err)
	}

	deadline, ok := ctx.Deadline()
	if !ok {
		return fmt.Errorf("context has no deadline")
	}

	// no future for deletion so wait for it to vanish
	deleteWait := &pluginsdk.StateChangeConf{
		Pending:    []string{"200"},
		Target:     []string{"404"},
		MinTimeout: 30 * time.Second,
		Timeout:    time.Until(deadline),
		Refresh: func() (interface{}, string, error) {
			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return resp, "404", nil
				}
				return nil, "nil", fmt.Errorf("polling to check the deletion state for %s: %+v", *id, err)
			}

			// if resp.HttpResponse is nil it's a dropped connection, which is normally checked
			// via `response.WasNotFound` however since we want the status code here for the poller
			status := "dropped connection"
			if resp.HttpResponse != nil {
				status = strconv.Itoa(resp.HttpResponse.StatusCode)
			}
			return resp, status, nil
		},
	}

	if _, err := deleteWait.WaitForStateContext(ctx); err != nil {
		return fmt.Errorf("waiting the deletion of %s: %+v", *id, err)
	}

	// it can take some time for the name to become available again
	// this is mainly here	to enable updating the resource in place
	deadline, ok = ctx.Deadline()
	if !ok {
		return fmt.Errorf("context has no deadline")
	}
	parentNamespaceId := checknameavailabilitydisasterrecoveryconfigs.NewNamespaceID(id.SubscriptionId, id.ResourceGroupName, id.NamespaceName)
	availabilityClient := meta.(*clients.Client).Eventhub.DisasterRecoveryNameAvailabilityClient
	nameFreeWait := &pluginsdk.StateChangeConf{
		Pending:    []string{"NameInUse"},
		Target:     []string{"None"},
		MinTimeout: 30 * time.Second,
		Timeout:    time.Until(deadline),
		Refresh: func() (interface{}, string, error) {
			input := checknameavailabilitydisasterrecoveryconfigs.CheckNameAvailabilityParameter{
				Name: id.DisasterRecoveryConfigName,
			}
			resp, err := availabilityClient.DisasterRecoveryConfigsCheckNameAvailability(ctx, parentNamespaceId, input)
			if err != nil {
				return resp, "Error", fmt.Errorf("waiting for the name of %s to become free: %v", *id, err)
			}
			if resp.Model == nil || resp.Model.Reason == nil {
				return resp, "Error", fmt.Errorf("`model` or `model.Reason` was nil")
			}
			return resp, string(*resp.Model.Reason), nil
		},
	}

	if _, err := nameFreeWait.WaitForStateContext(ctx); err != nil {
		return err
	}

	return nil
}
