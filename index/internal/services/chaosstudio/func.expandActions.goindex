package github.com/hashicorp/terraform-provider-azurerm/internal/services/chaosstudio
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/chaosstudio/2023-11-01/experiments"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/chaosstudio/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandActions(input []ActionSchema) (*[]experiments.Action, error) {
	output := make([]experiments.Action, 0)

	for _, action := range input {
		parameters := make([]experiments.KeyValuePair, 0)
		if len(action.Parameters) > 0 {
			for k, v := range action.Parameters {
				parameters = append(parameters, experiments.KeyValuePair{
					Key:   k,
					Value: v,
				})
			}
		}

		switch action.ActionType {
		case continuousActionType:
			if action.Duration == "" || action.SelectorName == "" || action.Urn == "" {
				return nil, fmt.Errorf("`duration`, `selector_name` and `urn` must be set for actions with `action_type` of `continuous`")
			}
			output = append(output, experiments.ContinuousAction{
				Duration:   action.Duration,
				Parameters: parameters,
				SelectorId: action.SelectorName,
				Name:       action.Urn,
			})
		case delayActionType:
			if action.Duration == "" {
				return nil, fmt.Errorf("`duration` must be set for actions with `action_type` of `delay`")
			}
			output = append(output, experiments.DelayAction{
				Duration: action.Duration,
				Name:     "urn:csci:microsoft:chaosStudio:timedDelay/1.0",
			})
		case discreteActionType:
			if action.SelectorName == "" || action.Urn == "" {
				return nil, fmt.Errorf("`selector_name` and `urn` must be set for actions with `action_type` of `discrete`")
			}
			output = append(output, experiments.DiscreteAction{
				Parameters: parameters,
				SelectorId: action.SelectorName,
				Name:       action.Urn,
			})
		}
	}

	return &output, nil
}
