package github.com/hashicorp/terraform-provider-azurerm/internal/services/chaosstudio
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/chaosstudio/2023-11-01/capabilities"
	"github.com/hashicorp/go-azure-sdk/resource-manager/chaosstudio/2023-11-01/capabilitytypes"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (r ChaosStudioCapabilityResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.ChaosStudio.V20231101.Capabilities
			schema := ChaosStudioCapabilityResourceSchema{}

			id, err := commonids.ParseChaosStudioCapabilityID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			targetId := commonids.NewChaosStudioTargetID(id.Scope, id.TargetName)

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(*id)
				}
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			schema.ChaosStudioTargetId = targetId.ID()
			schema.CapabilityType = id.CapabilityName

			if model := resp.Model; model != nil {
				if props := model.Properties; props != nil {
					schema.Urn = pointer.From(props.Urn)
				}
			}

			return metadata.Encode(&schema)
		},
		Timeout: 5 * time.Minute,
	}
}
