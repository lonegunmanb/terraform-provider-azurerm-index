package github.com/hashicorp/terraform-provider-azurerm/internal/services/arckubernetes
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	arckubernetes "github.com/hashicorp/go-azure-sdk/resource-manager/hybridkubernetes/2024-01-01/connectedclusters"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ArcKubernetesProvisionedClusterResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.ArcKubernetes.ArcKubernetesClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var model ArcKubernetesProvisionedClusterModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := arckubernetes.NewConnectedClusterID(subscriptionId, model.ResourceGroupName, model.Name)

			existing, err := client.ConnectedClusterGet(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			arcAgentAutoUpgrade := arckubernetes.AutoUpgradeOptionsDisabled
			if model.ArcAgentAutoUpgradeEnabled {
				arcAgentAutoUpgrade = arckubernetes.AutoUpgradeOptionsEnabled
			}

			expandedIdentity, err := identity.ExpandSystemAssignedFromModel(model.Identity)
			if err != nil {
				return fmt.Errorf("expanding `identity`: %+v", err)
			}

			payload := &arckubernetes.ConnectedCluster{
				Identity: pointer.From(expandedIdentity),
				Location: location.Normalize(model.Location),
				Tags:     pointer.To(model.Tags),
				Kind:     pointer.To(arckubernetes.ConnectedClusterKindProvisionedCluster),
				Properties: arckubernetes.ConnectedClusterProperties{
					ArcAgentProfile: &arckubernetes.ArcAgentProfile{
						AgentAutoUpgrade: pointer.To(arcAgentAutoUpgrade),
					},
				},
			}

			if aadProfileVal := model.AzureActiveDirectory; len(aadProfileVal) != 0 {
				payload.Properties.AadProfile = expandArcKubernetesClusterAadProfile(aadProfileVal)
			}

			if desiredVersion := model.ArcAgentDesiredVersion; desiredVersion != "" {
				payload.Properties.ArcAgentProfile.DesiredAgentVersion = pointer.To(desiredVersion)
			}

			if err := client.ConnectedClusterCreateThenPoll(ctx, id, *payload); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)

			return nil
		},
	}
}
