package github.com/hashicorp/terraform-provider-azurerm/internal/services/arckubernetes
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	arckubernetes "github.com/hashicorp/go-azure-sdk/resource-manager/hybridkubernetes/2024-01-01/connectedclusters"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ArcKubernetesProvisionedClusterResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.ArcKubernetes.ArcKubernetesClient

			id, err := arckubernetes.ParseConnectedClusterID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.ConnectedClusterGet(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}

				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			state := ArcKubernetesProvisionedClusterModel{
				Name:              id.ConnectedClusterName,
				ResourceGroupName: id.ResourceGroupName,
			}

			if model := resp.Model; model != nil {
				state.Identity = identity.FlattenSystemAssignedToModel(&model.Identity)
				state.Location = location.Normalize(model.Location)
				state.Tags = pointer.From(model.Tags)

				props := model.Properties
				state.AzureActiveDirectory = flattenArcKubernetesClusterAadProfile(props.AadProfile)
				state.AgentVersion = pointer.From(props.AgentVersion)
				state.Distribution = pointer.From(props.Distribution)
				state.Infrastructure = pointer.From(props.Infrastructure)
				state.KubernetesVersion = pointer.From(props.KubernetesVersion)
				state.Offering = pointer.From(props.Offering)
				state.TotalCoreCount = pointer.From(props.TotalCoreCount)
				state.TotalNodeCount = pointer.From(props.TotalNodeCount)

				arcAgentAutoUpgradeEnabled := true
				arcAgentdesiredVersion := ""
				if arcAgentProfile := props.ArcAgentProfile; arcAgentProfile != nil {
					arcAgentdesiredVersion = pointer.From(arcAgentProfile.DesiredAgentVersion)
					if arcAgentProfile.AgentAutoUpgrade != nil && *arcAgentProfile.AgentAutoUpgrade == arckubernetes.AutoUpgradeOptionsDisabled {
						arcAgentAutoUpgradeEnabled = false
					}
				}
				state.ArcAgentAutoUpgradeEnabled = arcAgentAutoUpgradeEnabled
				state.ArcAgentDesiredVersion = arcAgentdesiredVersion
			}

			return metadata.Encode(&state)
		},
	}
}
