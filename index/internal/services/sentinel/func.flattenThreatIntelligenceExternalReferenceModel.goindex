package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/azuresdkhacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	securityinsight "github.com/jackofallops/kermit/sdk/securityinsights/2022-10-01-preview/securityinsights"
)
func flattenThreatIntelligenceExternalReferenceModel(input *[]securityinsight.ThreatIntelligenceExternalReference) []externalReferenceModel {
	output := make([]externalReferenceModel, 0)
	if input == nil {
		return output
	}
	for _, v := range *input {
		o := externalReferenceModel{}
		if v.ExternalID != nil {
			o.ExternalId = *v.ExternalID
		}
		if v.URL != nil {
			o.Url = *v.URL
		}
		if v.SourceName != nil {
			o.SourceName = *v.SourceName
		}
		if v.Description != nil {
			o.Description = *v.Description
		}
		if len(v.Hashes) > 0 {
			o.Hashes = make(map[string]string, 0)
			for k, hash := range v.Hashes {
				o.Hashes[k] = *hash
			}
		}
		output = append(output, o)
	}
	return output
}
