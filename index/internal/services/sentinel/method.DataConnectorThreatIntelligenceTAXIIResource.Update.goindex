package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2022-10-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	securityinsight "github.com/jackofallops/kermit/sdk/securityinsights/2022-10-01-preview/securityinsights"
)
func (r DataConnectorThreatIntelligenceTAXIIResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Sentinel.DataConnectorsClient

			id, err := parse.DataConnectorID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var plan DataConnectorThreatIntelligenceTAXIIModel
			if err := metadata.Decode(&plan); err != nil {
				return err
			}

			existing, err := client.Get(ctx, id.ResourceGroup, id.WorkspaceName, id.Name)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			dc, ok := existing.Value.(securityinsight.TiTaxiiDataConnector)
			if !ok {
				return fmt.Errorf("%s was not an Threat Intelligence TAXII Data Connector", id)
			}

			if props := dc.TiTaxiiDataConnectorProperties; props != nil {
				if metadata.ResourceData.HasChange("display_name") {
					props.FriendlyName = &plan.DisplayName
				}
				if metadata.ResourceData.HasChange("api_root_url") {
					props.TaxiiServer = &plan.APIRootURL
				}
				if metadata.ResourceData.HasChange("collection_id") {
					props.CollectionID = &plan.CollectionID
				}
				if metadata.ResourceData.HasChange("user_name") {
					props.UserName = &plan.UserName
				}
				if metadata.ResourceData.HasChange("password") {
					props.Password = &plan.Password
				}
				if metadata.ResourceData.HasChange("polling_frequency") {
					props.PollingFrequency = securityinsight.PollingFrequency(plan.PollingFrequency)
				}
				if metadata.ResourceData.HasChange("lookback_date") {
					// Format is guaranteed by schema validation
					lookbackDate, _ := time.Parse(time.RFC3339, plan.LookbackDate)
					props.TaxiiLookbackPeriod = &date.Time{
						Time: lookbackDate,
					}
				}

				// Setting the user name and password if non empty in plan, which are required by the API.
				if plan.UserName != "" {
					props.UserName = &plan.UserName
				}
				if plan.Password != "" {
					props.Password = &plan.Password
				}
			}

			if _, err := client.CreateOrUpdate(ctx, id.ResourceGroup, id.WorkspaceName, id.Name, dc); err != nil {
				return fmt.Errorf("updating %s: %+v", id, err)
			}

			return nil
		},
	}
}
