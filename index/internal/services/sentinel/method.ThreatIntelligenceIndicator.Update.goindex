package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/azuresdkhacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	securityinsight "github.com/jackofallops/kermit/sdk/securityinsights/2022-10-01-preview/securityinsights"
)
func (r ThreatIntelligenceIndicator) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := azuresdkhacks.ThreatIntelligenceIndicatorClient{
				BaseClient: metadata.Client.Sentinel.ThreatIntelligenceClient.BaseClient,
			}

			id, err := parse.ThreatIntelligenceIndicatorID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model IndicatorModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			resp, err := client.Get(ctx, id.ResourceGroup, id.WorkspaceName, id.IndicatorName)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			properties, ok := resp.Value.AsThreatIntelligenceIndicatorModel()
			if !ok {
				return fmt.Errorf("retrieving %s: type mismatch", id)
			}

			if metadata.ResourceData.HasChange("confidence") {
				if model.Confidence == -1 {
					properties.Confidence = nil
				} else {
					properties.Confidence = pointer.To(int32(model.Confidence))
				}
			}

			if metadata.ResourceData.HasChange("created_by") {
				properties.CreatedByRef = &model.CreatedByRef
			}

			if metadata.ResourceData.HasChange("description") {
				properties.Description = &model.Description
			}

			if metadata.ResourceData.HasChange("display_name") {
				properties.DisplayName = &model.DisplayName
			}

			if metadata.ResourceData.HasChange("extension") {
				extensionsValue, err := pluginsdk.ExpandJsonFromString(model.Extensions)
				if err != nil {
					return err
				}
				properties.Extensions = extensionsValue
			}

			if metadata.ResourceData.HasChange("external_reference") {
				properties.ExternalReferences = expandThreatIntelligenceExternalReferenceModel(model.ExternalRefrence)
			}

			if metadata.ResourceData.HasChange("granular_marking") {
				properties.GranularMarkings = expandThreatIntelligenceGranularMarkingModelModel(model.GranularMarkings)
			}

			if metadata.ResourceData.HasChange("indicator_type") {
				properties.IndicatorTypes = &model.IndicatorTypes
			}

			if metadata.ResourceData.HasChange("kill_chain_phase") {
				properties.KillChainPhases = expandThreatIntelligenceKillChainPhaseModel(model.KillChainPhases)
			}

			if metadata.ResourceData.HasChange("tags") {
				properties.Labels = &model.Labels
			}

			if metadata.ResourceData.HasChange("language") {
				properties.Language = &model.Language
			}

			if metadata.ResourceData.HasChange("object_marking_refs") {
				properties.ObjectMarkingRefs = &model.ObjectMarking
			}

			if metadata.ResourceData.HasChange("pattern") {
				patternValue, err := expandIndicatorPattern(model.PatternType, model.Pattern)
				if err != nil {
					return err
				}
				properties.Pattern = &patternValue
			}

			if metadata.ResourceData.HasChange("pattern_type") {
				properties.PatternType = &model.PatternType
			}

			if metadata.ResourceData.HasChange("pattern_version") {
				properties.PatternVersion = &model.PatternVersion
			}

			if metadata.ResourceData.HasChange("revoked") {
				properties.Revoked = &model.Revoked
			}

			if metadata.ResourceData.HasChange("source") {
				properties.Source = &model.Source
			}

			if metadata.ResourceData.HasChange("threat_types") {
				properties.ThreatTypes = &model.ThreatTypes
			}

			if metadata.ResourceData.HasChange("validate_from_utc") {
				properties.ValidFrom = &model.ValidFrom
			}

			if metadata.ResourceData.HasChange("validate_until_utc") {
				properties.ValidUntil = &model.ValidUntil
			}

			if _, err := client.Create(ctx, id.ResourceGroup, id.WorkspaceName, id.IndicatorName, *properties); err != nil {
				return fmt.Errorf("updating %s: %+v", *id, err)
			}

			return nil
		},
	}
}
