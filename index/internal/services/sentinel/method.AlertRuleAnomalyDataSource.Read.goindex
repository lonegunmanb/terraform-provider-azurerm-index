package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2022-10-01/workspaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/azuresdkhacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	securityinsight "github.com/jackofallops/kermit/sdk/securityinsights/2022-10-01-preview/securityinsights"
)
func (a AlertRuleAnomalyDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var metaModel AlertRuleAnomalyDataSourceModel
			if err := metadata.Decode(&metaModel); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.Sentinel.AnalyticsSettingsClient
			workspaceId, err := workspaces.ParseWorkspaceID(metaModel.WorkspaceId)
			if err != nil {
				return fmt.Errorf("parsing workspace id: %+v", err)
			}

			setting, err := AlertRuleAnomalyReadWithPredicate(ctx, client.BaseClient, *workspaceId, func(v *azuresdkhacks.AnomalySecurityMLAnalyticsSettings) bool {
				if v.Name != nil && strings.EqualFold(*v.Name, metaModel.Name) {
					return true
				}

				if v.DisplayName != nil && strings.EqualFold(*v.DisplayName, metaModel.DisplayName) {
					return true
				}

				return false
			})
			if err != nil {
				return fmt.Errorf("retrieving: %+v", err)
			}
			if setting == nil {
				if metaModel.DisplayName != "" {
					return fmt.Errorf("reading Sentinel Anomaly Rule (Display Name %q) was not found", metaModel.DisplayName)
				}
				return fmt.Errorf("reading Sentinel Anomaly Rule (Name %q) was not found", metaModel.Name)
			}

			id, err := parse.MLAnalyticsSettingsID(AlertRuleAnomalyIdFromWorkspaceId(*workspaceId, *setting.Name))
			if err != nil {
				return fmt.Errorf("parsing: %+v", err)
			}

			state := AlertRuleAnomalyDataSourceModel{
				WorkspaceId: workspaceId.ID(),
				Mode:        string(setting.SettingsStatus),
			}

			if setting.Name != nil {
				state.Name = *setting.Name
			}
			if setting.DisplayName != nil {
				state.DisplayName = *setting.DisplayName
			}
			if setting.AnomalyVersion != nil {
				state.AnomalyVersion = *setting.AnomalyVersion
			}
			if setting.AnomalySettingsVersion != nil {
				state.AnomalySettingsVersion = int64(*setting.AnomalySettingsVersion)
			}
			if setting.Description != nil {
				state.Description = *setting.Description
			}
			if setting.Enabled != nil {
				state.Enabled = *setting.Enabled
			}
			if setting.Frequency != nil {
				state.Frequency = *setting.Frequency
			}
			state.RequiredDataConnectors = flattenSentinelAlertRuleAnomalyRequiredDataConnectors(setting.RequiredDataConnectors)
			if setting.SettingsDefinitionID != nil {
				state.SettingsDefinitionId = setting.SettingsDefinitionID.String()
			}
			state.Tactics = flattenSentinelAlertRuleAnomalyTactics(setting.Tactics)
			if setting.Techniques != nil {
				state.Techniques = *setting.Techniques
			}

			if setting.CustomizableObservations != nil {
				state.MultiSelectObservation = flattenSentinelAlertRuleAnomalyMultiSelect(setting.CustomizableObservations.MultiSelectObservations)
				state.SingleSelectObservation = flattenSentinelAlertRuleAnomalySingleSelect(setting.CustomizableObservations.SingleSelectObservations)
				state.PrioritizeExcludeObservation = flattenSentinelAlertRuleAnomalyPriority(setting.CustomizableObservations.PrioritizeExcludeObservations)
				state.ThresholdObservation = flattenSentinelAlertRuleAnomalyThreshold(setting.CustomizableObservations.ThresholdObservations)
			}

			metadata.SetID(id)
			return metadata.Encode(&state)
		},
	}
}
