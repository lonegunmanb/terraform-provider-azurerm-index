package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/azuresdkhacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	securityinsight "github.com/jackofallops/kermit/sdk/securityinsights/2022-10-01-preview/securityinsights"
)
func queryIndicatorsList(ctx context.Context, client azuresdkhacks.ThreatIntelligenceIndicatorClient, workspaceId *workspaces.WorkspaceId) ([]*azuresdkhacks.ThreatIntelligenceIndicatorModel, error) {
	output := make([]*azuresdkhacks.ThreatIntelligenceIndicatorModel, 0)
	resp, err := client.QueryIndicators(ctx, workspaceId.ResourceGroupName, workspaceId.WorkspaceName, securityinsight.ThreatIntelligenceFilteringCriteria{})
	if err != nil {
		return output, err
	}
	for resp.NotDone() {
		for _, indicator := range resp.Values() {
			indicator, ok := indicator.AsThreatIntelligenceIndicatorModel()
			if !ok {
				continue
			}
			output = append(output, indicator)
		}
		if err := resp.NextWithContext(ctx); err != nil {
			return output, err
		}
	}
	return output, nil
}
