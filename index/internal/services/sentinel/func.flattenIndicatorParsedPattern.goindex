package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/azuresdkhacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	securityinsight "github.com/jackofallops/kermit/sdk/securityinsights/2022-10-01-preview/securityinsights"
)
func flattenIndicatorParsedPattern(input *[]securityinsight.ThreatIntelligenceParsedPattern) []parsedPatternModel {
	output := make([]parsedPatternModel, 0)
	if input == nil {
		return output
	}
	for _, v := range *input {
		o := parsedPatternModel{}
		if v.PatternTypeKey != nil {
			o.PatternTypeKey = *v.PatternTypeKey
		}
		if v.PatternTypeValues != nil {
			for _, patternTypeValue := range *v.PatternTypeValues {
				valueOutput := patternTypeValuesModel{}
				if patternTypeValue.Value != nil {
					valueOutput.Value = *patternTypeValue.Value
				}
				if patternTypeValue.ValueType != nil {
					valueOutput.ValueType = *patternTypeValue.ValueType
				}
				o.PatternTypeValues = append(o.PatternTypeValues, valueOutput)
			}
		}
		output = append(output, o)
	}
	return output
}
