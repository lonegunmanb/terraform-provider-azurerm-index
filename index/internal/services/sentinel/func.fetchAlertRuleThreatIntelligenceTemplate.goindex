package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"time"

	alertruletemplates "github.com/Azure/azure-sdk-for-go/services/preview/securityinsight/mgmt/2021-09-01-preview/securityinsight" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2022-10-01/workspaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/securityinsights/2023-12-01-preview/alertrules"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func fetchAlertRuleThreatIntelligenceTemplate(ctx context.Context, templateClient *alertruletemplates.AlertRuleTemplatesClient, workspaceId workspaces.WorkspaceId, templateName string) (alertruletemplates.ThreatIntelligenceAlertRuleTemplate, error) {
	foo := alertruletemplates.ThreatIntelligenceAlertRuleTemplate{}
	id := parse.NewSentinelAlertRuleTemplateID(workspaceId.SubscriptionId, workspaceId.ResourceGroupName, workspaceId.WorkspaceName, templateName)

	resp, err := templateClient.Get(ctx, id.ResourceGroup, id.WorkspaceName, id.AlertRuleTemplateName)
	if err != nil {
		return foo, fmt.Errorf("reading %q: %+v", id, err)
	}

	v, ok := resp.Value.(alertruletemplates.ThreatIntelligenceAlertRuleTemplate)
	if !ok {
		return foo, fmt.Errorf("reading %q: type mismatch", id)
	}

	return v, nil
}
