package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	securityinsight "github.com/jackofallops/kermit/sdk/securityinsights/2022-10-01-preview/securityinsights"
)
func resourceSentinelDataConnectorOffice365Read(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Sentinel.DataConnectorsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.DataConnectorID(d.Id())
	if err != nil {
		return err
	}
	workspaceId := workspaces.NewWorkspaceID(id.SubscriptionId, id.ResourceGroup, id.WorkspaceName)

	resp, err := client.Get(ctx, id.ResourceGroup, id.WorkspaceName, id.Name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[DEBUG] %s was not found - removing from state!", id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	dc, ok := resp.Value.(securityinsight.OfficeDataConnector)
	if !ok {
		return fmt.Errorf("%s was not an Office 365 Data Connector", id)
	}

	d.Set("name", id.Name)
	d.Set("log_analytics_workspace_id", workspaceId.ID())
	d.Set("tenant_id", dc.TenantID)

	if dt := dc.DataTypes; dt != nil {
		exchangeEnabled := false
		if exchange := dt.Exchange; exchange != nil {
			exchangeEnabled = strings.EqualFold(string(exchange.State), string(securityinsight.DataTypeStateEnabled))
		}
		d.Set("exchange_enabled", exchangeEnabled)

		sharePointEnabled := false
		if sharePoint := dt.SharePoint; sharePoint != nil {
			sharePointEnabled = strings.EqualFold(string(sharePoint.State), string(securityinsight.DataTypeStateEnabled))
		}
		d.Set("sharepoint_enabled", sharePointEnabled)

		teamsEnabled := false
		if teams := dt.Teams; teams != nil {
			teamsEnabled = strings.EqualFold(string(teams.State), string(securityinsight.DataTypeStateEnabled))
		}
		d.Set("teams_enabled", teamsEnabled)
	}

	return nil
}
