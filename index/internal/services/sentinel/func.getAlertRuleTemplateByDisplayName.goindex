package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/securityinsight/mgmt/2021-09-01-preview/securityinsight" // nolint: staticcheck
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func getAlertRuleTemplateByDisplayName(ctx context.Context, client *securityinsight.AlertRuleTemplatesClient, workspaceID *workspaces.WorkspaceId, displayName string) (res securityinsight.BasicAlertRuleTemplate, name *string, err error) {
	templates, err := client.ListComplete(ctx, workspaceID.ResourceGroupName, workspaceID.WorkspaceName)
	if err != nil {
		return nil, nil, err
	}
	var results []securityinsight.BasicAlertRuleTemplate
	for templates.NotDone() {
		template := templates.Value()
		switch template := template.(type) {
		case securityinsight.FusionAlertRuleTemplate:
			if template.DisplayName != nil && *template.DisplayName == displayName {
				results = append(results, templates.Value())
				if template.Name != nil {
					name = template.Name
				}
			}
		case securityinsight.MLBehaviorAnalyticsAlertRuleTemplate:
			if template.DisplayName != nil && *template.DisplayName == displayName {
				results = append(results, templates.Value())
				if template.Name != nil {
					name = template.Name
				}
			}
		case securityinsight.MicrosoftSecurityIncidentCreationAlertRuleTemplate:
			if template.DisplayName != nil && *template.DisplayName == displayName {
				results = append(results, templates.Value())
				if template.Name != nil {
					name = template.Name
				}
			}
		case securityinsight.ScheduledAlertRuleTemplate:
			if template.DisplayName != nil && *template.DisplayName == displayName {
				results = append(results, templates.Value())
				if template.Name != nil {
					name = template.Name
				}
			}
		case securityinsight.NrtAlertRuleTemplate:
			if template.DisplayName != nil && *template.DisplayName == displayName {
				results = append(results, templates.Value())
				if template.Name != nil {
					name = template.Name
				}
			}
		case securityinsight.ThreatIntelligenceAlertRuleTemplate:
			if template.DisplayName != nil && *template.DisplayName == displayName {
				results = append(results, templates.Value())
				if template.Name != nil {
					name = template.Name
				}
			}
		}

		if err := templates.NextWithContext(ctx); err != nil {
			return nil, nil, fmt.Errorf("iterating Alert Rule Templates: %+v", err)
		}
	}

	if len(results) == 0 {
		return nil, name, fmt.Errorf("no Alert Rule Template found with display name: %s", displayName)
	}
	if len(results) > 1 {
		return nil, name, fmt.Errorf("more than one Alert Rule Template found with display name: %s", displayName)
	}
	return results[0], name, nil
}
