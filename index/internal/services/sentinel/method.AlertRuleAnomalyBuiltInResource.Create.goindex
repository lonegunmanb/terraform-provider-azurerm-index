package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2022-10-01/workspaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/azuresdkhacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	securityinsight "github.com/jackofallops/kermit/sdk/securityinsights/2022-10-01-preview/securityinsights"
)
func (r AlertRuleAnomalyBuiltInResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var metaModel AlertRuleAnomalyBuiltInModel
			if err := metadata.Decode(&metaModel); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.Sentinel.AnalyticsSettingsClient

			workspaceId, err := workspaces.ParseWorkspaceID(metaModel.WorkspaceId)
			if err != nil {
				return fmt.Errorf("parsing workspace id: %+v", err)
			}

			builtinRule, err := AlertRuleAnomalyReadWithPredicate(ctx, client.BaseClient, *workspaceId, func(v *azuresdkhacks.AnomalySecurityMLAnalyticsSettings) bool {
				if v.Name != nil && strings.EqualFold(*v.Name, metaModel.Name) {
					return true
				}

				if v.DisplayName != nil && strings.EqualFold(*v.DisplayName, metaModel.DisplayName) {
					return true
				}

				return false
			})
			if err != nil {
				return fmt.Errorf("reading: %+v", err)
			}
			if builtinRule == nil {
				if metaModel.DisplayName != "" {
					return fmt.Errorf("built in rule (Display Name %q) was not found", metaModel.DisplayName)
				}
				return fmt.Errorf("built in rule (Display Name %q) was not found", metaModel.Name)
			}

			id, err := parse.MLAnalyticsSettingsID(AlertRuleAnomalyIdFromWorkspaceId(*workspaceId, *builtinRule.Name))
			if err != nil {
				return fmt.Errorf("parsing: %+v", err)
			}

			param := securityinsight.AnomalySecurityMLAnalyticsSettings{
				Kind: securityinsight.KindBasicSecurityMLAnalyticsSettingKindAnomaly,
				AnomalySecurityMLAnalyticsSettingsProperties: &securityinsight.AnomalySecurityMLAnalyticsSettingsProperties{
					Description:              builtinRule.Description,
					DisplayName:              builtinRule.DisplayName,
					RequiredDataConnectors:   builtinRule.RequiredDataConnectors,
					Tactics:                  builtinRule.Tactics,
					Techniques:               builtinRule.Techniques,
					AnomalyVersion:           builtinRule.AnomalyVersion,
					Frequency:                builtinRule.Frequency,
					IsDefaultSettings:        builtinRule.IsDefaultSettings,
					AnomalySettingsVersion:   builtinRule.AnomalySettingsVersion,
					SettingsDefinitionID:     builtinRule.SettingsDefinitionID,
					Enabled:                  utils.Bool(metaModel.Enabled),
					SettingsStatus:           securityinsight.SettingsStatus(metaModel.Mode),
					CustomizableObservations: builtinRule.CustomizableObservations,
				},
			}

			_, err = client.CreateOrUpdate(ctx, id.ResourceGroup, id.WorkspaceName, id.SecurityMLAnalyticsSettingName, param)
			if err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
