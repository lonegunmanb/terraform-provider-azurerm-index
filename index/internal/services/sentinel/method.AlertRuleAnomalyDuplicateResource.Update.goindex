package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/google/uuid"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2022-10-01/workspaces"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/azuresdkhacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	securityinsight "github.com/jackofallops/kermit/sdk/securityinsights/2022-10-01-preview/securityinsights"
)
func (r AlertRuleAnomalyDuplicateResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var metaModel AlertRuleAnomalyDuplicateModel
			if err := metadata.Decode(&metaModel); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.Sentinel.AnalyticsSettingsClient

			id, err := parse.MLAnalyticsSettingsID(metadata.ResourceData.Id())
			if err != nil {
				return fmt.Errorf("parsing %s: %+v", metadata.ResourceData.Id(), err)
			}
			workspaceId := workspaces.NewWorkspaceID(id.SubscriptionId, id.ResourceGroup, id.WorkspaceName)

			existing, err := AlertRuleAnomalyReadWithPredicate(ctx, client.BaseClient, workspaceId, func(v *azuresdkhacks.AnomalySecurityMLAnalyticsSettings) bool {
				if v.ID != nil && strings.EqualFold(*v.ID, id.ID()) {
					return true
				}

				return false
			})
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}
			if existing == nil {
				return fmt.Errorf("retrieving %s: Alert Rule Anomaly not found", *id)
			}

			param := securityinsight.AnomalySecurityMLAnalyticsSettings{
				Kind: securityinsight.KindBasicSecurityMLAnalyticsSettingKindAnomaly,
				AnomalySecurityMLAnalyticsSettingsProperties: &securityinsight.AnomalySecurityMLAnalyticsSettingsProperties{
					Description:            existing.Description,
					DisplayName:            existing.DisplayName,
					RequiredDataConnectors: existing.RequiredDataConnectors,
					Tactics:                existing.Tactics,
					Techniques:             existing.Techniques,
					AnomalyVersion:         existing.AnomalyVersion,
					Frequency:              existing.Frequency,
					IsDefaultSettings:      existing.IsDefaultSettings,
					AnomalySettingsVersion: existing.AnomalySettingsVersion,
					SettingsDefinitionID:   existing.SettingsDefinitionID,
					Enabled:                utils.Bool(metaModel.Enabled),
					SettingsStatus:         securityinsight.SettingsStatus(metaModel.Mode),
				},
			}

			customizableObservations := &azuresdkhacks.AnomalySecurityMLAnalyticsCustomizableObservations{}
			customizableObservations.MultiSelectObservations, err = expandAlertRuleAnomalyMultiSelectObservations(existing.CustomizableObservations.MultiSelectObservations, metaModel.MultiSelectObservation)
			if err != nil {
				return fmt.Errorf("expanding `multi_select_observation`: %+v", err)
			}
			customizableObservations.SingleSelectObservations, err = expandAlertRuleAnomalySingleSelectObservations(existing.CustomizableObservations.SingleSelectObservations, metaModel.SingleSelectObservation)
			if err != nil {
				return fmt.Errorf("expanding `single_select_observation`: %+v", err)
			}
			customizableObservations.PrioritizeExcludeObservations, err = expandAlertRuleAnomalyPrioritizeExcludeObservations(existing.CustomizableObservations.PrioritizeExcludeObservations, metaModel.PrioritizeExcludeObservation)
			if err != nil {
				return fmt.Errorf("expanding `prioritize_exclude_observation`: %+v", err)
			}
			customizableObservations.ThresholdObservations, err = expandAlertRuleAnomalyThresholdObservations(existing.CustomizableObservations.ThresholdObservations, metaModel.ThresholdObservation)
			if err != nil {
				return fmt.Errorf("expanding `threshold_observation`: %+v", err)
			}

			param.CustomizableObservations = customizableObservations

			_, err = client.CreateOrUpdate(ctx, id.ResourceGroup, id.WorkspaceName, id.SecurityMLAnalyticsSettingName, param)
			if err != nil {
				return fmt.Errorf("updating %s: %+v", id, err)
			}

			return nil
		},
	}
}
