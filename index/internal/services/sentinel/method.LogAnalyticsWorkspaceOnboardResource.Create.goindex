package github.com/hashicorp/terraform-provider-azurerm/internal/services/sentinel
import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2022-10-01/workspaces"
	"github.com/hashicorp/go-azure-sdk/resource-manager/securityinsights/2022-11-01/sentinelonboardingstates"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (r LogAnalyticsWorkspaceOnboardResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model SecurityInsightsSentinelOnboardingStateModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.Sentinel.OnboardingStatesClient
			// the service only support `default` state
			var id sentinelonboardingstates.OnboardingStateId
			parsedWorkspaceId, err := workspaces.ParseWorkspaceID(model.WorkspaceId)
			if err != nil {
				return fmt.Errorf("parsing `log_analytics_workspace_id`: %+v", err)
			}
			id = sentinelonboardingstates.NewOnboardingStateID(parsedWorkspaceId.SubscriptionId, parsedWorkspaceId.ResourceGroupName, parsedWorkspaceId.WorkspaceName, "default")

			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			properties := &sentinelonboardingstates.SentinelOnboardingState{
				Properties: &sentinelonboardingstates.SentinelOnboardingStateProperties{
					CustomerManagedKey: &model.CustomerManagedKeyEnabled,
				},
			}

			if _, err := client.Create(ctx, id, *properties); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			deadline, ok := ctx.Deadline()
			if !ok {
				return fmt.Errorf("context has no deadline")
			}

			stateConf := &pluginsdk.StateChangeConf{
				Pending: []string{"404"},
				Target:  []string{"200"},
				Refresh: func() (interface{}, string, error) {
					resp, err := client.Get(ctx, id)
					statusCode := "dropped connection"
					if resp.HttpResponse != nil {
						statusCode = strconv.Itoa(resp.HttpResponse.StatusCode)
					}

					if err != nil {
						if response.WasNotFound(resp.HttpResponse) {
							return resp, statusCode, nil
						}
						return resp, "", err
					}

					return resp, statusCode, nil
				},
				Timeout: time.Until(deadline),
				Delay:   15 * time.Second,
			}

			if _, err = stateConf.WaitForStateContext(ctx); err != nil {
				return fmt.Errorf("waiting for %s to be fully onboarded: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
