package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appplatform/2024-01-01-preview/appplatform"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandSpringCloudCustomizedAcceleratorGitRepository(repository []GitRepositoryModel) appplatform.AcceleratorGitRepository {
	if len(repository) == 0 {
		return appplatform.AcceleratorGitRepository{}
	}
	repo := repository[0]
	var authSetting appplatform.AcceleratorAuthSetting
	var caCertResourceID *string
	if repo.CaCertificateId != "" {
		caCertResourceID = pointer.To(repo.CaCertificateId)
	}
	authSetting = appplatform.AcceleratorPublicSetting{
		CaCertResourceId: caCertResourceID,
	}
	if len(repo.BasicAuth) != 0 {
		basicAuth := repo.BasicAuth[0]
		authSetting = appplatform.AcceleratorBasicAuthSetting{
			Username:         basicAuth.Username,
			Password:         pointer.To(basicAuth.Password),
			CaCertResourceId: caCertResourceID,
		}
	}
	if len(repo.SshAuth) != 0 {
		sshAuth := repo.SshAuth[0]
		authSetting = appplatform.AcceleratorSshSetting{
			HostKey:          pointer.To(sshAuth.HostKey),
			HostKeyAlgorithm: pointer.To(sshAuth.PrivateKeyAlgorithm),
			PrivateKey:       pointer.To(sshAuth.PrivateKey),
		}
	}
	res := appplatform.AcceleratorGitRepository{
		Url:         repo.Url,
		Branch:      pointer.To(repo.Branch),
		Commit:      pointer.To(repo.Commit),
		GitTag:      pointer.To(repo.GitTag),
		AuthSetting: authSetting,
		SubPath:     pointer.To(repo.Path),
	}
	if repo.IntervalInSeconds != 0 {
		res.IntervalInSeconds = pointer.To(repo.IntervalInSeconds)
	}
	return res
}
