package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud
import (
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/appplatform/2023-05-01-preview/appplatform"
)
func flattenSpringCloudAppAddon(configs map[string]interface{}) *string {
	if len(configs) == 0 {
		return nil
	}
	// The returned value has inconsistent casing
	// TODO: Remove the normalization codes once the following issue is fixed.
	// Issue: https://github.com/Azure/azure-rest-api-specs/issues/22481
	if raw, ok := configs["applicationConfigurationService"]; ok && raw != nil {
		if applicationConfigurationService, ok := raw.(map[string]interface{}); ok && len(applicationConfigurationService) != 0 {
			if resourceId, ok := applicationConfigurationService["resourceId"]; ok && resourceId != nil {
				applicationConfigurationServiceId, err := parse.SpringCloudConfigurationServiceIDInsensitively(resourceId.(string))
				if err == nil {
					applicationConfigurationService["resourceId"] = applicationConfigurationServiceId.ID()
					configs["applicationConfigurationService"] = applicationConfigurationService
				}
			}
		}
	}
	if raw, ok := configs["serviceRegistry"]; ok && raw != nil {
		if serviceRegistry, ok := raw.(map[string]interface{}); ok && len(serviceRegistry) != 0 {
			if resourceId, ok := serviceRegistry["resourceId"]; ok && resourceId != nil {
				serviceRegistryId, err := parse.SpringCloudServiceRegistryIDInsensitively(resourceId.(string))
				if err == nil {
					serviceRegistry["resourceId"] = serviceRegistryId.ID()
					configs["serviceRegistry"] = serviceRegistry
				}
			}
		}
	}
	addonConfig, _ := json.Marshal(configs)
	return utils.String(string(addonConfig))
}
