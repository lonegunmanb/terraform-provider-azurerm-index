package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	cosmosValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/appplatform/2023-05-01-preview/appplatform"
)
func resourceSpringCloudAppCosmosDBAssociationRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).AppPlatform.BindingsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.SpringCloudAppAssociationID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, id.ResourceGroup, id.SpringName, id.AppName, id.BindingName)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[INFO] Spring Cloud App Association %q does not exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("reading %s: %+v", id, err)
	}

	d.Set("name", id.BindingName)
	d.Set("spring_cloud_app_id", parse.NewSpringCloudAppID(id.SubscriptionId, id.ResourceGroup, id.SpringName, id.AppName).ID())
	if props := resp.Properties; props != nil {
		d.Set("cosmosdb_account_id", props.ResourceID)

		apiType := ""
		if v, ok := props.BindingParameters[springCloudAppCosmosDbAssociationKeyAPIType]; ok && v != nil {
			apiType = *v
		}
		d.Set("api_type", apiType)

		cassandraKeyspaceName := ""
		if v, ok := props.BindingParameters[springCloudAppCosmosDbAssociationKeyKeySpace]; ok && v != nil {
			cassandraKeyspaceName = *v
		}
		d.Set("cosmosdb_cassandra_keyspace_name", cassandraKeyspaceName)

		mongoDatabaseName := ""
		sqlDatabaseName := ""
		gremlinDatabaseName := ""
		if v, ok := props.BindingParameters[springCloudAppCosmosDbAssociationKeyDatabaseName]; ok && v != nil {
			switch apiType {
			case springCloudAppCosmosDbAssociationAPITypeMongo:
				mongoDatabaseName = *v
			case springCloudAppCosmosDbAssociationAPITypeSql:
				sqlDatabaseName = *v
			case springCloudAppCosmosDbAssociationAPITypeGremlin:
				gremlinDatabaseName = *v
			}
		}
		d.Set("cosmosdb_gremlin_database_name", gremlinDatabaseName)
		d.Set("cosmosdb_mongo_database_name", mongoDatabaseName)
		d.Set("cosmosdb_sql_database_name", sqlDatabaseName)

		gremlinGraphName := ""
		if v, ok := props.BindingParameters[springCloudAppCosmosDbAssociationKeyCollectionName]; ok && v != nil {
			gremlinGraphName = *v
		}
		d.Set("cosmosdb_gremlin_graph_name", gremlinGraphName)
	}
	return nil
}
