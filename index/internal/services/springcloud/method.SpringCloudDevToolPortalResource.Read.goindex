package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/appplatform/2023-05-01-preview/appplatform"
)
func (s SpringCloudDevToolPortalResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.AppPlatform.DevToolPortalClient

			id, err := parse.SpringCloudDevToolPortalID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, id.ResourceGroup, id.SpringName, id.DevToolPortalName)
			if err != nil {
				if utils.ResponseWasNotFound(resp.Response) {
					return metadata.MarkAsGone(id)
				}

				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}
			state := SpringCloudDevToolPortalModel{
				Name:                 id.DevToolPortalName,
				SpringCloudServiceId: parse.NewSpringCloudServiceID(id.SubscriptionId, id.ResourceGroup, id.SpringName).ID(),
			}

			var model SpringCloudDevToolPortalModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			if props := resp.Properties; props != nil {
				if props.Public != nil {
					state.PublicNetworkAccessEnabled = *props.Public
				}
				if props.SsoProperties != nil {
					state.Sso = flattenSpringCloudDevToolPortalSsoProperties(props.SsoProperties, model)
				}
				if props.Features != nil {
					if props.Features.ApplicationAccelerator != nil && props.Features.ApplicationAccelerator.State == appplatform.DevToolPortalFeatureStateEnabled {
						state.ApplicationAcceleratorEnabled = true
					}
					if props.Features.ApplicationLiveView != nil && props.Features.ApplicationLiveView.State == appplatform.DevToolPortalFeatureStateEnabled {
						state.ApplicationLiveViewEnabled = true
					}
				}
			}
			return metadata.Encode(&state)
		},
	}
}
