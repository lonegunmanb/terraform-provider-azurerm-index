package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/appplatform/2023-05-01-preview/appplatform"
)
func flattenBuildPackBindingBuildPackBindingLaunchProperties(input *appplatform.BuildpackBindingLaunchProperties, old []interface{}) []interface{} {
	if input == nil {
		return make([]interface{}, 0)
	}

	props := make(map[string]interface{})
	if input.Properties != nil {
		props = utils.FlattenMapStringPtrString(input.Properties)
	}
	secrets := make(map[string]interface{})
	if len(old) != 0 {
		v := old[0].(map[string]interface{})
		if secretsRaw, ok := v["secrets"]; ok && secretsRaw != nil {
			secrets = secretsRaw.(map[string]interface{})
		}
	}
	return []interface{}{
		map[string]interface{}{
			"properties": props,
			"secrets":    secrets,
		},
	}
}
