package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/appplatform/2023-05-01-preview/appplatform"
)
func flattenSpringCloudDevToolPortalSsoProperties(properties *appplatform.DevToolPortalSsoProperties, model SpringCloudDevToolPortalModel) []SsoModel {
	if properties == nil {
		return []SsoModel{}
	}

	clientId := ""
	if properties.ClientID != nil {
		clientId = *properties.ClientID
	}

	clientSecret := ""
	if len(model.Sso) != 0 {
		clientSecret = model.Sso[0].ClientSecret
	}

	metadataUrl := ""
	if properties.MetadataURL != nil {
		metadataUrl = *properties.MetadataURL
	}

	scopes := make([]string, 0)
	if properties.Scopes != nil {
		scopes = *properties.Scopes
	}

	return []SsoModel{
		{
			ClientId:     clientId,
			ClientSecret: clientSecret,
			MetadataUrl:  metadataUrl,
			Scope:        scopes,
		},
	}
}
