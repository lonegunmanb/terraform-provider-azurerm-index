package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appplatform/2024-01-01-preview/appplatform"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandConfigurationServiceConfigurationServiceGitRepositoryArray(input []SpringCloudRepositoryModel) *[]appplatform.ConfigurationServiceGitRepository {
	if len(input) == 0 {
		return nil
	}
	results := make([]appplatform.ConfigurationServiceGitRepository, 0)
	for _, v := range input {
		repo := appplatform.ConfigurationServiceGitRepository{
			Name:                  v.Name,
			Patterns:              v.Patterns,
			Uri:                   v.Uri,
			Label:                 v.Label,
			SearchPaths:           pointer.To(v.SearchPaths),
			Username:              pointer.To(v.Username),
			Password:              pointer.To(v.Password),
			HostKey:               pointer.To(v.HostKey),
			HostKeyAlgorithm:      pointer.To(v.HostKeyAlgorithm),
			PrivateKey:            pointer.To(v.PrivateKey),
			StrictHostKeyChecking: pointer.To(v.StrictHostKeyChecking),
		}
		if v.CaCertificateId != "" {
			repo.CaCertResourceId = pointer.To(v.CaCertificateId)
		}
		results = append(results, repo)
	}
	return &results
}
