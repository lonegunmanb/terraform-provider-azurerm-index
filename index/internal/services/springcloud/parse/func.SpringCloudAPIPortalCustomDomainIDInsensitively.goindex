package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse
import (
	"errors"
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
)
func SpringCloudAPIPortalCustomDomainIDInsensitively(input string) (*SpringCloudAPIPortalCustomDomainId, error) {
	id, err := resourceids.ParseAzureResourceID(input)
	if err != nil {
		return nil, err
	}

	resourceId := SpringCloudAPIPortalCustomDomainId{
		SubscriptionId: id.SubscriptionID,
		ResourceGroup:  id.ResourceGroup,
	}

	if resourceId.SubscriptionId == "" {
		return nil, errors.New("ID was missing the 'subscriptions' element")
	}

	if resourceId.ResourceGroup == "" {
		return nil, errors.New("ID was missing the 'resourceGroups' element")
	}

	// find the correct casing for the 'spring' segment
	springKey := "spring"
	for key := range id.Path {
		if strings.EqualFold(key, springKey) {
			springKey = key
			break
		}
	}
	if resourceId.SpringName, err = id.PopSegment(springKey); err != nil {
		return nil, err
	}

	// find the correct casing for the 'apiPortals' segment
	apiPortalsKey := "apiPortals"
	for key := range id.Path {
		if strings.EqualFold(key, apiPortalsKey) {
			apiPortalsKey = key
			break
		}
	}
	if resourceId.ApiPortalName, err = id.PopSegment(apiPortalsKey); err != nil {
		return nil, err
	}

	// find the correct casing for the 'domains' segment
	domainsKey := "domains"
	for key := range id.Path {
		if strings.EqualFold(key, domainsKey) {
			domainsKey = key
			break
		}
	}
	if resourceId.DomainName, err = id.PopSegment(domainsKey); err != nil {
		return nil, err
	}

	if err := id.ValidateNoEmptySegments(input); err != nil {
		return nil, err
	}

	return &resourceId, nil
}
