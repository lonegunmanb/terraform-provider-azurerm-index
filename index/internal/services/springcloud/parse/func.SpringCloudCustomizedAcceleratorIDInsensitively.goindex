package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse
import (
	"errors"
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
)
func SpringCloudCustomizedAcceleratorIDInsensitively(input string) (*SpringCloudCustomizedAcceleratorId, error) {
	id, err := resourceids.ParseAzureResourceID(input)
	if err != nil {
		return nil, err
	}

	resourceId := SpringCloudCustomizedAcceleratorId{
		SubscriptionId: id.SubscriptionID,
		ResourceGroup:  id.ResourceGroup,
	}

	if resourceId.SubscriptionId == "" {
		return nil, errors.New("ID was missing the 'subscriptions' element")
	}

	if resourceId.ResourceGroup == "" {
		return nil, errors.New("ID was missing the 'resourceGroups' element")
	}

	// find the correct casing for the 'spring' segment
	springKey := "spring"
	for key := range id.Path {
		if strings.EqualFold(key, springKey) {
			springKey = key
			break
		}
	}
	if resourceId.SpringName, err = id.PopSegment(springKey); err != nil {
		return nil, err
	}

	// find the correct casing for the 'applicationAccelerators' segment
	applicationAcceleratorsKey := "applicationAccelerators"
	for key := range id.Path {
		if strings.EqualFold(key, applicationAcceleratorsKey) {
			applicationAcceleratorsKey = key
			break
		}
	}
	if resourceId.ApplicationAcceleratorName, err = id.PopSegment(applicationAcceleratorsKey); err != nil {
		return nil, err
	}

	// find the correct casing for the 'customizedAccelerators' segment
	customizedAcceleratorsKey := "customizedAccelerators"
	for key := range id.Path {
		if strings.EqualFold(key, customizedAcceleratorsKey) {
			customizedAcceleratorsKey = key
			break
		}
	}
	if resourceId.CustomizedAcceleratorName, err = id.PopSegment(customizedAcceleratorsKey); err != nil {
		return nil, err
	}

	if err := id.ValidateNoEmptySegments(input); err != nil {
		return nil, err
	}

	return &resourceId, nil
}
