package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	cosmosValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/cosmos/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/appplatform/2023-05-01-preview/appplatform"
)
func resourceSpringCloudAppCosmosDBAssociation() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceSpringCloudAppCosmosDBAssociationCreateUpdate,
		Read:   resourceSpringCloudAppCosmosDBAssociationRead,
		Update: resourceSpringCloudAppCosmosDBAssociationCreateUpdate,
		Delete: resourceSpringCloudAppCosmosDBAssociationDelete,

		SchemaVersion: 1,
		StateUpgraders: pluginsdk.StateUpgrades(map[int]pluginsdk.StateUpgrade{
			0: migration.SpringCloudAppCosmosDbAssociationV0ToV1{},
		}),

		Importer: pluginsdk.ImporterValidatingResourceIdThen(func(id string) error {
			_, err := parse.SpringCloudAppAssociationID(id)
			return err
		}, importSpringCloudAppAssociation(springCloudAppAssociationTypeCosmosDb)),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.SpringCloudAppAssociationName,
			},

			"spring_cloud_app_id": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.SpringCloudAppID,
			},

			"cosmosdb_account_id": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: cosmosValidate.DatabaseAccountID,
			},

			"api_type": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					springCloudAppCosmosDbAssociationAPITypeCassandra,
					springCloudAppCosmosDbAssociationAPITypeGremlin,
					springCloudAppCosmosDbAssociationAPITypeMongo,
					springCloudAppCosmosDbAssociationAPITypeSql,
					springCloudAppCosmosDbAssociationAPITypeTable,
				}, false),
			},

			"cosmosdb_access_key": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ValidateFunc: validation.StringIsNotEmpty,
			},

			"cosmosdb_cassandra_keyspace_name": {
				Type:          pluginsdk.TypeString,
				Optional:      true,
				ValidateFunc:  cosmosValidate.CosmosEntityName,
				ConflictsWith: []string{"cosmosdb_gremlin_database_name", "cosmosdb_gremlin_graph_name", "cosmosdb_mongo_database_name", "cosmosdb_sql_database_name"},
			},

			"cosmosdb_gremlin_database_name": {
				Type:          pluginsdk.TypeString,
				Optional:      true,
				ValidateFunc:  cosmosValidate.CosmosEntityName,
				RequiredWith:  []string{"cosmosdb_gremlin_graph_name"},
				ConflictsWith: []string{"cosmosdb_cassandra_keyspace_name", "cosmosdb_mongo_database_name", "cosmosdb_sql_database_name"},
			},

			"cosmosdb_gremlin_graph_name": {
				Type:          pluginsdk.TypeString,
				Optional:      true,
				ValidateFunc:  cosmosValidate.CosmosEntityName,
				RequiredWith:  []string{"cosmosdb_gremlin_database_name"},
				ConflictsWith: []string{"cosmosdb_cassandra_keyspace_name", "cosmosdb_mongo_database_name", "cosmosdb_sql_database_name"},
			},

			"cosmosdb_mongo_database_name": {
				Type:          pluginsdk.TypeString,
				Optional:      true,
				ValidateFunc:  cosmosValidate.CosmosEntityName,
				ConflictsWith: []string{"cosmosdb_cassandra_keyspace_name", "cosmosdb_gremlin_database_name", "cosmosdb_gremlin_graph_name", "cosmosdb_sql_database_name"},
			},

			"cosmosdb_sql_database_name": {
				Type:          pluginsdk.TypeString,
				Optional:      true,
				ValidateFunc:  cosmosValidate.CosmosEntityName,
				ConflictsWith: []string{"cosmosdb_cassandra_keyspace_name", "cosmosdb_gremlin_database_name", "cosmosdb_gremlin_graph_name", "cosmosdb_mongo_database_name"},
			},
		},
	}
}
