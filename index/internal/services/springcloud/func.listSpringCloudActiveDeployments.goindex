package github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/springcloud/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/jackofallops/kermit/sdk/appplatform/2023-05-01-preview/appplatform"
)
func listSpringCloudActiveDeployments(ctx context.Context, client *appplatform.DeploymentsClient, id *parse.SpringCloudAppId) ([]string, error) {
	it, err := client.ListComplete(ctx, id.ResourceGroup, id.SpringName, id.AppName, nil)
	if err != nil {
		return nil, fmt.Errorf("listing active deployment for %q: %+v", id, err)
	}
	deployments := make([]string, 0)
	for it.NotDone() {
		value := it.Value()
		if value.Properties != nil && value.Properties.Active != nil && *value.Properties.Active {
			deployments = append(deployments, *value.Name)
		}
		if err := it.NextWithContext(ctx); err != nil {
			return nil, fmt.Errorf("listing active deployment for %q: %+v", id, err)
		}
	}
	return deployments, nil
}
