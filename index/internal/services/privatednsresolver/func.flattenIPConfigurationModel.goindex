package github.com/hashicorp/terraform-provider-azurerm/internal/services/privatednsresolver
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dnsresolver/2022-07-01/dnsresolvers"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dnsresolver/2022-07-01/inboundendpoints"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenIPConfigurationModel(inputList *[]inboundendpoints.IPConfiguration) []IPConfigurationModel {
	if inputList == nil {
		return []IPConfigurationModel{}
	}

	outputList := make([]IPConfigurationModel, 0, len(*inputList))
	for _, input := range *inputList {
		output := IPConfigurationModel{}

		if input.PrivateIPAddress != nil {
			output.PrivateIPAddress = *input.PrivateIPAddress
		}

		if input.PrivateIPAllocationMethod != nil {
			output.PrivateIPAllocationMethod = *input.PrivateIPAllocationMethod
		}

		output.SubnetId = input.Subnet.Id

		outputList = append(outputList, output)
	}

	return outputList
}
