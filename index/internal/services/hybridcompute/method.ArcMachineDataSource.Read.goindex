package github.com/hashicorp/terraform-provider-azurerm/internal/services/hybridcompute
import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/hybridcompute/2022-11-10/machines"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (a ArcMachineDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.HybridCompute.MachinesClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var arcMachineModel ArcMachineModel
			if err := metadata.Decode(&arcMachineModel); err != nil {
				return err
			}

			id := machines.NewMachineID(subscriptionId, arcMachineModel.ResourceGroupName, arcMachineModel.Name)

			resp, err := client.Get(ctx, id, machines.GetOperationOptions{})
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return fmt.Errorf("%s was not found", id)
				}

				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			model := resp.Model
			if model == nil {
				return fmt.Errorf("retrieving %s: model was nil", id)
			}

			state := ArcMachineModel{
				Name:              id.MachineName,
				ResourceGroupName: id.ResourceGroupName,
				Location:          location.Normalize(model.Location),
			}

			identityValue := identity.FlattenSystemAssigned(model.Identity)

			if err := metadata.ResourceData.Set("identity", identityValue); err != nil {
				return fmt.Errorf("setting `identity`: %+v", err)
			}

			if properties := model.Properties; properties != nil {
				if properties.AdFqdn != nil {
					state.AdFqdn = *properties.AdFqdn
				}

				agentConfigurationValue, err := flattenAgentConfigurationModel(properties.AgentConfiguration)
				if err != nil {
					return err
				}

				state.AgentConfiguration = agentConfigurationValue

				if properties.AgentVersion != nil {
					state.AgentVersion = *properties.AgentVersion
				}

				if properties.ClientPublicKey != nil {
					state.ClientPublicKey = *properties.ClientPublicKey
				}

				cloudMetadataValue := flattenCloudMetadataModel(properties.CloudMetadata)

				state.CloudMetadata = cloudMetadataValue

				if properties.DetectedProperties != nil {
					state.DetectedProperties = *properties.DetectedProperties
				}

				if properties.DisplayName != nil {
					state.DisplayName = *properties.DisplayName
				}

				if properties.DnsFqdn != nil {
					state.DnsFqdn = *properties.DnsFqdn
				}

				if properties.DomainName != nil {
					state.DomainName = *properties.DomainName
				}

				if properties.ErrorDetails != nil {
					if len(*properties.ErrorDetails) > 0 {
						return fmt.Errorf("retrieving %s: error details: %+v", id, *properties.ErrorDetails)
					}
				}

				if properties.LastStatusChange != nil {
					state.LastStatusChange = *properties.LastStatusChange
				}

				locationDataValue := flattenLocationDataModel(properties.LocationData)

				state.LocationData = locationDataValue

				if properties.MachineFqdn != nil {
					state.MachineFqdn = *properties.MachineFqdn
				}

				if properties.MssqlDiscovered != nil {
					state.MssqlDiscovered, err = strconv.ParseBool(*properties.MssqlDiscovered)
					if err != nil {
						return err
					}
				}

				if properties.OsName != nil {
					state.OsName = *properties.OsName
				}

				osProfileValue := flattenOSProfileModel(properties.OsProfile)

				state.OsProfile = osProfileValue

				if properties.OsSku != nil {
					state.OsSku = *properties.OsSku
				}

				if properties.OsType != nil {
					state.OsType = *properties.OsType
				}

				if properties.OsVersion != nil {
					state.OsVersion = *properties.OsVersion
				}

				if properties.ParentClusterResourceId != nil {
					state.ParentClusterResourceId = *properties.ParentClusterResourceId
				}

				if properties.PrivateLinkScopeResourceId != nil {
					state.PrivateLinkScopeResourceId = *properties.PrivateLinkScopeResourceId
				}

				serviceStatusesValue := flattenServiceStatusesModel(properties.ServiceStatuses)

				state.ServiceStatuses = serviceStatusesValue

				if properties.Status != nil {
					state.Status = *properties.Status
				}

				if properties.VMId != nil {
					state.VmId = *properties.VMId
				}

				if properties.VMUuid != nil {
					state.VmUuid = *properties.VMUuid
				}
			}
			if model.Tags != nil {
				state.Tags = *model.Tags
			}

			metadata.SetID(id)
			return metadata.Encode(&state)
		},
	}
}
