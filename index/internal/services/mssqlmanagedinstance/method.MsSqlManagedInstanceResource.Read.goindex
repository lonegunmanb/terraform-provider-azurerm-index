package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssqlmanagedinstance
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/maintenance/2023-04-01/publicmaintenanceconfigurations"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/managedinstanceadministrators"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/managedinstanceazureadonlyauthentications"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/managedinstances"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssqlmanagedinstance/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r MsSqlManagedInstanceResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.MSSQLManagedInstance.ManagedInstancesClient

			id, err := commonids.ParseSqlManagedInstanceID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			metadata.Logger.Infof("Decoding state for %s", id)
			var state MsSqlManagedInstanceModel
			if err := metadata.Decode(&state); err != nil {
				return err
			}

			existing, err := client.Get(ctx, *id, managedinstances.GetOperationOptions{})
			if err != nil {
				if response.WasNotFound(existing.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %v", id, err)
			}
			model := MsSqlManagedInstanceModel{}

			if existing.Model != nil {
				model = MsSqlManagedInstanceModel{
					Name:              id.ManagedInstanceName,
					Location:          location.Normalize(existing.Model.Location),
					ResourceGroupName: id.ResourceGroupName,
					Identity:          r.flattenIdentity(existing.Model.Identity),
					Tags:              pointer.From(existing.Model.Tags),

					// This value is not returned, so we'll just set whatever is in the state/config
					AdministratorLoginPassword: state.AdministratorLoginPassword,
					// This value is not returned, so we'll just set whatever is in the state/config
					DnsZonePartnerId: state.DnsZonePartnerId,
				}

				if sku := existing.Model.Sku; sku != nil {
					model.SkuName = r.normalizeSku(sku.Name)
				}

				if props := existing.Model.Properties; props != nil {
					model.LicenseType = string(pointer.From(props.LicenseType))
					model.ProxyOverride = string(pointer.From(props.ProxyOverride))
					model.StorageAccountType = backupStorageRedundancyToStorageAccType(pointer.From(props.RequestedBackupStorageRedundancy))

					model.AdministratorLogin = pointer.From(props.AdministratorLogin)

					// read from state since when `azuread_authentication_only` is enabled via resource `azurerm_mssql_managed_instance_active_directory_administrator`,
					// the API returns the value of `AzureActiveDirectoryAdministrator` which causes diff.
					model.AzureActiveDirectoryAdministrator = state.AzureActiveDirectoryAdministrator

					model.Collation = pointer.From(props.Collation)
					model.DnsZone = pointer.From(props.DnsZone)
					model.Fqdn = pointer.From(props.FullyQualifiedDomainName)

					if props.MaintenanceConfigurationId != nil {
						maintenanceConfigId, err := publicmaintenanceconfigurations.ParsePublicMaintenanceConfigurationIDInsensitively(*props.MaintenanceConfigurationId)
						if err != nil {
							return err
						}
						model.MaintenanceConfigurationName = maintenanceConfigId.PublicMaintenanceConfigurationName
					}

					model.MinimumTlsVersion = pointer.From(props.MinimalTlsVersion)
					model.PublicDataEndpointEnabled = pointer.From(props.PublicDataEndpointEnabled)
					model.StorageSizeInGb = pointer.From(props.StorageSizeInGB)
					model.SubnetId = pointer.From(props.SubnetId)
					model.TimezoneId = pointer.From(props.TimezoneId)
					model.VCores = pointer.From(props.VCores)
					model.ZoneRedundantEnabled = pointer.From(props.ZoneRedundant)

					model.ServicePrincipalType = ""
					if props.ServicePrincipal != nil {
						model.ServicePrincipalType = string(pointer.From(props.ServicePrincipal.Type))
					}
					model.DatabaseFormat = string(pointer.From(props.DatabaseFormat))
					model.HybridSecondaryUsage = string(pointer.From(props.HybridSecondaryUsage))
				}
			}
			return metadata.Encode(&model)
		},
	}
}
