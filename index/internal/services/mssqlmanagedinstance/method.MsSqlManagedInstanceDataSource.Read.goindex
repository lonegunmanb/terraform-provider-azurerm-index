package github.com/hashicorp/terraform-provider-azurerm/internal/services/mssqlmanagedinstance
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-sdk/resource-manager/sql/2023-08-01-preview/managedinstances"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (d MsSqlManagedInstanceDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.MSSQLManagedInstance.ManagedInstancesClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var state MsSqlManagedInstanceDataSourceModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := commonids.NewSqlManagedInstanceID(subscriptionId, state.ResourceGroupName, state.Name)
			resp, err := client.Get(ctx, id, managedinstances.GetOperationOptions{})
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return fmt.Errorf("%s was not found", id)
				}
				return fmt.Errorf("retrieving %s: %v", id, err)
			}

			if resp.Model == nil {
				return fmt.Errorf("retrieving %s model was nil", id)
			}

			if resp.Model.Properties == nil {
				return fmt.Errorf("retrieving %s properties was nil", id)
			}

			model := MsSqlManagedInstanceDataSourceModel{
				Name:              id.ManagedInstanceName,
				Location:          resp.Model.Location,
				ResourceGroupName: id.ResourceGroupName,
				Identity:          d.flattenIdentity(resp.Model.Identity),
				Tags:              pointer.From(resp.Model.Tags),
			}

			if sku := resp.Model.Sku; sku != nil {
				model.SkuName = sku.Name
			}

			if props := resp.Model.Properties; props != nil {
				model.LicenseType = string(pointer.From(props.LicenseType))
				model.ProxyOverride = string(pointer.From(props.ProxyOverride))
				model.StorageAccountType = backupStorageRedundancyToStorageAccType(pointer.From(props.RequestedBackupStorageRedundancy))
				model.AdministratorLogin = pointer.From(props.AdministratorLogin)
				model.Collation = pointer.From(props.Collation)
				model.DnsZone = pointer.From(props.DnsZone)
				model.CustomerManagedKeyId = pointer.From(props.KeyId)
				model.Fqdn = pointer.From(props.FullyQualifiedDomainName)
				model.MinimumTlsVersion = pointer.From(props.MinimalTlsVersion)
				model.PublicDataEndpointEnabled = pointer.From(props.PublicDataEndpointEnabled)
				model.StorageSizeInGb = pointer.From(props.StorageSizeInGB)
				model.SubnetId = pointer.From(props.SubnetId)
				model.TimezoneId = pointer.From(props.TimezoneId)
				model.VCores = pointer.From(props.VCores)
			}

			metadata.SetID(id)
			return metadata.Encode(&model)
		},
	}
}
