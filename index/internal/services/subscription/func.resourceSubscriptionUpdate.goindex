package github.com/hashicorp/terraform-provider-azurerm/internal/services/subscription
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2022-12-01/subscriptions"
	tagsSdk "github.com/hashicorp/go-azure-sdk/resource-manager/resources/2023-07-01/tags"
	subscriptionAlias "github.com/hashicorp/go-azure-sdk/resource-manager/subscription/2021-10-01/subscriptions"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	billingValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/billing/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/subscription/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/subscription/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceSubscriptionUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	aliasClient := meta.(*clients.Client).Subscription.AliasClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := subscriptionAlias.ParseAliasID(d.Id())
	if err != nil {
		return err
	}

	locks.ByName(id.AliasName, SubscriptionResourceName)
	defer locks.UnlockByName(id.AliasName, SubscriptionResourceName)
	resp, err := aliasClient.AliasGet(ctx, *id)
	if err != nil || resp.Model == nil || resp.Model.Properties == nil || resp.Model.Properties.SubscriptionId == nil {
		return fmt.Errorf("could not read Subscription Alias for update: %+v", err)
	}

	subscriptionId := commonids.NewSubscriptionID(*resp.Model.Properties.SubscriptionId)

	if d.HasChange("subscription_name") {
		locks.ByID(subscriptionId.ID())
		defer locks.UnlockByID(subscriptionId.ID())

		displayName := subscriptionAlias.SubscriptionName{
			SubscriptionName: utils.String(d.Get("subscription_name").(string)),
		}
		if _, err := aliasClient.SubscriptionRename(ctx, subscriptionId, displayName); err != nil {
			return fmt.Errorf("could not update Display Name of Subscription %q: %+v", subscriptionId, err)
		}
	}

	if d.HasChange("tags") {
		tagsClient := meta.(*clients.Client).Resource.TagsClient
		t := tags.Expand(d.Get("tags").(map[string]interface{}))
		scope := commonids.NewScopeID(subscriptionId.ID())
		tagsResource := tagsSdk.TagsResource{
			Properties: tagsSdk.Tags{
				Tags: t,
			},
		}
		if _, err = tagsClient.CreateOrUpdateAtScope(ctx, scope, tagsResource); err != nil {
			return fmt.Errorf("setting tags on %s: %+v", *id, err)
		}
	}

	return nil
}
