package github.com/hashicorp/terraform-provider-azurerm/internal/services/dashboard
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dashboard/2023-09-01/grafanaresource"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dashboard/2023-09-01/managedprivateendpoints"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ManagedPrivateEndpointResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model ManagedPrivateEndpointModel
			if err := metadata.Decode(&model); err != nil {
				return err
			}

			client := metadata.Client.Dashboard.ManagedPrivateEndpointsClient
			subscriptionId := metadata.Client.Account.SubscriptionId
			grafanaId, err := grafanaresource.ParseGrafanaID(model.GrafanaId)
			if err != nil {
				return err
			}
			id := managedprivateendpoints.NewManagedPrivateEndpointID(subscriptionId, grafanaId.ResourceGroupName, grafanaId.GrafanaName, model.Name)

			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}
			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			props := managedprivateendpoints.ManagedPrivateEndpointModel{
				Location: location.Normalize(model.Location),
				Name:     &model.Name,
				Properties: &managedprivateendpoints.ManagedPrivateEndpointModelProperties{
					GroupIds:                  &model.GroupIds,
					PrivateLinkResourceId:     &model.PrivateLinkResourceId,
					PrivateLinkResourceRegion: &model.PrivateLinkResourceRegion,
					RequestMessage:            &model.RequestMessage,
					PrivateLinkServiceURL:     &model.PrivateLinkServiceURL,
				},
				Tags: &model.Tags,
			}

			if err := client.CreateThenPoll(ctx, id, props); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)

			return nil
		},
	}
}
