package github.com/hashicorp/terraform-provider-azurerm/internal/services/dashboard
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dashboard/2025-08-01/managedgrafanas"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenSMTPConfigurationModel(input *managedgrafanas.Smtp, data *schema.ResourceData) []SMTPConfigurationModel {
	var outputList []SMTPConfigurationModel
	if input == nil || !pointer.From(input.Enabled) {
		return outputList
	}

	var output SMTPConfigurationModel

	if input.Enabled != nil {
		output.SMTPEnabled = pointer.From(input.Enabled)
	}

	if input.FromAddress != nil {
		output.FromAddress = pointer.From(input.FromAddress)
	}

	if input.FromName != nil {
		output.FromName = pointer.From(input.FromName)
	}

	if input.Host != nil {
		output.Host = pointer.From(input.Host)
	}

	if input.SkipVerify != nil {
		output.SkipVerify = pointer.From(input.SkipVerify)
	}

	if input.User != nil {
		output.User = pointer.From(input.User)
	}

	if input.StartTLSPolicy != nil {
		output.StartTLSPolicy = string(pointer.From(input.StartTLSPolicy))
	}

	output.Password = data.Get("smtp.0.password").(string)

	return append(outputList, output)
}
