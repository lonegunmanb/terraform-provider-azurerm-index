package github.com/hashicorp/terraform-provider-azurerm/internal/services/dashboard
import (
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dashboard/2023-09-01/grafanaresource"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func dataSourceDashboardGrafanaRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Dashboard.GrafanaResourceClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := grafanaresource.NewGrafanaID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))
	resp, err := client.GrafanaGet(ctx, id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return fmt.Errorf("%s was not found", id)
		}
		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	d.SetId(id.ID())

	d.Set("name", id.GrafanaName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.Normalize(*model.Location))
		if properties := model.Properties; properties != nil {
			if properties.ApiKey != nil {
				if *properties.ApiKey == grafanaresource.ApiKeyEnabled {
					d.Set("api_key_enabled", true)
				} else {
					d.Set("api_key_enabled", false)
				}
			}

			if properties.AutoGeneratedDomainNameLabelScope != nil {
				d.Set("auto_generated_domain_name_label_scope", string(*properties.AutoGeneratedDomainNameLabelScope))
			}

			if properties.DeterministicOutboundIP != nil {
				if *properties.DeterministicOutboundIP == grafanaresource.DeterministicOutboundIPEnabled {
					d.Set("deterministic_outbound_ip_enabled", true)
				} else {
					d.Set("deterministic_outbound_ip_enabled", false)
				}
			}

			if properties.Endpoint != nil {
				d.Set("endpoint", properties.Endpoint)
			}

			if properties.GrafanaIntegrations != nil && properties.GrafanaIntegrations.AzureMonitorWorkspaceIntegrations != nil {
				d.Set("azure_monitor_workspace_integrations", flattenAzureMonitorWorkspaceIntegrations(*properties.GrafanaIntegrations.AzureMonitorWorkspaceIntegrations))
			}

			if properties.GrafanaVersion != nil {
				d.Set("grafana_version", properties.GrafanaVersion)
			}

			if properties.GrafanaMajorVersion != nil {
				d.Set("grafana_major_version", properties.GrafanaMajorVersion)
			}

			if properties.OutboundIPs != nil {
				d.Set("outbound_ips", properties.OutboundIPs)
			}

			if properties.PublicNetworkAccess != nil {
				if *properties.PublicNetworkAccess == grafanaresource.PublicNetworkAccessEnabled {
					d.Set("public_network_access_enabled", true)
				} else {
					d.Set("public_network_access_enabled", false)
				}
			}

			if properties.ZoneRedundancy != nil {
				if *properties.ZoneRedundancy == grafanaresource.ZoneRedundancyEnabled {
					d.Set("zone_redundancy_enabled", true)
				} else {
					d.Set("zone_redundancy_enabled", false)
				}
			}
		}

		if model.Sku != nil {
			d.Set("sku", model.Sku.Name)
		}

		flattenedIdentity, err := identity.FlattenSystemAndUserAssignedMap((*identity.SystemAndUserAssignedMap)(model.Identity))
		if err != nil {
			return fmt.Errorf("flattening `identity`: %+v", err)
		}

		if err := d.Set("identity", flattenedIdentity); err != nil {
			return fmt.Errorf("setting `identity`: %+v", err)
		}

		if err := tags.FlattenAndSet(d, model.Tags); err != nil {
			return err
		}
	}

	return nil
}
