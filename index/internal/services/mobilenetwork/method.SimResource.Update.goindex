package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/attacheddatanetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/sim"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/simgroup"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/simpolicy"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/slice"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r SimResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 90 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.MobileNetwork.SIMClient

			id, err := sim.ParseSimID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model SimResourceModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			if resp.Model == nil {
				return fmt.Errorf("retrieving %s: Model was nil", id)
			}
			properties := *resp.Model

			if metadata.ResourceData.HasChange("device_type") {
				if model.DeviceType != "" {
					properties.Properties.DeviceType = &model.DeviceType
				} else {
					properties.Properties.DeviceType = nil
				}
			}

			if metadata.ResourceData.HasChange("integrated_circuit_card_identifier") {
				if model.IntegratedCircuitCardIdentifier != "" {
					properties.Properties.IntegratedCircuitCardIdentifier = &model.IntegratedCircuitCardIdentifier
				} else {
					properties.Properties.IntegratedCircuitCardIdentifier = nil
				}
			}

			if metadata.ResourceData.HasChange("sim_policy_id") {
				properties.Properties.SimPolicy = &sim.SimPolicyResourceId{
					Id: model.SimPolicyId,
				}
			}

			if metadata.ResourceData.HasChange("static_ip_configuration") {
				properties.Properties.StaticIPConfiguration = expandSimStaticIPPropertiesModel(model.StaticIPConfiguration)
			}

			// since authentication_key and operator_key_code are not returned by API, so expand them every time.
			if model.AuthenticationKey != "" {
				properties.Properties.AuthenticationKey = &model.AuthenticationKey
			}

			if model.OperatorKeyCode != "" {
				properties.Properties.OperatorKeyCode = &model.OperatorKeyCode
			}

			if err := client.CreateOrUpdateThenPoll(ctx, *id, properties); err != nil {
				return fmt.Errorf("updating %s: %+v", *id, err)
			}

			return nil
		},
	}
}
