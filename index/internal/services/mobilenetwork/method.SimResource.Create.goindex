package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/attacheddatanetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/sim"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/simgroup"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/simpolicy"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/slice"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r SimResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 90 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model SimResourceModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.MobileNetwork.SIMClient
			simGroupId, err := simgroup.ParseSimGroupID(model.MobileNetworkSimGroupId)
			if err != nil {
				return err
			}

			id := sim.NewSimID(simGroupId.SubscriptionId, simGroupId.ResourceGroupName, simGroupId.SimGroupName, model.Name)
			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			simInput := &sim.Sim{
				Properties: sim.SimPropertiesFormat{
					InternationalMobileSubscriberIdentity: model.InternationalMobileSubscriberIdentity,
				},
			}

			if model.SimPolicyId != "" {
				simInput.Properties.SimPolicy = &sim.SimPolicyResourceId{
					Id: model.SimPolicyId,
				}
			}

			if model.AuthenticationKey != "" {
				simInput.Properties.AuthenticationKey = &model.AuthenticationKey
			}

			if model.DeviceType != "" {
				simInput.Properties.DeviceType = &model.DeviceType
			}

			if model.IntegratedCircuitCardIdentifier != "" {
				simInput.Properties.IntegratedCircuitCardIdentifier = &model.IntegratedCircuitCardIdentifier
			}

			if model.OperatorKeyCode != "" {
				simInput.Properties.OperatorKeyCode = &model.OperatorKeyCode
			}

			simInput.Properties.StaticIPConfiguration = expandSimStaticIPPropertiesModel(model.StaticIPConfiguration)

			if err := client.CreateOrUpdateThenPoll(ctx, id, *simInput); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)

			return nil
		},
	}
}
