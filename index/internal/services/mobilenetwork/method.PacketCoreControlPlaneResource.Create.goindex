package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/databoxedge/2022-03-01/devices"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/packetcorecontrolplane"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/site"
	"github.com/hashicorp/go-azure-sdk/resource-manager/vmware/2022-05-01/clusters"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r PacketCoreControlPlaneResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 180 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model PacketCoreControlPlaneModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.MobileNetwork.PacketCoreControlPlaneClient
			subscriptionId := metadata.Client.Account.SubscriptionId
			id := packetcorecontrolplane.NewPacketCoreControlPlaneID(subscriptionId, model.ResourceGroupName, model.Name)
			existing, err := client.Get(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			identityValue, err := expandMobileNetworkLegacyToUserAssignedIdentity(model.Identity)
			if err != nil {
				return fmt.Errorf("expanding `identity`: %+v", err)
			}

			controlPlane := packetcorecontrolplane.PacketCoreControlPlane{
				Name:     &model.Name,
				Identity: identityValue,
				Location: location.Normalize(model.Location),
				Tags:     &model.Tags,
			}

			props := packetcorecontrolplane.PacketCoreControlPlanePropertiesFormat{
				Sku:   packetcorecontrolplane.BillingSku(model.Sku),
				Sites: expandPacketCoreControlPlaneSites(model.SiteIds),
				UeMtu: &model.UeMtu,
			}

			if model.CoreNetworkTechnology != "" {
				props.CoreNetworkTechnology = pointer.To(packetcorecontrolplane.CoreNetworkType(model.CoreNetworkTechnology))
			}

			props.ControlPlaneAccessInterface = packetcorecontrolplane.InterfaceProperties{}

			if model.ControlPlaneAccessName != "" {
				props.ControlPlaneAccessInterface.Name = &model.ControlPlaneAccessName
			}

			if model.ControlPlaneAccessIPv4Address != "" {
				props.ControlPlaneAccessInterface.IPv4Address = &model.ControlPlaneAccessIPv4Address
			}

			if model.ControlPlaneAccessIPv4Subnet != "" {
				props.ControlPlaneAccessInterface.IPv4Subnet = &model.ControlPlaneAccessIPv4Subnet
			}

			if model.ControlPlaneAccessIPv4Gateway != "" {
				props.ControlPlaneAccessInterface.IPv4Gateway = &model.ControlPlaneAccessIPv4Gateway
			}

			if model.InteropSettings != "" {
				var interopSettingsValue interface{}
				err = json.Unmarshal([]byte(model.InteropSettings), &interopSettingsValue)
				if err != nil {
					return err
				}
				props.InteropSettings = &interopSettingsValue
			}

			props.LocalDiagnosticsAccess = expandPacketCoreControlLocalDiagnosticsAccessConfiguration(model.LocalDiagnosticsAccess)

			props.Platform = expandPlatformConfigurationModel(model.Platform)

			if model.SoftwareVersion != "" {
				props.Version = &model.SoftwareVersion
			}

			controlPlane.Properties = props

			if err := client.CreateOrUpdateThenPoll(ctx, id, controlPlane); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
