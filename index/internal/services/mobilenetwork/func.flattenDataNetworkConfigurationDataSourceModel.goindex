package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/mobilenetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/simpolicy"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenDataNetworkConfigurationDataSourceModel(inputList []simpolicy.DataNetworkConfiguration) []DataNetworkConfigurationDataSourceModel {
	output := make([]DataNetworkConfigurationDataSourceModel, 0)

	for _, input := range inputList {
		item := DataNetworkConfigurationDataSourceModel{
			DataNetworkId: input.DataNetwork.Id,
		}

		item.AdditionalAllowedSessionTypes = flattenSimPolicyAllowedSessionTypeDataSource(input.AdditionalAllowedSessionTypes)

		if input.AllocationAndRetentionPriorityLevel != nil {
			item.AllocationAndRetentionPriorityLevel = *input.AllocationAndRetentionPriorityLevel
		}

		item.AllowedServices = flattenServiceResourceIdDataSourceModel(input.AllowedServices)

		if input.DefaultSessionType != nil {
			item.DefaultSessionType = string(*input.DefaultSessionType)
		}

		if input.Fiveqi != nil {
			item.QosIdentifier = *input.Fiveqi
		}

		if input.MaximumNumberOfBufferedPackets != nil {
			item.MaximumNumberOfBufferedPackets = *input.MaximumNumberOfBufferedPackets
		}

		if input.PreemptionCapability != nil {
			item.PreemptionCapability = string(*input.PreemptionCapability)
		}

		if input.PreemptionVulnerability != nil {
			item.PreemptionVulnerability = string(*input.PreemptionVulnerability)
		}

		item.SessionAmbr = flattenSimPolicyAmbrDataSourceModel(input.SessionAmbr)

		output = append(output, item)
	}

	return output
}
