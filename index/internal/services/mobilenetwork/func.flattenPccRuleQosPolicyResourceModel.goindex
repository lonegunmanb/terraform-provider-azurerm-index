package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/mobilenetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/service"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenPccRuleQosPolicyResourceModel(input *service.PccRuleQosPolicy) []ServiceResourcePccRuleQosPolicyModel {
	if input == nil {
		return []ServiceResourcePccRuleQosPolicyModel{}
	}

	output := ServiceResourcePccRuleQosPolicyModel{}

	if input.AllocationAndRetentionPriorityLevel != nil {
		output.AllocationAndRetentionPriorityLevel = *input.AllocationAndRetentionPriorityLevel
	}

	if input.Fiveqi != nil {
		output.QosIdentifier = *input.Fiveqi
	}

	output.GuaranteedBitRate = flattenBitRateResourceModel(input.GuaranteedBitRate)

	output.MaximumBitRate = flattenBitRateResourceModel(&input.MaximumBitRate)

	if input.PreemptionCapability != nil {
		output.PreemptionCapability = string(*input.PreemptionCapability)
	}

	if input.PreemptionVulnerability != nil {
		output.PreemptionVulnerability = string(*input.PreemptionVulnerability)
	}

	return []ServiceResourcePccRuleQosPolicyModel{
		output,
	}
}
