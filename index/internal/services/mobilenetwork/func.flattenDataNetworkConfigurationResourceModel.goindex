package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/datanetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/mobilenetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/service"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/simpolicy"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/slice"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenDataNetworkConfigurationResourceModel(input []simpolicy.DataNetworkConfiguration) []DataNetworkConfigurationResourceModel {
	output := make([]DataNetworkConfigurationResourceModel, 0)

	for _, v := range input {
		item := DataNetworkConfigurationResourceModel{
			DataNetworkId: v.DataNetwork.Id,
		}

		item.AdditionalAllowedSessionTypes = flattenSimPolicyAllowedSessionTypeResource(v.AdditionalAllowedSessionTypes)

		if v.AllocationAndRetentionPriorityLevel != nil {
			item.AllocationAndRetentionPriorityLevel = *v.AllocationAndRetentionPriorityLevel
		}

		item.AllowedServices = flattenServiceResourceIdResourceModel(v.AllowedServices)

		if v.DefaultSessionType != nil {
			item.DefaultSessionType = string(*v.DefaultSessionType)
		}

		if v.Fiveqi != nil {
			item.QosIdentifier = *v.Fiveqi
		}

		if v.MaximumNumberOfBufferedPackets != nil {
			item.MaximumNumberOfBufferedPackets = *v.MaximumNumberOfBufferedPackets
		}

		if v.PreemptionCapability != nil {
			item.PreemptionCapability = string(*v.PreemptionCapability)
		}

		if v.PreemptionVulnerability != nil {
			item.PreemptionVulnerability = string(*v.PreemptionVulnerability)
		}

		item.SessionAmbr = flattenSimPolicyAmbrResourceModel(v.SessionAmbr)

		output = append(output, item)
	}

	return output
}
