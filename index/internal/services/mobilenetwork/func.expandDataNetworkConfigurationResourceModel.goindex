package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/datanetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/mobilenetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/service"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/simpolicy"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/slice"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandDataNetworkConfigurationResourceModel(inputList []DataNetworkConfigurationResourceModel) []simpolicy.DataNetworkConfiguration {
	outputList := make([]simpolicy.DataNetworkConfiguration, 0, len(inputList))
	for _, v := range inputList {
		input := v

		defaultSessionType := simpolicy.PduSessionType(input.DefaultSessionType)
		preemptionCapability := simpolicy.PreemptionCapability(input.PreemptionCapability)
		preemptionVulnerability := simpolicy.PreemptionVulnerability(input.PreemptionVulnerability)
		output := simpolicy.DataNetworkConfiguration{
			AdditionalAllowedSessionTypes:       expandSimPolicyAdditionalAllowedSessionTypeResource(input.AdditionalAllowedSessionTypes),
			AllocationAndRetentionPriorityLevel: &input.AllocationAndRetentionPriorityLevel,
			DefaultSessionType:                  &defaultSessionType,
			Fiveqi:                              &input.QosIdentifier,
			PreemptionCapability:                &preemptionCapability,
			PreemptionVulnerability:             &preemptionVulnerability,
			MaximumNumberOfBufferedPackets:      &input.MaximumNumberOfBufferedPackets,
			AllowedServices:                     expandServiceResourceIdResourceModel(input.AllowedServices),
		}

		if input.DataNetworkId != "" {
			output.DataNetwork = simpolicy.DataNetworkResourceId{
				Id: input.DataNetworkId,
			}
		}

		output.SessionAmbr = expandAmbrResourceModel(input.SessionAmbr)

		outputList = append(outputList, output)
	}

	return outputList
}
