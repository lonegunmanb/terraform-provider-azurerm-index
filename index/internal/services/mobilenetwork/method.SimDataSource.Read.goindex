package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/sim"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/simgroup"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r SimDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var metaModel SimResourceModel
			if err := metadata.Decode(&metaModel); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			client := metadata.Client.MobileNetwork.SIMClient
			simGroupId, err := simgroup.ParseSimGroupID(metaModel.MobileNetworkSimGroupId)
			if err != nil {
				return err
			}

			id := sim.NewSimID(simGroupId.SubscriptionId, simGroupId.ResourceGroupName, simGroupId.SimGroupName, metaModel.Name)

			resp, err := client.Get(ctx, id)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			state := SimDataSourceModel{
				Name:                    id.SimName,
				MobileNetworkSimGroupId: simgroup.NewSimGroupID(id.SubscriptionId, id.ResourceGroupName, id.SimGroupName).ID(),
			}

			if model := resp.Model; model != nil {
				prop := model.Properties

				state.DeviceType = pointer.From(prop.DeviceType)
				state.IntegratedCircuitCardIdentifier = pointer.From(prop.IntegratedCircuitCardIdentifier)
				state.SimState = string(pointer.From(prop.SimState))
				state.InternationalMobileSubscriberIdentity = prop.InternationalMobileSubscriberIdentity
				state.VendorKeyFingerprint = pointer.From(prop.VendorKeyFingerprint)
				state.VendorName = pointer.From(prop.VendorName)
				if simPolicy := prop.SimPolicy; prop.SimPolicy != nil {
					state.SimPolicyId = simPolicy.Id
				}

				state.StaticIPConfiguration = flattenSimStaticIPPropertiesDataSource(prop.StaticIPConfiguration)
			}

			metadata.SetID(id)

			return metadata.Encode(&state)
		},
	}
}
