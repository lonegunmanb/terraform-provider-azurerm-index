package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/databoxedge/2022-03-01/devices"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/packetcorecontrolplane"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/site"
	"github.com/hashicorp/go-azure-sdk/resource-manager/vmware/2022-05-01/clusters"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r PacketCoreControlPlaneResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.MobileNetwork.PacketCoreControlPlaneClient

			id, err := packetcorecontrolplane.ParsePacketCoreControlPlaneID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var plan PacketCoreControlPlaneModel
			if err := metadata.Decode(&plan); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			if resp.Model == nil {
				return fmt.Errorf("retrieving %s: Model was nil", id)
			}
			model := *resp.Model

			if metadata.ResourceData.HasChange("identity") {
				identityValue, err := expandMobileNetworkLegacyToUserAssignedIdentity(plan.Identity)
				if err != nil {
					return fmt.Errorf("expanding `identity`: %+v", err)
				}
				model.Identity = identityValue
			}

			if metadata.ResourceData.HasChange("control_plane_access_name") {
				model.Properties.ControlPlaneAccessInterface.Name = &plan.ControlPlaneAccessName
			}

			if metadata.ResourceData.HasChange("control_plane_access_ipv4_address") {
				model.Properties.ControlPlaneAccessInterface.IPv4Address = &plan.ControlPlaneAccessIPv4Address
			}

			if metadata.ResourceData.HasChange("control_plane_access_ipv4_subnet") {
				model.Properties.ControlPlaneAccessInterface.IPv4Subnet = &plan.ControlPlaneAccessIPv4Subnet
			}

			if metadata.ResourceData.HasChange("control_plane_access_ipv4_gateway") {
				model.Properties.ControlPlaneAccessInterface.IPv4Gateway = &plan.ControlPlaneAccessIPv4Gateway
			}

			if metadata.ResourceData.HasChange("core_network_technology") {
				model.Properties.CoreNetworkTechnology = pointer.To(packetcorecontrolplane.CoreNetworkType(plan.CoreNetworkTechnology))
			}

			if metadata.ResourceData.HasChange("interoperability_settings_json") {
				var interopSettingsValue interface{}
				err := json.Unmarshal([]byte(plan.InteropSettings), &interopSettingsValue)
				if err != nil {
					return err
				}

				model.Properties.InteropSettings = &interopSettingsValue
			}

			if metadata.ResourceData.HasChange("local_diagnostics_access") {
				model.Properties.LocalDiagnosticsAccess = expandPacketCoreControlLocalDiagnosticsAccessConfiguration(plan.LocalDiagnosticsAccess)
			}

			if metadata.ResourceData.HasChange("platform") {
				model.Properties.Platform = expandPlatformConfigurationModel(plan.Platform)
			}

			if metadata.ResourceData.HasChange("sku") {
				model.Properties.Sku = packetcorecontrolplane.BillingSku(plan.Sku)
			}

			if metadata.ResourceData.HasChange("version") && plan.SoftwareVersion != "" {
				model.Properties.Version = &plan.SoftwareVersion
			}

			if metadata.ResourceData.HasChange("tags") {
				model.Tags = &plan.Tags
			}

			if err := client.CreateOrUpdateThenPoll(ctx, *id, model); err != nil {
				return fmt.Errorf("updating %s: %+v", *id, err)
			}

			return nil
		},
	}
}
