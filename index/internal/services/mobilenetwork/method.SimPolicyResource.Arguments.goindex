package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/datanetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/mobilenetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/service"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/simpolicy"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/slice"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r SimPolicyResource) Arguments() map[string]*pluginsdk.Schema {
	return map[string]*pluginsdk.Schema{
		"name": {
			Type:         pluginsdk.TypeString,
			Required:     true,
			ForceNew:     true,
			ValidateFunc: validation.StringIsNotEmpty,
		},

		"mobile_network_id": {
			Type:         pluginsdk.TypeString,
			Required:     true,
			ForceNew:     true,
			ValidateFunc: mobilenetwork.ValidateMobileNetworkID,
		},

		"default_slice_id": {
			Type:         pluginsdk.TypeString,
			Required:     true,
			ValidateFunc: slice.ValidateSliceID,
		},

		"location": commonschema.Location(),

		"registration_timer_in_seconds": {
			Type:         pluginsdk.TypeInt,
			Optional:     true,
			Default:      3240,
			ValidateFunc: validation.IntAtLeast(30),
		},

		"rat_frequency_selection_priority_index": {
			Type:         pluginsdk.TypeInt,
			Optional:     true,
			ValidateFunc: validation.IntBetween(1, 256),
		},

		"slice": {
			Type:     pluginsdk.TypeList,
			Required: true,
			MinItems: 1,
			Elem: &pluginsdk.Resource{
				Schema: map[string]*pluginsdk.Schema{
					"data_network": {
						Type:     pluginsdk.TypeList,
						Required: true,
						Elem: &pluginsdk.Resource{
							Schema: map[string]*pluginsdk.Schema{
								"additional_allowed_session_types": {
									Type:     pluginsdk.TypeList,
									Optional: true,
									Elem: &pluginsdk.Schema{
										Type: pluginsdk.TypeString,
										ValidateFunc: validation.StringInSlice([]string{
											string(simpolicy.PduSessionTypeIPvFour),
											string(simpolicy.PduSessionTypeIPvSix),
										}, false),
									},
								},

								"allocation_and_retention_priority_level": {
									Type:         pluginsdk.TypeInt,
									Optional:     true,
									Default:      0,
									ValidateFunc: validation.IntAtLeast(0),
								},

								"allowed_services_ids": {
									Type:     pluginsdk.TypeList,
									Required: true,
									Elem: &pluginsdk.Schema{
										Type:         pluginsdk.TypeString,
										ValidateFunc: service.ValidateServiceID,
									},
								},

								"data_network_id": {
									Type:         pluginsdk.TypeString,
									Required:     true,
									ValidateFunc: datanetwork.ValidateDataNetworkID,
								},

								"default_session_type": {
									Type:     pluginsdk.TypeString,
									Optional: true,
									Default:  simpolicy.PduSessionTypeIPvFour,
									ValidateFunc: validation.StringInSlice([]string{
										string(simpolicy.PduSessionTypeIPvFour),
										string(simpolicy.PduSessionTypeIPvSix),
									}, false),
								},

								"qos_indicator": {
									Type:         pluginsdk.TypeInt,
									Required:     true,
									ValidateFunc: validation.IntBetween(1, 127),
								},
								"max_buffered_packets": {
									Type:         pluginsdk.TypeInt,
									Optional:     true,
									Default:      10,
									ValidateFunc: validation.IntAtLeast(0),
								},

								"preemption_capability": {
									Type:     pluginsdk.TypeString,
									Optional: true,
									Default:  simpolicy.PreemptionCapabilityNotPreempt,
									ValidateFunc: validation.StringInSlice([]string{
										string(simpolicy.PreemptionCapabilityNotPreempt),
										string(simpolicy.PreemptionCapabilityMayPreempt),
									}, false),
								},

								"preemption_vulnerability": {
									Type:     pluginsdk.TypeString,
									Optional: true,
									Default:  simpolicy.PreemptionVulnerabilityNotPreemptable,
									ValidateFunc: validation.StringInSlice([]string{
										string(simpolicy.PreemptionVulnerabilityNotPreemptable),
										string(simpolicy.PreemptionVulnerabilityPreemptable),
									}, false),
								},

								"session_aggregate_maximum_bit_rate": {
									Type:     pluginsdk.TypeList,
									Required: true,
									MaxItems: 1,
									Elem: &pluginsdk.Resource{
										Schema: map[string]*pluginsdk.Schema{
											"downlink": {
												Type:     pluginsdk.TypeString,
												Required: true,
												ValidateFunc: validation.StringMatch(
													regexp.MustCompile(`^([1-9]\d*|0)(\.\d+)?\s(Kbps|Mbps|Gbps|Tbps)$`),
													"The value must be a number followed by Kbps, Mbps, Gbps or Tbps.",
												),
											},

											"uplink": {
												Type:     pluginsdk.TypeString,
												Required: true,
												ValidateFunc: validation.StringMatch(
													regexp.MustCompile(`^([1-9]\d*|0)(\.\d+)?\s(Kbps|Mbps|Gbps|Tbps)$`),
													"The value must be a number followed by Kbps, Mbps, Gbps or Tbps.",
												),
											},
										},
									},
								},
							},
						},
					},

					"default_data_network_id": {
						Type:         pluginsdk.TypeString,
						Required:     true,
						ValidateFunc: datanetwork.ValidateDataNetworkID,
					},

					"slice_id": {
						Type:         pluginsdk.TypeString,
						Required:     true,
						ValidateFunc: slice.ValidateSliceID,
					},
				},
			},
		},

		"user_equipment_aggregate_maximum_bit_rate": {
			Type:     pluginsdk.TypeList,
			Required: true,
			MaxItems: 1,
			Elem: &pluginsdk.Resource{
				Schema: map[string]*pluginsdk.Schema{
					"downlink": {
						Type:     pluginsdk.TypeString,
						Required: true,
						ValidateFunc: validation.StringMatch(
							regexp.MustCompile(`^([1-9]\d*|0)(\.\d+)?\s(Kbps|Mbps|Gbps|Tbps)$`),
							"The value must be a number followed by Kbps, Mbps, Gbps or Tbps.",
						),
					},

					"uplink": {
						Type:     pluginsdk.TypeString,
						Required: true,
						ValidateFunc: validation.StringMatch(
							regexp.MustCompile(`^([1-9]\d*|0)(\.\d+)?\s(Kbps|Mbps|Gbps|Tbps)$`),
							"The value must be a number followed by Kbps, Mbps, Gbps or Tbps.",
						),
					},
				},
			},
		},

		"tags": commonschema.Tags(),
	}
}
