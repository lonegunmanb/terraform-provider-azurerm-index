package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/attacheddatanetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/packetcoredataplane"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r AttachedDataNetworkResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 180 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.MobileNetwork.AttachedDataNetworkClient

			id, err := attacheddatanetwork.ParseAttachedDataNetworkID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var plan AttachedDataNetworkModel
			if err := metadata.Decode(&plan); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", *id, err)
			}

			if resp.Model == nil {
				return fmt.Errorf("retrieving %s: Model was nil", id)
			}

			attachedDataNetwork := *resp.Model

			if metadata.ResourceData.HasChange("dns_addresses") {
				attachedDataNetwork.Properties.DnsAddresses = plan.DnsAddresses
			}

			if metadata.ResourceData.HasChange("network_address_port_translation") {
				attachedDataNetwork.Properties.NaptConfiguration = expandNaptConfiguration(plan.NaptConfiguration)
			}

			if metadata.ResourceData.HasChange("user_equipment_address_pool_prefixes") {
				// if we pass an empty array the service will return an error
				// Array is too short (0), minimum 1.
				if len(plan.UserEquipmentAddressPoolPrefix) > 0 {
					attachedDataNetwork.Properties.UserEquipmentAddressPoolPrefix = &plan.UserEquipmentAddressPoolPrefix
				} else {
					attachedDataNetwork.Properties.UserEquipmentAddressPoolPrefix = nil
				}
			}

			if metadata.ResourceData.HasChange("user_equipment_static_address_pool_prefixes") {
				if len(plan.UserEquipmentStaticAddressPoolPrefix) > 0 {
					attachedDataNetwork.Properties.UserEquipmentStaticAddressPoolPrefix = &plan.UserEquipmentStaticAddressPoolPrefix
				} else {
					attachedDataNetwork.Properties.UserEquipmentStaticAddressPoolPrefix = nil
				}
			}

			if metadata.ResourceData.HasChange("user_plane_access_name") {
				if plan.UserPlaneAccessName != "" {
					attachedDataNetwork.Properties.UserPlaneDataInterface.Name = &plan.UserPlaneAccessName
				} else {
					attachedDataNetwork.Properties.UserPlaneDataInterface.Name = nil
				}
			}

			if metadata.ResourceData.HasChange("user_plane_access_ipv4_address") {
				if plan.UserPlaneAccessIPv4Address != "" {
					attachedDataNetwork.Properties.UserPlaneDataInterface.IPv4Address = &plan.UserPlaneAccessIPv4Address
				} else {
					attachedDataNetwork.Properties.UserPlaneDataInterface.IPv4Address = nil
				}
			}

			if metadata.ResourceData.HasChange("user_plane_access_ipv4_subnet") {
				if plan.UserPlaneAccessIPv4Subnet != "" {
					attachedDataNetwork.Properties.UserPlaneDataInterface.IPv4Subnet = &plan.UserPlaneAccessIPv4Subnet
				} else {
					attachedDataNetwork.Properties.UserPlaneDataInterface.IPv4Subnet = nil
				}
			}

			if metadata.ResourceData.HasChange("user_plane_access_ipv4_gateway") {
				if plan.UserPlaneAccessIPv4Gateway != "" {
					attachedDataNetwork.Properties.UserPlaneDataInterface.IPv4Gateway = &plan.UserPlaneAccessIPv4Gateway
				} else {
					attachedDataNetwork.Properties.UserPlaneDataInterface.IPv4Gateway = nil
				}
			}

			if metadata.ResourceData.HasChange("tags") {
				// pass empty array instead of nil to remove all tags
				attachedDataNetwork.Tags = tags.Expand(plan.Tags)
			}

			if err := client.CreateOrUpdateThenPoll(ctx, *id, attachedDataNetwork); err != nil {
				return fmt.Errorf("updating %s: %+v", *id, err)
			}

			return nil
		},
	}
}
