package github.com/hashicorp/terraform-provider-azurerm/internal/services/mobilenetwork
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/attacheddatanetwork"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mobilenetwork/2022-11-01/packetcoredataplane"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenDataSourceNaptConfiguration(input *attacheddatanetwork.NaptConfiguration) []NaptConfigurationDataSourceModel {
	if input == nil {
		return []NaptConfigurationDataSourceModel{}
	}
	output := NaptConfigurationDataSourceModel{}

	output.PinholeLimits = pointer.From(input.PinholeLimits)

	if input.PinholeTimeouts != nil {
		output.IcmpPinholeTimeout = pointer.From(input.PinholeTimeouts.Icmp)
		output.TcpPinholeTimeout = pointer.From(input.PinholeTimeouts.Tcp)
		output.UdpPinholeTimeout = pointer.From(input.PinholeTimeouts.Udp)
	}

	output.PortRange = flattenDataSourcePortRange(input.PortRange)

	if input.PortReuseHoldTime != nil {
		output.TcpReuseMinimumHoldTime = pointer.From(input.PortReuseHoldTime.Tcp)
		output.UdpReuseMinimumHoldTime = pointer.From(input.PortReuseHoldTime.Udp)
	}

	return []NaptConfigurationDataSourceModel{output}
}
