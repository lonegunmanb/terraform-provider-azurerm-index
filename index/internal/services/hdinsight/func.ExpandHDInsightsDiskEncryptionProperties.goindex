package github.com/hashicorp/terraform-provider-azurerm/internal/services/hdinsight
import (
	"fmt"
	"net/url"
	"regexp"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-sdk/resource-manager/hdinsight/2021-06-01/clusters"
	"github.com/hashicorp/go-azure-sdk/resource-manager/hdinsight/2021-06-01/extensions"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/hdinsight/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVault "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func ExpandHDInsightsDiskEncryptionProperties(input []interface{}) (*clusters.DiskEncryptionProperties, error) {
	v := input[0].(map[string]interface{})

	encryptionAlgorithm := v["encryption_algorithm"].(string)
	encryptionAtHost := v["encryption_at_host_enabled"].(bool)
	keyVaultManagedIdentityId := v["key_vault_managed_identity_id"].(string)

	diskEncryptionProps := &clusters.DiskEncryptionProperties{
		EncryptionAlgorithm: pointer.To(clusters.JsonWebKeyEncryptionAlgorithm(encryptionAlgorithm)),
		EncryptionAtHost:    &encryptionAtHost,
		MsiResourceId:       &keyVaultManagedIdentityId,
	}

	if id, ok := v["key_vault_key_id"]; ok && id.(string) != "" {
		keyVaultKeyId, err := parse.ParseNestedItemID(id.(string))
		if err != nil {
			return nil, err
		}
		diskEncryptionProps.KeyName = &keyVaultKeyId.Name
		diskEncryptionProps.KeyVersion = &keyVaultKeyId.Version
		diskEncryptionProps.VaultUri = &keyVaultKeyId.KeyVaultBaseUrl
	}

	return diskEncryptionProps, nil
}
