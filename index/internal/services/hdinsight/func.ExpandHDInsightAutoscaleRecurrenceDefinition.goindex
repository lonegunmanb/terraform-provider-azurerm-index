package github.com/hashicorp/terraform-provider-azurerm/internal/services/hdinsight
import (
	"fmt"
	"net/url"
	"regexp"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-sdk/resource-manager/hdinsight/2021-06-01/clusters"
	"github.com/hashicorp/go-azure-sdk/resource-manager/hdinsight/2021-06-01/extensions"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/hdinsight/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVault "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func ExpandHDInsightAutoscaleRecurrenceDefinition(input []interface{}) *clusters.AutoscaleRecurrence {
	if len(input) == 0 || input[0] == nil {
		return nil
	}

	vs := input[0].(map[string]interface{})

	schedules := make([]clusters.AutoscaleSchedule, 0)

	for _, v := range vs["schedule"].([]interface{}) {
		val := v.(map[string]interface{})

		weekDays := val["days"].([]interface{})
		expandedWeekDays := make([]clusters.DaysOfWeek, len(weekDays))
		for i := range weekDays {
			expandedWeekDays[i] = clusters.DaysOfWeek(weekDays[i].(string))
		}

		schedules = append(schedules, clusters.AutoscaleSchedule{
			Days: &expandedWeekDays,
			TimeAndCapacity: &clusters.AutoscaleTimeAndCapacity{
				Time: utils.String(val["time"].(string)),
				// SDK supports min and max, but server side always overrides max to be equal to min
				MinInstanceCount: pointer.To(int64(val["target_instance_count"].(int))),
				MaxInstanceCount: pointer.To(int64(val["target_instance_count"].(int))),
			},
		})
	}

	result := &clusters.AutoscaleRecurrence{
		TimeZone: utils.String(vs["timezone"].(string)),
		Schedule: &schedules,
	}

	return result
}
