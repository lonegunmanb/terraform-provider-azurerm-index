package github.com/hashicorp/terraform-provider-azurerm/internal/services/hdinsight
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/hdinsight/2021-06-01/applications"
	"github.com/hashicorp/go-azure-sdk/resource-manager/hdinsight/2021-06-01/clusters"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/hdinsight/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/hdinsight/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandHDInsightApplicationEdgeNodeHttpsEndpoints(input []interface{}) *[]applications.ApplicationGetHTTPSEndpoint {
	endpoints := make([]applications.ApplicationGetHTTPSEndpoint, 0)
	if len(input) == 0 || input[0] == nil {
		return &endpoints
	}

	for _, v := range input {
		val := v.(map[string]interface{})

		accessModes := val["access_modes"].([]string)
		destinationPort := val["destination_port"].(int64)
		disableGatewayAuth := val["disable_gateway_auth"].(bool)
		privateIpAddress := val["private_ip_address"].(string)
		subDomainSuffix := val["sub_domain_suffix"].(string)

		endPoint := applications.ApplicationGetHTTPSEndpoint{
			AccessModes:        &accessModes,
			DestinationPort:    pointer.To(destinationPort),
			PrivateIPAddress:   utils.String(privateIpAddress),
			SubDomainSuffix:    utils.String(subDomainSuffix),
			DisableGatewayAuth: utils.Bool(disableGatewayAuth),
		}

		endpoints = append(endpoints, endPoint)
	}

	return &endpoints
}
