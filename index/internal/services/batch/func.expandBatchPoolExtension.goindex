package github.com/hashicorp/terraform-provider-azurerm/internal/services/batch
import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/batch/2024-07-01/pool"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandBatchPoolExtension(ref map[string]interface{}) (*pool.VmExtension, error) {
	if len(ref) == 0 {
		return nil, nil
	}

	result := pool.VmExtension{
		Name:      ref["name"].(string),
		Publisher: ref["publisher"].(string),
		Type:      ref["type"].(string),
	}

	if autoUpgradeMinorVersion, ok := ref["auto_upgrade_minor_version"]; ok {
		result.AutoUpgradeMinorVersion = utils.Bool(autoUpgradeMinorVersion.(bool))
	}

	if autoUpgradeEnabled, ok := ref["automatic_upgrade_enabled"]; ok {
		result.EnableAutomaticUpgrade = utils.Bool(autoUpgradeEnabled.(bool))
	}

	if typeHandlerVersion, ok := ref["type_handler_version"]; ok {
		result.TypeHandlerVersion = utils.String(typeHandlerVersion.(string))
	}

	if settings, ok := ref["settings_json"]; ok {
		err := json.Unmarshal([]byte(settings.(string)), &result.Settings)
		if err != nil {
			return nil, fmt.Errorf("unmarshaling `settings_json`: %+v", err)
		}
	}

	if protectedSettings, ok := ref["protected_settings"]; ok {
		err := json.Unmarshal([]byte(protectedSettings.(string)), &result.ProtectedSettings)
		if err != nil {
			return nil, fmt.Errorf("unmarshaling `protected_settings`: %+v", err)
		}
	}

	if tmpItem, ok := ref["provision_after_extensions"]; ok {
		result.ProvisionAfterExtensions = utils.ExpandStringSlice(tmpItem.(*pluginsdk.Set).List())
	}

	return &result, nil
}
