package github.com/hashicorp/terraform-provider-azurerm/internal/services/batch
import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/batch/2024-07-01/pool"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenBatchPoolMountConfig(d *pluginsdk.ResourceData, config *pool.MountConfiguration) map[string]interface{} {
	mountConfig := make(map[string]interface{})

	switch {
	case config.AzureBlobFileSystemConfiguration != nil:
		azureBlobFileSysConfigList := make([]interface{}, 0)
		azureBlobFileSysConfig := make(map[string]interface{})
		azureBlobFileSysConfig["account_name"] = config.AzureBlobFileSystemConfiguration.AccountName
		azureBlobFileSysConfig["container_name"] = config.AzureBlobFileSystemConfiguration.ContainerName
		azureBlobFileSysConfig["relative_mount_path"] = config.AzureBlobFileSystemConfiguration.RelativeMountPath
		azureBlobFileSysConfig["account_key"] = findSensitiveInfoForMountConfig("account_key", "account_name", config.AzureBlobFileSystemConfiguration.AccountName, "azure_blob_file_system", d)
		azureBlobFileSysConfig["sas_key"] = findSensitiveInfoForMountConfig("sas_key", "account_name", config.AzureBlobFileSystemConfiguration.AccountName, "azure_blob_file_system", d)
		if config.AzureBlobFileSystemConfiguration.IdentityReference != nil {
			azureBlobFileSysConfig["identity_id"] = flattenBatchPoolIdentityReferenceToIdentityID(config.AzureBlobFileSystemConfiguration.IdentityReference)
		}
		if config.AzureBlobFileSystemConfiguration.BlobfuseOptions != nil {
			azureBlobFileSysConfig["blobfuse_options"] = *config.AzureBlobFileSystemConfiguration.BlobfuseOptions
		}
		azureBlobFileSysConfigList = append(azureBlobFileSysConfigList, azureBlobFileSysConfig)
		mountConfig["azure_blob_file_system"] = azureBlobFileSysConfigList
	case config.AzureFileShareConfiguration != nil:
		azureFileShareConfigList := make([]interface{}, 0)
		azureFileShareConfig := make(map[string]interface{})
		azureFileShareConfig["account_name"] = config.AzureFileShareConfiguration.AccountName
		azureFileShareConfig["azure_file_url"] = config.AzureFileShareConfiguration.AzureFileURL
		azureFileShareConfig["account_key"] = findSensitiveInfoForMountConfig("account_key", "account_name", config.AzureFileShareConfiguration.AccountName, "azure_file_share", d)
		azureFileShareConfig["relative_mount_path"] = config.AzureFileShareConfiguration.RelativeMountPath

		if config.AzureFileShareConfiguration.MountOptions != nil {
			azureFileShareConfig["mount_options"] = *config.AzureFileShareConfiguration.MountOptions
		}

		azureFileShareConfigList = append(azureFileShareConfigList, azureFileShareConfig)
		mountConfig["azure_file_share"] = azureFileShareConfigList

	case config.CifsMountConfiguration != nil:
		cifsMountConfigList := make([]interface{}, 0)
		cifsMountConfig := make(map[string]interface{})

		cifsMountConfig["user_name"] = config.CifsMountConfiguration.UserName
		cifsMountConfig["password"] = findSensitiveInfoForMountConfig("password", "user_name", config.CifsMountConfiguration.UserName, "cifs_mount", d)
		cifsMountConfig["source"] = config.CifsMountConfiguration.Source
		cifsMountConfig["relative_mount_path"] = config.CifsMountConfiguration.RelativeMountPath

		if config.CifsMountConfiguration.MountOptions != nil {
			cifsMountConfig["mount_options"] = *config.CifsMountConfiguration.MountOptions
		}

		cifsMountConfigList = append(cifsMountConfigList, cifsMountConfig)
		mountConfig["cifs_mount"] = cifsMountConfigList
	case config.NfsMountConfiguration != nil:
		nfsMountConfigList := make([]interface{}, 0)
		nfsMountConfig := make(map[string]interface{})

		nfsMountConfig["source"] = config.NfsMountConfiguration.Source
		nfsMountConfig["relative_mount_path"] = config.NfsMountConfiguration.RelativeMountPath

		if config.NfsMountConfiguration.MountOptions != nil {
			nfsMountConfig["mount_options"] = *config.NfsMountConfiguration.MountOptions
		}

		nfsMountConfigList = append(nfsMountConfigList, nfsMountConfig)
		mountConfig["nfs_mount"] = nfsMountConfigList
	default:
		return nil
	}

	return mountConfig
}
