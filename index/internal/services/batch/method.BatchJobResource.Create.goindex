package github.com/hashicorp/terraform-provider-azurerm/internal/services/batch
import (
	"context"
	"fmt"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-sdk/resource-manager/batch/2024-07-01/batchaccount"
	"github.com/hashicorp/go-azure-sdk/resource-manager/batch/2024-07-01/pool"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/batch/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/batch/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	batchDataplane "github.com/jackofallops/kermit/sdk/batch/2022-01.15.0/batch"
)
func (r BatchJobResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model BatchJobModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding %+v", err)
			}

			poolId, err := pool.ParsePoolID(model.BatchPoolId)
			if err != nil {
				return err
			}

			accountId := batchaccount.NewBatchAccountID(poolId.SubscriptionId, poolId.ResourceGroupName, poolId.BatchAccountName)
			client, err := metadata.Client.Batch.JobClient(ctx, accountId)
			if err != nil {
				return err
			}

			id := parse.NewJobID(poolId.SubscriptionId, poolId.ResourceGroupName, poolId.BatchAccountName, poolId.PoolName, model.Name)

			existing, err := r.getJob(ctx, client, id)
			if err != nil {
				if !utils.ResponseWasNotFound(existing.Response) {
					return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
				}
			}
			if !utils.ResponseWasNotFound(existing.Response) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			params := batchDataplane.JobAddParameter{
				ID:          &model.Name,
				DisplayName: &model.DisplayName,
				Priority:    utils.Int32(int32(model.Priority)),
				Constraints: &batchDataplane.JobConstraints{
					MaxTaskRetryCount: utils.Int32(int32(model.TaskRetryMaximum)),
				},
				CommonEnvironmentSettings: r.expandEnvironmentSettings(model.CommonEnvironmentProperties),
				PoolInfo: &batchDataplane.PoolInformation{
					PoolID: &poolId.PoolName,
				},
			}

			if err := r.addJob(ctx, client, id, params); err != nil {
				return err
			}

			metadata.SetID(id)
			return nil
		},
	}
}
