package github.com/hashicorp/terraform-provider-azurerm/internal/services/batch
import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/batch/2024-07-01/pool"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandPoolEndpointConfiguration(list []interface{}) (*pool.PoolEndpointConfiguration, error) {
	if len(list) == 0 || list[0] == nil {
		return nil, nil
	}

	inboundNatPools := make([]pool.InboundNatPool, len(list))

	for i, inboundNatPoolsValue := range list {
		inboundNatPool := inboundNatPoolsValue.(map[string]interface{})

		name := inboundNatPool["name"].(string)
		protocol := pool.InboundEndpointProtocol(inboundNatPool["protocol"].(string))
		backendPort := int32(inboundNatPool["backend_port"].(int))
		frontendPortRange := inboundNatPool["frontend_port_range"].(string)
		parts := strings.Split(frontendPortRange, "-")
		frontendPortRangeStart, err := strconv.Atoi(parts[0])
		if err != nil {
			return nil, err
		}
		frontendPortRangeEnd, err := strconv.Atoi(parts[1])
		if err != nil {
			return nil, err
		}

		networkSecurityGroupRules := expandPoolNetworkSecurityGroupRule(inboundNatPool["network_security_group_rules"].([]interface{}))

		inboundNatPools[i] = pool.InboundNatPool{
			Name:                      name,
			Protocol:                  protocol,
			BackendPort:               int64(backendPort),
			FrontendPortRangeStart:    int64(frontendPortRangeStart),
			FrontendPortRangeEnd:      int64(frontendPortRangeEnd),
			NetworkSecurityGroupRules: &networkSecurityGroupRules,
		}
	}

	return &pool.PoolEndpointConfiguration{
		InboundNatPools: inboundNatPools,
	}, nil
}
