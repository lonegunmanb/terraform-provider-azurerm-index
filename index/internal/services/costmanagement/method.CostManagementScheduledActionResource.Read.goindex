package github.com/hashicorp/terraform-provider-azurerm/internal/services/costmanagement
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/costmanagement/2023-08-01/scheduledactions"
	"github.com/hashicorp/go-azure-sdk/resource-manager/costmanagement/2023-08-01/views"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r CostManagementScheduledActionResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.CostManagement.ScheduledActionsClient

			id, err := scheduledactions.ParseScopedScheduledActionID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.GetByScope(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			metadata.ResourceData.Set("name", id.ScheduledActionName)

			if model := resp.Model; model != nil {
				if props := model.Properties; props != nil {
					metadata.ResourceData.Set("display_name", props.DisplayName)
					metadata.ResourceData.Set("email_address_sender", props.NotificationEmail)
					viewId, err := views.ParseScopedViewID(props.ViewId)
					if err != nil {
						return err
					}
					metadata.ResourceData.Set("view_id", viewId.ID())

					metadata.ResourceData.Set("email_subject", props.Notification.Subject)
					metadata.ResourceData.Set("email_addresses", props.Notification.To)
					metadata.ResourceData.Set("message", props.Notification.Message)

					metadata.ResourceData.Set("frequency", props.Schedule.Frequency)
					metadata.ResourceData.Set("days_of_week", props.Schedule.DaysOfWeek)
					metadata.ResourceData.Set("weeks_of_month", props.Schedule.WeeksOfMonth)
					metadata.ResourceData.Set("hour_of_day", props.Schedule.HourOfDay)
					metadata.ResourceData.Set("day_of_month", props.Schedule.DayOfMonth)
					metadata.ResourceData.Set("start_date", props.Schedule.StartDate)
					metadata.ResourceData.Set("end_date", props.Schedule.EndDate)
				}
			}

			return nil
		},
	}
}
