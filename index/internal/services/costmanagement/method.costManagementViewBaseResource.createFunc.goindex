package github.com/hashicorp/terraform-provider-azurerm/internal/services/costmanagement
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/costmanagement/2023-08-01/views"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (br costManagementViewBaseResource) createFunc(resourceName, scopeFieldName string) sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.CostManagement.ViewsClient
			id := views.NewScopedViewID(metadata.ResourceData.Get(scopeFieldName).(string), metadata.ResourceData.Get("name").(string))

			existing, err := client.GetByScope(ctx, id)
			if err != nil {
				if !response.WasNotFound(existing.HttpResponse) {
					return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
				}
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return tf.ImportAsExistsError(resourceName, id.ID())
			}

			accumulated := views.AccumulatedTypeFalse
			if accumulatedRaw := metadata.ResourceData.Get("accumulated").(bool); accumulatedRaw {
				accumulated = views.AccumulatedTypeTrue
			}

			props := views.View{
				Properties: &views.ViewProperties{
					Accumulated: pointer.To(accumulated),
					DisplayName: utils.String(metadata.ResourceData.Get("display_name").(string)),
					Chart:       pointer.To(views.ChartType(metadata.ResourceData.Get("chart_type").(string))),
					Query: &views.ReportConfigDefinition{
						DataSet:   expandDataset(metadata.ResourceData.Get("dataset").([]interface{})),
						Timeframe: views.ReportTimeframeType(metadata.ResourceData.Get("timeframe").(string)),
						Type:      views.ReportTypeUsage,
					},
					Kpis:   expandKpis(metadata.ResourceData.Get("kpi").([]interface{})),
					Pivots: expandPivots(metadata.ResourceData.Get("pivot").([]interface{})),
				},
			}

			_, err = client.CreateOrUpdateByScope(ctx, id, props)
			if err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
