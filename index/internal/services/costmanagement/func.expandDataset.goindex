package github.com/hashicorp/terraform-provider-azurerm/internal/services/costmanagement
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/costmanagement/2023-08-01/views"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandDataset(input []interface{}) *views.ReportConfigDataset {
	if len(input) == 0 || input[0] == nil {
		return nil
	}

	attrs := input[0].(map[string]interface{})
	dataset := &views.ReportConfigDataset{
		Granularity: pointer.To(views.ReportGranularityType(attrs["granularity"].(string))),
	}

	if aggregation := attrs["aggregation"].(*pluginsdk.Set).List(); len(aggregation) > 0 {
		dataset.Aggregation = expandAggregation(aggregation)
	}

	if sorting := attrs["sorting"].([]interface{}); len(sorting) > 0 {
		dataset.Sorting = expandSorting(sorting)
	}

	if grouping := attrs["grouping"].([]interface{}); len(grouping) > 0 {
		dataset.Grouping = expandGrouping(grouping)
	}

	return dataset
}
