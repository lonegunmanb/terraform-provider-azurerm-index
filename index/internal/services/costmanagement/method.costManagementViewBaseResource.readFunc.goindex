package github.com/hashicorp/terraform-provider-azurerm/internal/services/costmanagement
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/costmanagement/2023-08-01/views"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (br costManagementViewBaseResource) readFunc(scopeFieldName string) sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.CostManagement.ViewsClient

			id, err := views.ParseScopedViewID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.GetByScope(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			metadata.ResourceData.Set("name", id.ViewName)
			// lintignore:R001
			metadata.ResourceData.Set(scopeFieldName, id.Scope)

			if model := resp.Model; model != nil {
				if props := model.Properties; props != nil {
					metadata.ResourceData.Set("chart_type", string(pointer.From(props.Chart)))

					accumulated := false
					if props.Accumulated != nil {
						accumulated = views.AccumulatedTypeTrue == *props.Accumulated
					}
					metadata.ResourceData.Set("accumulated", accumulated)

					metadata.ResourceData.Set("display_name", props.DisplayName)
					metadata.ResourceData.Set("kpi", flattenKpis(props.Kpis))
					metadata.ResourceData.Set("pivot", flattenPivots(props.Pivots))

					if query := props.Query; query != nil {
						metadata.ResourceData.Set("timeframe", string(query.Timeframe))
						metadata.ResourceData.Set("report_type", string(query.Type))
						if query.DataSet != nil {
							metadata.ResourceData.Set("dataset", flattenDataset(query.DataSet))
						}
					}
				}
			}

			return nil
		},
	}
}
