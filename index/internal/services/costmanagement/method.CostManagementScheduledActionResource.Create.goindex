package github.com/hashicorp/terraform-provider-azurerm/internal/services/costmanagement
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/costmanagement/2023-08-01/scheduledactions"
	"github.com/hashicorp/go-azure-sdk/resource-manager/costmanagement/2023-08-01/views"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r CostManagementScheduledActionResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.CostManagement.ScheduledActionsClient

			viewId, err := views.ParseScopedViewID(metadata.ResourceData.Get("view_id").(string))
			if err != nil {
				return err
			}
			id := scheduledactions.NewScopedScheduledActionID(viewId.Scope, metadata.ResourceData.Get("name").(string))

			existing, err := client.GetByScope(ctx, id)
			if err != nil {
				if !response.WasNotFound(existing.HttpResponse) {
					return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
				}
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return tf.ImportAsExistsError(r.ResourceType(), id.ID())
			}

			var daysOfWeek []scheduledactions.DaysOfWeek
			if len(metadata.ResourceData.Get("days_of_week").([]interface{})) > 0 {
				daysOfWeek = make([]scheduledactions.DaysOfWeek, 0)
				for _, value := range metadata.ResourceData.Get("days_of_week").([]interface{}) {
					daysOfWeek = append(daysOfWeek, scheduledactions.DaysOfWeek(value.(string)))
				}
			}

			var weeksOfMonth []scheduledactions.WeeksOfMonth
			if len(metadata.ResourceData.Get("weeks_of_month").([]interface{})) > 0 {
				weeksOfMonth = make([]scheduledactions.WeeksOfMonth, 0)
				for _, value := range metadata.ResourceData.Get("weeks_of_month").([]interface{}) {
					weeksOfMonth = append(weeksOfMonth, scheduledactions.WeeksOfMonth(value.(string)))
				}
			}
			schedule := scheduledactions.ScheduleProperties{
				Frequency:    scheduledactions.ScheduleFrequency(metadata.ResourceData.Get("frequency").(string)),
				WeeksOfMonth: &weeksOfMonth,
				DaysOfWeek:   &daysOfWeek,
				HourOfDay:    utils.Int64(int64(metadata.ResourceData.Get("hour_of_day").(int))),
				DayOfMonth:   utils.Int64(int64(metadata.ResourceData.Get("day_of_month").(int))),
				StartDate:    metadata.ResourceData.Get("start_date").(string),
				EndDate:      metadata.ResourceData.Get("end_date").(string),
			}

			props := scheduledactions.ScheduledAction{
				Kind: pointer.To(scheduledactions.ScheduledActionKindEmail),
				Properties: &scheduledactions.ScheduledActionProperties{
					DisplayName: metadata.ResourceData.Get("display_name").(string),
					Status:      scheduledactions.ScheduledActionStatusEnabled,
					ViewId:      viewId.ID(),
					FileDestination: &scheduledactions.FileDestination{
						FileFormats: &[]scheduledactions.FileFormat{},
					},
					NotificationEmail: utils.String(metadata.ResourceData.Get("email_address_sender").(string)),
					Notification: scheduledactions.NotificationProperties{
						Subject: metadata.ResourceData.Get("email_subject").(string),
						Message: utils.String(metadata.ResourceData.Get("message").(string)),
						To:      *utils.ExpandStringSlice(metadata.ResourceData.Get("email_addresses").([]interface{})),
					},
					Schedule: schedule,
				},
			}

			if _, err = client.CreateOrUpdateByScope(ctx, id, props, scheduledactions.CreateOrUpdateByScopeOperationOptions{}); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
