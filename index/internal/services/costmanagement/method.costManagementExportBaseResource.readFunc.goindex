package github.com/hashicorp/terraform-provider-azurerm/internal/services/costmanagement
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/costmanagement/2023-08-01/exports"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (br costManagementExportBaseResource) readFunc(scopeFieldName string) sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.CostManagement.ExportClient

			id, err := exports.ParseScopedExportID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var opts exports.GetOperationOptions
			resp, err := client.Get(ctx, *id, opts)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			metadata.ResourceData.Set("name", id.ExportName)
			// lintignore:R001
			metadata.ResourceData.Set(scopeFieldName, id.Scope)

			if model := resp.Model; model != nil {
				if props := model.Properties; props != nil {
					if schedule := props.Schedule; schedule != nil {
						if recurrencePeriod := schedule.RecurrencePeriod; recurrencePeriod != nil {
							metadata.ResourceData.Set("recurrence_period_start_date", recurrencePeriod.From)
							metadata.ResourceData.Set("recurrence_period_end_date", recurrencePeriod.To)
						}
						status := *schedule.Status == exports.StatusTypeActive

						metadata.ResourceData.Set("active", status)
						metadata.ResourceData.Set("recurrence_type", string(pointer.From(schedule.Recurrence)))
					}

					exportDeliveryInfo, err := flattenExportDataStorageLocation(&props.DeliveryInfo)
					if err != nil {
						return fmt.Errorf("flattening `export_data_storage_location`: %+v", err)
					}
					if err := metadata.ResourceData.Set("export_data_storage_location", exportDeliveryInfo); err != nil {
						return fmt.Errorf("setting `export_data_storage_location`: %+v", err)
					}
					if err := metadata.ResourceData.Set("export_data_options", flattenExportDefinition(&props.Definition)); err != nil {
						return fmt.Errorf("setting `export_data_options`: %+v", err)
					}
					metadata.ResourceData.Set("file_format", string(pointer.From(props.Format)))
				}
			}

			return nil
		},
	}
}
