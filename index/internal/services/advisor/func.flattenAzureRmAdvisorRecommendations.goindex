package github.com/hashicorp/terraform-provider-azurerm/internal/services/advisor
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/advisor/2023-01-01/getrecommendations"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenAzureRmAdvisorRecommendations(recommends []getrecommendations.ResourceRecommendationBase) []interface{} {
	result := make([]interface{}, 0)

	if len(recommends) == 0 {
		return result
	}

	for _, r := range recommends {
		var description string
		var suppressionIds []interface{}

		v := r.Properties

		if v.ShortDescription != nil && v.ShortDescription.Problem != nil {
			description = *v.ShortDescription.Problem
		}

		if v.SuppressionIds != nil {
			suppressionIds = flattenSuppressionSlice(v.SuppressionIds)
		}

		result = append(result, map[string]interface{}{
			"category":               string(pointer.From(v.Category)),
			"description":            description,
			"impact":                 string(pointer.From(v.Impact)),
			"recommendation_name":    pointer.From(r.Name),
			"recommendation_type_id": pointer.From(v.RecommendationTypeId),
			"resource_name":          pointer.From(v.ImpactedValue),
			"resource_type":          pointer.From(v.ImpactedField),
			"suppression_names":      suppressionIds,
			"updated_time":           pointer.From(v.LastUpdated),
		})
	}

	return result
}
