package github.com/hashicorp/terraform-provider-azurerm/internal/services/advisor
import (
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/advisor/2023-01-01/getrecommendations"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func dataSourceAdvisorRecommendationsRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Advisor.RecommendationsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := commonids.NewSubscriptionID(meta.(*clients.Client).Account.SubscriptionId)

	filterList := make([]string, 0)
	if categories := expandAzureRmAdvisorRecommendationsMapString("Category", d.Get("filter_by_category").(*pluginsdk.Set).List()); categories != "" {
		filterList = append(filterList, categories)
	}
	if resGroups := expandAzureRmAdvisorRecommendationsMapString("ResourceGroup", d.Get("filter_by_resource_groups").(*pluginsdk.Set).List()); resGroups != "" {
		filterList = append(filterList, resGroups)
	}

	opts := getrecommendations.RecommendationsListOperationOptions{}
	if len(filterList) > 0 {
		opts.Filter = pointer.To(strings.Join(filterList, " and "))
	}

	recomendations, err := client.RecommendationsListComplete(ctx, id, opts)
	if err != nil {
		return fmt.Errorf("loading Advisor Recommendation for %q: %+v", id, err)
	}

	if err := d.Set("recommendations", flattenAzureRmAdvisorRecommendations(recomendations.Items)); err != nil {
		return fmt.Errorf("setting `recommendations`: %+v", err)
	}

	d.SetId("avdisor/recommendations/" + time.Now().UTC().String())

	return nil
}
