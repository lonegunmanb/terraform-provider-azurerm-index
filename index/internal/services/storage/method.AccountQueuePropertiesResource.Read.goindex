package github.com/hashicorp/terraform-provider-azurerm/internal/services/storage
import (
	"context"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/storageaccounts"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/jackofallops/giovanni/storage/2023-11-03/queue/queues"
)
func (s AccountQueuePropertiesResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			storageClient := metadata.Client.Storage

			var state AccountQueuePropertiesModel

			id, err := commonids.ParseStorageAccountID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			state.StorageAccountId = id.ID()

			account, err := storageClient.GetAccount(ctx, *id)
			if err != nil {
				return metadata.MarkAsGone(id)
			}
			if account == nil {
				return fmt.Errorf("unable to locate %s", *id)
			}

			client, err := storageClient.QueuesDataPlaneClient(ctx, *account, storageClient.DataPlaneOperationSupportingAnyAuthMethod())
			if err != nil {
				return fmt.Errorf("building Queues Client for %s: %v", *id, err)
			}

			props, err := client.GetServiceProperties(ctx)
			if err != nil {
				return fmt.Errorf("retrieving Queue Properties for %s: %+v", *id, err)
			}

			if props != nil {
				if props.Cors != nil && !reflect.DeepEqual(*props.Cors, &defaultCorsProperties) {
					corsRules := make([]AccountQueuePropertiesCorsRule, 0)
					for _, rule := range props.Cors.CorsRule {
						corsRule := AccountQueuePropertiesCorsRule{
							AllowedOrigins: strings.Split(rule.AllowedOrigins, ","),
							AllowedMethods: strings.Split(rule.AllowedMethods, ","),
							AllowedHeaders: strings.Split(rule.AllowedHeaders, ","),
							ExposedHeaders: strings.Split(rule.ExposedHeaders, ","),
							MaxAgeSeconds:  int64(rule.MaxAgeInSeconds),
						}
						corsRules = append(corsRules, corsRule)
					}
					state.CorsRule = corsRules
				}

				if props.HourMetrics != nil && !reflect.DeepEqual(*props.HourMetrics, &defaultHourMetricsProperties) {
					state.HourMetrics = []AccountQueuePropertiesHourMetrics{
						{
							Version:             props.HourMetrics.Version,
							IncludeAPIS:         pointer.From(props.HourMetrics.IncludeAPIs),
							RetentionPolicyDays: int64(props.HourMetrics.RetentionPolicy.Days),
						},
					}
				}

				if props.MinuteMetrics != nil && !reflect.DeepEqual(*props.MinuteMetrics, &defaultMinuteMetricsProperties) {
					state.MinuteMetrics = []AccountQueuePropertiesMinuteMetrics{
						{
							Version:             props.MinuteMetrics.Version,
							IncludeAPIS:         pointer.From(props.MinuteMetrics.IncludeAPIs),
							RetentionPolicyDays: int64(props.MinuteMetrics.RetentionPolicy.Days),
						},
					}
				}

				if props.Logging != nil && !reflect.DeepEqual(*props.Logging, &defaultLoggingProperties) {
					state.Logging = []AccountQueuePropertiesLogging{
						{
							Version:             props.Logging.Version,
							Delete:              props.Logging.Delete,
							Read:                props.Logging.Read,
							Write:               props.Logging.Write,
							RetentionPolicyDays: int64(props.Logging.RetentionPolicy.Days),
						},
					}
				}
			}

			if err = pluginsdk.SetResourceIdentityData(metadata.ResourceData, id, pluginsdk.ResourceTypeForIdentityVirtual); err != nil {
				return err
			}

			return metadata.Encode(&state)
		},
	}
}
