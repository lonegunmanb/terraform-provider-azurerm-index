package github.com/hashicorp/terraform-provider-azurerm/internal/services/storage
import (
	"fmt"
	"net/url"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/storageaccounts"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func flattenAccountEndpoints(primaryEndpoints, secondaryEndpoints *storageaccounts.Endpoints, routingPreference *storageaccounts.RoutingPreference) accountEndpoints {
	output := accountEndpoints{}

	if primaryEndpoints != nil {
		output.primaryBlobEndpoint, output.primaryBlobHostName = flattenAccountEndpointAndHost(primaryEndpoints.Blob)
		output.primaryDfsEndpoint, output.primaryDfsHostName = flattenAccountEndpointAndHost(primaryEndpoints.Dfs)
		output.primaryFileEndpoint, output.primaryFileHostName = flattenAccountEndpointAndHost(primaryEndpoints.File)
		output.primaryQueueEndpoint, output.primaryQueueHostName = flattenAccountEndpointAndHost(primaryEndpoints.Queue)
		output.primaryTableEndpoint, output.primaryTableHostName = flattenAccountEndpointAndHost(primaryEndpoints.Table)
		output.primaryWebEndpoint, output.primaryWebHostName = flattenAccountEndpointAndHost(primaryEndpoints.Web)

		if routingPreference != nil {
			if primaryEndpoints.InternetEndpoints != nil && pointer.From(routingPreference.PublishInternetEndpoints) {
				output.primaryBlobInternetEndpoint, output.primaryBlobInternetHostName = flattenAccountEndpointAndHost(primaryEndpoints.InternetEndpoints.Blob)
				output.primaryDfsInternetEndpoint, output.primaryDfsInternetHostName = flattenAccountEndpointAndHost(primaryEndpoints.InternetEndpoints.Dfs)
				output.primaryFileInternetEndpoint, output.primaryFileInternetHostName = flattenAccountEndpointAndHost(primaryEndpoints.InternetEndpoints.File)
				output.primaryWebInternetEndpoint, output.primaryWebInternetHostName = flattenAccountEndpointAndHost(primaryEndpoints.InternetEndpoints.Web)
			}

			if primaryEndpoints.MicrosoftEndpoints != nil && pointer.From(routingPreference.PublishMicrosoftEndpoints) {
				output.primaryBlobMicrosoftEndpoint, output.primaryBlobMicrosoftHostName = flattenAccountEndpointAndHost(primaryEndpoints.MicrosoftEndpoints.Blob)
				output.primaryDfsMicrosoftEndpoint, output.primaryDfsMicrosoftHostName = flattenAccountEndpointAndHost(primaryEndpoints.MicrosoftEndpoints.Dfs)
				output.primaryFileMicrosoftEndpoint, output.primaryFileMicrosoftHostName = flattenAccountEndpointAndHost(primaryEndpoints.MicrosoftEndpoints.File)
				output.primaryQueueMicrosoftEndpoint, output.primaryQueueMicrosoftHostName = flattenAccountEndpointAndHost(primaryEndpoints.MicrosoftEndpoints.Queue)
				output.primaryTableMicrosoftEndpoint, output.primaryTableMicrosoftHostName = flattenAccountEndpointAndHost(primaryEndpoints.MicrosoftEndpoints.Table)
				output.primaryWebMicrosoftEndpoint, output.primaryWebMicrosoftHostName = flattenAccountEndpointAndHost(primaryEndpoints.MicrosoftEndpoints.Web)
			}
		}
	}

	if secondaryEndpoints != nil {
		output.secondaryBlobEndpoint, output.secondaryBlobHostName = flattenAccountEndpointAndHost(secondaryEndpoints.Blob)
		output.secondaryDfsEndpoint, output.secondaryDfsHostName = flattenAccountEndpointAndHost(secondaryEndpoints.Dfs)
		output.secondaryFileEndpoint, output.secondaryFileHostName = flattenAccountEndpointAndHost(secondaryEndpoints.File)
		output.secondaryQueueEndpoint, output.secondaryQueueHostName = flattenAccountEndpointAndHost(secondaryEndpoints.Queue)
		output.secondaryTableEndpoint, output.secondaryTableHostName = flattenAccountEndpointAndHost(secondaryEndpoints.Table)
		output.secondaryWebEndpoint, output.secondaryWebHostName = flattenAccountEndpointAndHost(secondaryEndpoints.Web)

		if routingPreference != nil {
			if secondaryEndpoints.InternetEndpoints != nil && pointer.From(routingPreference.PublishInternetEndpoints) {
				output.secondaryBlobInternetEndpoint, output.secondaryBlobInternetHostName = flattenAccountEndpointAndHost(secondaryEndpoints.InternetEndpoints.Blob)
				output.secondaryDfsInternetEndpoint, output.secondaryDfsInternetHostName = flattenAccountEndpointAndHost(secondaryEndpoints.InternetEndpoints.Dfs)
				output.secondaryFileInternetEndpoint, output.secondaryFileInternetHostName = flattenAccountEndpointAndHost(secondaryEndpoints.InternetEndpoints.File)
				output.secondaryWebInternetEndpoint, output.secondaryWebInternetHostName = flattenAccountEndpointAndHost(secondaryEndpoints.InternetEndpoints.Web)
			}

			if secondaryEndpoints.MicrosoftEndpoints != nil && pointer.From(routingPreference.PublishMicrosoftEndpoints) {
				output.secondaryBlobMicrosoftEndpoint, output.secondaryBlobMicrosoftHostName = flattenAccountEndpointAndHost(secondaryEndpoints.MicrosoftEndpoints.Blob)
				output.secondaryDfsMicrosoftEndpoint, output.secondaryDfsMicrosoftHostName = flattenAccountEndpointAndHost(secondaryEndpoints.MicrosoftEndpoints.Dfs)
				output.secondaryFileMicrosoftEndpoint, output.secondaryFileMicrosoftHostName = flattenAccountEndpointAndHost(secondaryEndpoints.MicrosoftEndpoints.File)
				output.secondaryQueueMicrosoftEndpoint, output.secondaryQueueMicrosoftHostName = flattenAccountEndpointAndHost(secondaryEndpoints.MicrosoftEndpoints.Queue)
				output.secondaryTableMicrosoftEndpoint, output.secondaryTableMicrosoftHostName = flattenAccountEndpointAndHost(secondaryEndpoints.MicrosoftEndpoints.Table)
				output.secondaryWebMicrosoftEndpoint, output.secondaryWebMicrosoftHostName = flattenAccountEndpointAndHost(secondaryEndpoints.MicrosoftEndpoints.Web)
			}
		}
	}

	return output
}
