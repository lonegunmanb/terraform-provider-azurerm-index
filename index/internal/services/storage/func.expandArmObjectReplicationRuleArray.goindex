package github.com/hashicorp/terraform-provider-azurerm/internal/services/storage
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/objectreplicationpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandArmObjectReplicationRuleArray(input []interface{}) *[]objectreplicationpolicies.ObjectReplicationPolicyRule {
	results := make([]objectreplicationpolicies.ObjectReplicationPolicyRule, 0)
	for _, item := range input {
		v := item.(map[string]interface{})
		result := objectreplicationpolicies.ObjectReplicationPolicyRule{
			SourceContainer:      v["source_container_name"].(string),
			DestinationContainer: v["destination_container_name"].(string),
			Filters: &objectreplicationpolicies.ObjectReplicationPolicyFilter{
				MinCreationTime: utils.String(expandArmObjectReplicationMinCreationTime(v["copy_blobs_created_after"].(string))),
			},
		}

		if r, ok := v["name"].(string); ok && r != "" {
			result.RuleId = utils.String(r)
		}

		if f, ok := v["filter_out_blobs_with_prefix"]; ok {
			result.Filters.PrefixMatch = utils.ExpandStringSlice(f.(*pluginsdk.Set).List())
		}

		results = append(results, result)
	}
	return &results
}
