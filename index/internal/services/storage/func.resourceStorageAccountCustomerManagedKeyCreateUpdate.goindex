package github.com/hashicorp/terraform-provider-azurerm/internal/services/storage
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/storageaccounts"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceStorageAccountCustomerManagedKeyCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	storageClient := meta.(*clients.Client).Storage.ResourceManager.StorageAccounts
	keyVaultsClient := meta.(*clients.Client).KeyVault
	vaultsClient := keyVaultsClient.VaultsClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := commonids.ParseStorageAccountID(d.Get("storage_account_id").(string))
	if err != nil {
		return err
	}

	locks.ByName(id.StorageAccountName, storageAccountResourceName)
	defer locks.UnlockByName(id.StorageAccountName, storageAccountResourceName)

	existing, err := storageClient.GetProperties(ctx, *id, storageaccounts.DefaultGetPropertiesOperationOptions())
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}
	if existing.Model == nil {
		return fmt.Errorf("retrieving %s: `model` was nil", id)
	}
	if existing.Model.Properties == nil {
		return fmt.Errorf("retrieving %s: `model.Properties` was nil", id)
	}
	if d.IsNewResource() {
		// whilst this looks superfluous given encryption is enabled by default, due to the way
		// the Azure API works this technically can be nil
		if existing.Model != nil && existing.Model.Properties != nil && existing.Model.Properties.Encryption != nil && existing.Model.Properties.Encryption.KeySource != nil {
			if *existing.Model.Properties.Encryption.KeySource == storageaccounts.KeySourceMicrosoftPointKeyvault {
				return tf.ImportAsExistsError("azurerm_storage_account_customer_managed_key", id.ID())
			}
		}
	}

	keyName := ""
	keyVersion := ""
	keyVaultURI := ""
	if keyVaultURIRaw := d.Get("key_vault_uri").(string); keyVaultURIRaw != "" {
		keyName = d.Get("key_name").(string)
		keyVersion = d.Get("key_version").(string)
		keyVaultURI = keyVaultURIRaw
	} else if _, ok := d.GetOk("key_vault_id"); ok {
		keyVaultID, err := commonids.ParseKeyVaultID(d.Get("key_vault_id").(string))
		if err != nil {
			return err
		}

		keyVault, err := vaultsClient.Get(ctx, *keyVaultID)
		if err != nil {
			return fmt.Errorf("retrieving Key Vault %q (Resource Group %q): %+v", keyVaultID.VaultName, keyVaultID.ResourceGroupName, err)
		}

		softDeleteEnabled := false
		purgeProtectionEnabled := false
		if model := keyVault.Model; model != nil {
			if esd := model.Properties.EnableSoftDelete; esd != nil {
				softDeleteEnabled = *esd
			}
			if epp := model.Properties.EnablePurgeProtection; epp != nil {
				purgeProtectionEnabled = *epp
			}
		}
		if !softDeleteEnabled || !purgeProtectionEnabled {
			return fmt.Errorf("Key Vault %q (Resource Group %q) must be configured for both Purge Protection and Soft Delete", keyVaultID.VaultName, keyVaultID.ResourceGroupName)
		}

		keyVaultBaseURL, err := keyVaultsClient.BaseUriForKeyVault(ctx, *keyVaultID)
		if err != nil {
			return fmt.Errorf("looking up Key Vault URI from %s: %+v", *keyVaultID, err)
		}

		keyName = d.Get("key_name").(string)
		keyVersion = d.Get("key_version").(string)
		keyVaultURI = *keyVaultBaseURL
	} else if managedHSMKeyId, ok := d.GetOk("managed_hsm_key_id"); ok {
		if keyId, err := parse.ManagedHSMDataPlaneVersionedKeyID(managedHSMKeyId.(string), nil); err == nil {
			keyName = keyId.KeyName
			keyVersion = keyId.KeyVersion
			keyVaultURI = keyId.BaseUri()
		} else if keyId, err := parse.ManagedHSMDataPlaneVersionlessKeyID(managedHSMKeyId.(string), nil); err == nil {
			keyName = keyId.KeyName
			keyVersion = ""
			keyVaultURI = keyId.BaseUri()
		} else {
			return fmt.Errorf("Failed to parse '%s' as HSM key ID", managedHSMKeyId)
		}
	}

	userAssignedIdentity := d.Get("user_assigned_identity_id").(string)
	federatedIdentityClientID := d.Get("federated_identity_client_id").(string)

	payload := storageaccounts.StorageAccountUpdateParameters{
		Properties: &storageaccounts.StorageAccountPropertiesUpdateParameters{
			Encryption: &storageaccounts.Encryption{
				Services: &storageaccounts.EncryptionServices{
					Blob: &storageaccounts.EncryptionService{
						Enabled: utils.Bool(true),
					},
					File: &storageaccounts.EncryptionService{
						Enabled: utils.Bool(true),
					},
				},
				Identity: &storageaccounts.EncryptionIdentity{
					UserAssignedIdentity: utils.String(userAssignedIdentity),
				},
				KeySource: pointer.To(storageaccounts.KeySourceMicrosoftPointKeyvault),
				Keyvaultproperties: &storageaccounts.KeyVaultProperties{
					Keyname:     utils.String(keyName),
					Keyversion:  utils.String(keyVersion),
					Keyvaulturi: utils.String(keyVaultURI),
				},
			},
		},
	}

	if federatedIdentityClientID != "" {
		payload.Properties.Encryption.Identity.FederatedIdentityClientId = utils.String(federatedIdentityClientID)
	}
	if _, err = storageClient.Update(ctx, *id, payload); err != nil {
		return fmt.Errorf("updating Customer Managed Key for %s: %+v", id, err)
	}

	d.SetId(id.ID())
	return resourceStorageAccountCustomerManagedKeyRead(d, meta)
}
