package github.com/hashicorp/terraform-provider-azurerm/internal/services/storage
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/objectreplicationpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenObjectReplicationRules(input *[]objectreplicationpolicies.ObjectReplicationPolicyRule) []interface{} {
	results := make([]interface{}, 0)
	if input == nil {
		return results
	}

	for _, item := range *input {
		destinationContainer := item.DestinationContainer
		sourceContainer := item.SourceContainer

		var ruleId string
		if item.RuleId != nil {
			ruleId = *item.RuleId
		}

		var minCreationTime string
		if item.Filters != nil && item.Filters.MinCreationTime != nil {
			minCreationTime = *item.Filters.MinCreationTime
		}

		var prefix []interface{}
		if item.Filters != nil && item.Filters.PrefixMatch != nil {
			prefix = utils.FlattenStringSlice(item.Filters.PrefixMatch)
		}

		v := map[string]interface{}{
			"destination_container_name":   destinationContainer,
			"source_container_name":        sourceContainer,
			"copy_blobs_created_after":     flattenArmObjectReplicationMinCreationTime(minCreationTime),
			"filter_out_blobs_with_prefix": pluginsdk.NewSet(pluginsdk.HashString, prefix),
			"name":                         ruleId,
		}
		results = append(results, v)
	}
	return results
}
