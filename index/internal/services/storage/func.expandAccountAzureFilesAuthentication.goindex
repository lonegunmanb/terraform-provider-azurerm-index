package github.com/hashicorp/terraform-provider-azurerm/internal/services/storage
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/edgezones"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/blobservice"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/fileservice"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/storageaccounts"
	"github.com/hashicorp/go-azure-sdk/sdk/environments"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	keyVaultsClient "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/client"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	managedHsmParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/parse"
	managedHsmValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/managedhsm/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/giovanni/storage/2023-11-03/blob/accounts"
	"github.com/jackofallops/giovanni/storage/2023-11-03/queue/queues"
)
func expandAccountAzureFilesAuthentication(input []interface{}) (*storageaccounts.AzureFilesIdentityBasedAuthentication, error) {
	if len(input) == 0 {
		return &storageaccounts.AzureFilesIdentityBasedAuthentication{
			DirectoryServiceOptions: storageaccounts.DirectoryServiceOptionsNone,
		}, nil
	}

	v := input[0].(map[string]interface{})
	output := storageaccounts.AzureFilesIdentityBasedAuthentication{
		DirectoryServiceOptions: storageaccounts.DirectoryServiceOptions(v["directory_type"].(string)),
	}
	if output.DirectoryServiceOptions == storageaccounts.DirectoryServiceOptionsAD ||
		output.DirectoryServiceOptions == storageaccounts.DirectoryServiceOptionsAADDS ||
		output.DirectoryServiceOptions == storageaccounts.DirectoryServiceOptionsAADKERB {
		ad := expandAccountActiveDirectoryProperties(v["active_directory"].([]interface{}))

		if output.DirectoryServiceOptions == storageaccounts.DirectoryServiceOptionsAD {
			if ad == nil {
				return nil, fmt.Errorf("`active_directory` is required when `directory_type` is `AD`")
			}
			if ad.AzureStorageSid == nil {
				return nil, fmt.Errorf("`active_directory.0.storage_sid` is required when `directory_type` is `AD`")
			}
			if ad.DomainSid == nil {
				return nil, fmt.Errorf("`active_directory.0.domain_sid` is required when `directory_type` is `AD`")
			}
			if ad.ForestName == nil {
				return nil, fmt.Errorf("`active_directory.0.forest_name` is required when `directory_type` is `AD`")
			}
			if ad.NetBiosDomainName == nil {
				return nil, fmt.Errorf("`active_directory.0.netbios_domain_name` is required when `directory_type` is `AD`")
			}
		}

		output.ActiveDirectoryProperties = ad
		output.DefaultSharePermission = pointer.To(storageaccounts.DefaultSharePermission(v["default_share_level_permission"].(string)))
	}

	return &output, nil
}
