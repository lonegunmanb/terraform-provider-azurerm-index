package github.com/hashicorp/terraform-provider-azurerm/internal/services/storage
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/queueservice"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/client"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/jackofallops/giovanni/storage/2023-11-03/blob/accounts"
	"github.com/jackofallops/giovanni/storage/2023-11-03/queue/queues"
)
func resourceStorageQueueRead(d *pluginsdk.ResourceData, meta interface{}) error {
	queueClient := meta.(*clients.Client).Storage.ResourceManager.QueueService
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	if !features.FivePointOh() && !strings.HasPrefix(d.Id(), "/subscriptions/") {
		storageClient := meta.(*clients.Client).Storage

		id, err := queues.ParseQueueID(d.Id(), storageClient.StorageDomainSuffix)
		if err != nil {
			return err
		}

		account, err := storageClient.FindAccount(ctx, subscriptionId, id.AccountId.AccountName)
		if err != nil {
			return fmt.Errorf("retrieving Account %q for Queue %q: %v", id.AccountId.AccountName, id.QueueName, err)
		}
		if account == nil {
			log.Printf("[WARN] Unable to determine Resource Group for Storage Queue %q (Account %s) - assuming removed & removing from state", id.QueueName, id.AccountId.AccountName)
			d.SetId("")
			return nil
		}

		client, err := storageClient.QueuesDataPlaneClient(ctx, *account, storageClient.DataPlaneOperationSupportingAnyAuthMethod())
		if err != nil {
			return fmt.Errorf("building Queues Client: %v", err)
		}

		queue, err := client.Get(ctx, id.QueueName)
		if err != nil {
			return fmt.Errorf("retrieving %s: %v", id, err)
		}
		if queue == nil {
			log.Printf("[INFO] Storage Queue %q no longer exists, removing from state...", id.QueueName)
			d.SetId("")
			return nil
		}

		d.Set("name", id.QueueName)
		d.Set("storage_account_name", id.AccountId.AccountName)

		if err := d.Set("metadata", FlattenMetaData(queue.MetaData)); err != nil {
			return fmt.Errorf("setting `metadata`: %s", err)
		}

		resourceManagerId := parse.NewStorageQueueResourceManagerID(account.StorageAccountId.SubscriptionId, account.StorageAccountId.ResourceGroupName, id.AccountId.AccountName, "default", id.QueueName)
		d.Set("resource_manager_id", resourceManagerId.ID())
		d.Set("url", id.ID())

		return nil
	}

	id, err := queueservice.ParseQueueID(d.Id())
	if err != nil {
		return err
	}

	existing, err := queueClient.QueueGet(ctx, *id)
	if err != nil {
		if response.WasNotFound(existing.HttpResponse) {
			log.Printf("[DEBUG] %q was not found, removing from state", *id)
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %v", *id, err)
	}

	d.Set("name", id.QueueName)
	d.Set("storage_account_id", commonids.NewStorageAccountID(id.SubscriptionId, id.ResourceGroupName, id.StorageAccountName).ID())

	if model := existing.Model; model != nil {
		if prop := model.Properties; prop != nil {
			if metadata := prop.Metadata; metadata != nil {
				if err := d.Set("metadata", FlattenMetaData(*metadata)); err != nil {
					return fmt.Errorf("setting `metadata`: %s", err)
				}
			}
		}
	}

	account, err := meta.(*clients.Client).Storage.GetAccount(ctx, commonids.NewStorageAccountID(id.SubscriptionId, id.ResourceGroupName, id.StorageAccountName))
	if err != nil {
		return fmt.Errorf("retrieving Account for Queue %q: %v", id, err)
	}
	// Determine the queue endpoint, so we can build a data plane ID
	endpoint, err := account.DataPlaneEndpoint(client.EndpointTypeQueue)
	if err != nil {
		return fmt.Errorf("determining Queue endpoint: %v", err)
	}
	// Parse the queue endpoint as a data plane account ID
	accountDpId, err := accounts.ParseAccountID(*endpoint, meta.(*clients.Client).Storage.StorageDomainSuffix)
	if err != nil {
		return fmt.Errorf("parsing Account ID: %v", err)
	}
	d.Set("url", queues.NewQueueID(*accountDpId, id.QueueName).ID())

	if !features.FivePointOh() {
		d.Set("resource_manager_id", id.ID())
	}

	return nil
}
