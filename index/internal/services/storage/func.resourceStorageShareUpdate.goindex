package github.com/hashicorp/terraform-provider-azurerm/internal/services/storage
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/fileshares"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/storageaccounts"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/client"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/jackofallops/giovanni/storage/2023-11-03/blob/accounts"
	"github.com/jackofallops/giovanni/storage/2023-11-03/file/shares"
)
func resourceStorageShareUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	storageClient := meta.(*clients.Client).Storage
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	sharesClient := meta.(*clients.Client).Storage.ResourceManager.FileShares
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	if !features.FivePointOh() && !strings.HasPrefix(d.Id(), "/subscriptions/") {
		id, err := shares.ParseShareID(d.Id(), storageClient.StorageDomainSuffix)
		if err != nil {
			return err
		}

		account, err := storageClient.FindAccount(ctx, subscriptionId, id.AccountId.AccountName)
		if err != nil {
			return fmt.Errorf("retrieving Account %q for Share %q: %v", id.AccountId.AccountName, id.ShareName, err)
		}
		if account == nil {
			return fmt.Errorf("locating Storage Account %q", id.AccountId.AccountName)
		}

		// The files API does not support bearer tokens (@manicminer, 2024-02-15)
		client, err := storageClient.FileSharesDataPlaneClient(ctx, *account, storageClient.DataPlaneOperationSupportingOnlySharedKeyAuth())
		if err != nil {
			return fmt.Errorf("building File Share Client for %s: %+v", account.StorageAccountId, err)
		}

		if d.HasChange("quota") {
			log.Printf("[DEBUG] Updating the Quota for %s", id)
			quota := d.Get("quota").(int)

			if err = client.UpdateQuota(ctx, id.ShareName, quota); err != nil {
				return fmt.Errorf("updating Quota for %s: %v", id, err)
			}

			log.Printf("[DEBUG] Updated the Quota for %s", id)
		}

		if d.HasChange("metadata") {
			log.Printf("[DEBUG] Updating the MetaData for %s", id)

			metaDataRaw := d.Get("metadata").(map[string]interface{})
			metaData := ExpandMetaData(metaDataRaw)

			if err = client.UpdateMetaData(ctx, id.ShareName, metaData); err != nil {
				return fmt.Errorf("updating MetaData for %s: %v", id, err)
			}

			log.Printf("[DEBUG] Updated the MetaData for %s", id)
		}

		if d.HasChange("acl") {
			log.Printf("[DEBUG] Updating the ACLs for %s", id)

			aclsRaw := d.Get("acl").(*pluginsdk.Set).List()
			acls := expandStorageShareACLsDeprecated(aclsRaw)

			if err = client.UpdateACLs(ctx, id.ShareName, shares.SetAclInput{SignedIdentifiers: acls}); err != nil {
				return fmt.Errorf("updating ACLs for %s: %v", id, err)
			}

			log.Printf("[DEBUG] Updated ACLs for %s", id)
		}

		if d.HasChange("access_tier") {
			tier := shares.AccessTier(d.Get("access_tier").(string))
			err = pluginsdk.Retry(d.Timeout(pluginsdk.TimeoutUpdate), func() *pluginsdk.RetryError {
				err = client.UpdateTier(ctx, id.ShareName, tier)
				if err != nil {
					if strings.Contains(err.Error(), "Cannot change access tier at this moment") {
						return pluginsdk.RetryableError(err)
					}
					return pluginsdk.NonRetryableError(err)
				}
				time.Sleep(30 * time.Second)
				return nil
			})
			if err != nil {
				return fmt.Errorf("updating access tier %s: %+v", id, err)
			}

			log.Printf("[DEBUG] Updated Access Tier for %s", id)
		}

		return resourceStorageShareRead(d, meta)
	}

	id, err := fileshares.ParseShareID(d.Id())
	if err != nil {
		return err
	}

	update := fileshares.FileShare{
		Properties: &fileshares.FileShareProperties{},
	}

	if d.HasChange("quota") {
		quota := d.Get("quota").(int)
		update.Properties.ShareQuota = pointer.To(int64(quota))
	}

	if d.HasChange("metadata") {
		metaDataRaw := d.Get("metadata").(map[string]interface{})
		metaData := ExpandMetaData(metaDataRaw)

		update.Properties.Metadata = pointer.To(metaData)
	}

	if d.HasChange("acl") {
		update.Properties.SignedIdentifiers = expandStorageShareACLs(d.Get("acl").(*pluginsdk.Set).List())
	}

	if d.HasChange("access_tier") {
		tier := shares.AccessTier(d.Get("access_tier").(string))
		update.Properties.AccessTier = pointer.To(fileshares.ShareAccessTier(tier))
	}

	if _, err = sharesClient.Update(ctx, *id, update); err != nil {
		return fmt.Errorf("updating %s: %v", id, err)
	}

	return resourceStorageShareRead(d, meta)
}
