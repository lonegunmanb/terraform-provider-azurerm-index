package github.com/hashicorp/terraform-provider-azurerm/internal/services/storage
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/fileshares"
	"github.com/hashicorp/go-azure-sdk/resource-manager/storage/2023-05-01/storageaccounts"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/client"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/custompollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/helpers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/jackofallops/giovanni/storage/2023-11-03/blob/accounts"
	"github.com/jackofallops/giovanni/storage/2023-11-03/file/shares"
)
func resourceStorageShareRead(d *pluginsdk.ResourceData, meta interface{}) error {
	sharesClient := meta.(*clients.Client).Storage.ResourceManager.FileShares
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	if !features.FivePointOh() && !strings.HasPrefix(d.Id(), "/subscriptions/") && d.Get("storage_account_id").(string) == "" {
		storageClient := meta.(*clients.Client).Storage
		id, err := shares.ParseShareID(d.Id(), storageClient.StorageDomainSuffix)
		if err != nil {
			return err
		}

		account, err := storageClient.FindAccount(ctx, subscriptionId, id.AccountId.AccountName)
		if err != nil {
			return fmt.Errorf("retrieving Account %q for Share %q: %v", id.AccountId.AccountName, id.ShareName, err)
		}
		if account == nil {
			log.Printf("[WARN] Unable to determine Account %q for Storage Share %q - assuming removed & removing from state", id.AccountId.AccountName, id.ShareName)
			d.SetId("")
			return nil
		}

		// The files API does not support bearer tokens (@manicminer, 2024-02-15)
		client, err := storageClient.FileSharesDataPlaneClient(ctx, *account, storageClient.DataPlaneOperationSupportingOnlySharedKeyAuth())
		if err != nil {
			return fmt.Errorf("building File Share Client for %s: %+v", account.StorageAccountId, err)
		}

		props, err := client.Get(ctx, id.ShareName)
		if err != nil {
			return err
		}
		if props == nil {
			log.Printf("[DEBUG] File Share %q was not found in %s - assuming removed & removing from state", id.ShareName, account.StorageAccountId)
			d.SetId("")
			return nil
		}

		d.Set("name", id.ShareName)
		d.Set("storage_account_name", id.AccountId.AccountName)
		d.Set("quota", props.QuotaGB)
		d.Set("url", id.ID())
		d.Set("enabled_protocol", string(props.EnabledProtocol))

		accessTier := ""
		if props.AccessTier != nil {
			accessTier = string(*props.AccessTier)
		}
		d.Set("access_tier", accessTier)

		if err := d.Set("acl", flattenStorageShareACLsDeprecated(props.ACLs)); err != nil {
			return fmt.Errorf("flattening `acl`: %+v", err)
		}

		if err := d.Set("metadata", FlattenMetaData(props.MetaData)); err != nil {
			return fmt.Errorf("flattening `metadata`: %+v", err)
		}

		resourceManagerId := parse.NewStorageShareResourceManagerID(account.StorageAccountId.SubscriptionId, account.StorageAccountId.ResourceGroupName, account.StorageAccountId.StorageAccountName, "default", id.ShareName)
		d.Set("resource_manager_id", resourceManagerId.ID())

		return nil
	}

	if !features.FivePointOh() {
		// Deal with the ID changing if the user changes from `storage_account_name` to `storage_account_id`
		if !strings.HasPrefix(d.Id(), "/subscriptions/") {
			accountId, err := commonids.ParseStorageAccountID(d.Get("storage_account_id").(string))
			if err != nil {
				return err
			}

			id := fileshares.NewShareID(subscriptionId, accountId.ResourceGroupName, accountId.StorageAccountName, d.Get("name").(string))
			d.SetId(id.ID())
		}
	}

	id, err := fileshares.ParseShareID(d.Id())
	if err != nil {
		return err
	}

	existing, err := sharesClient.Get(ctx, *id, fileshares.DefaultGetOperationOptions())
	if err != nil {
		if response.WasNotFound(existing.HttpResponse) {
			log.Printf("[DEBUG] %q was not found, removing from state", *id)
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %v", *id, err)
	}

	d.Set("storage_account_id", commonids.NewStorageAccountID(id.SubscriptionId, id.ResourceGroupName, id.StorageAccountName).ID())
	d.Set("name", id.ShareName)

	if model := existing.Model; model != nil {
		if props := model.Properties; props != nil {
			d.Set("quota", props.ShareQuota)
			// Resource Manager treats nil and "SMB" as the same and we may not get a full response here
			enabledProtocols := fileshares.EnabledProtocolsSMB
			if props.EnabledProtocols != nil {
				enabledProtocols = *props.EnabledProtocols
			}
			d.Set("enabled_protocol", string(enabledProtocols))
			d.Set("access_tier", string(pointer.From(props.AccessTier)))
			d.Set("acl", flattenStorageShareACLs(pointer.From(props.SignedIdentifiers)))
			d.Set("metadata", FlattenMetaData(pointer.From(props.Metadata)))
		}
	}

	if !features.FivePointOh() {
		d.Set("resource_manager_id", id.ID())
		d.Set("storage_account_name", "")
	}

	// TODO - The following section for `url` will need to be updated to go-azure-sdk when the Giovanni Deprecation process has been completed
	account, err := meta.(*clients.Client).Storage.FindAccount(ctx, subscriptionId, id.StorageAccountName)
	if err != nil {
		return fmt.Errorf("retrieving Account %q for Share %q: %v", id.StorageAccountName, id.ShareName, err)
	}
	if account == nil {
		return fmt.Errorf("locating Storage Account %q", id.StorageAccountName)
	}

	// Determine the file endpoint, so we can build a data plane ID
	endpoint, err := account.DataPlaneEndpoint(client.EndpointTypeFile)
	if err != nil {
		return fmt.Errorf("determining File endpoint: %v", err)
	}

	// Parse the file endpoint as a data plane account ID
	accountId, err := accounts.ParseAccountID(*endpoint, meta.(*clients.Client).Storage.StorageDomainSuffix)
	if err != nil {
		return fmt.Errorf("parsing Account ID: %v", err)
	}

	d.Set("url", shares.NewShareID(*accountId, id.ShareName).ID())

	return nil
}
