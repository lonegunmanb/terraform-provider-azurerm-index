package github.com/hashicorp/terraform-provider-azurerm/internal/services/containers
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerinstance/2023-05-01/containerinstance"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceContainerGroup() *pluginsdk.Resource {
	resource := &pluginsdk.Resource{
		Create: resourceContainerGroupCreate,
		Read:   resourceContainerGroupRead,
		Delete: resourceContainerGroupDelete,
		Update: resourceContainerGroupUpdate,
		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := containerinstance.ParseContainerGroupID(id)
			return err
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(60 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validation.StringIsNotEmpty,
			},

			"location": commonschema.Location(),

			"resource_group_name": commonschema.ResourceGroupName(),

			"ip_address_type": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				Default:  string(containerinstance.ContainerGroupIPAddressTypePublic),
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(containerinstance.ContainerGroupIPAddressTypePublic),
					string(containerinstance.ContainerGroupIPAddressTypePrivate),
					"None",
				}, false),
			},

			"os_type": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(containerinstance.OperatingSystemTypesWindows),
					string(containerinstance.OperatingSystemTypesLinux),
				}, false),
			},

			"image_registry_credential": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				ForceNew: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"server": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ForceNew:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"user_assigned_identity_id": {
							Type:         pluginsdk.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: commonids.ValidateUserAssignedIdentityID,
							Description:  "The User Assigned Identity to use for Container Registry access.",
						},

						"username": {
							Type:         pluginsdk.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"password": {
							Type:         pluginsdk.TypeString,
							Optional:     true,
							Sensitive:    true,
							ForceNew:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},
					},
				},
			},

			"identity": commonschema.SystemAssignedUserAssignedIdentityOptional(),

			"network_profile_id": {
				Type:       pluginsdk.TypeString,
				Optional:   true,
				Computed:   true,
				Deprecated: "the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead",
			},

			// lintignore:S018
			"subnet_ids": {
				Type:     pluginsdk.TypeSet,
				Optional: true,
				ForceNew: true,
				MaxItems: 1,
				Elem: &pluginsdk.Schema{
					Type:         pluginsdk.TypeString,
					ValidateFunc: commonids.ValidateSubnetID,
				},
				Set:           pluginsdk.HashString,
				ConflictsWith: []string{"dns_name_label"},
			},

			"zones": commonschema.ZonesMultipleOptionalForceNew(),

			"tags": commonschema.Tags(),

			"sku": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ForceNew:     true,
				Default:      string(containerinstance.ContainerGroupSkuStandard),
				ValidateFunc: validation.StringInSlice(containerinstance.PossibleValuesForContainerGroupSku(), false),
			},

			"restart_policy": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				ForceNew: true,
				Default:  string(containerinstance.ContainerGroupRestartPolicyAlways),
				ValidateFunc: validation.StringInSlice([]string{
					string(containerinstance.ContainerGroupRestartPolicyAlways),
					string(containerinstance.ContainerGroupRestartPolicyNever),
					string(containerinstance.ContainerGroupRestartPolicyOnFailure),
				}, false),
			},

			"dns_name_label": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				ForceNew: true,
			},

			"dns_name_label_reuse_policy": {
				Type:     pluginsdk.TypeString,
				ForceNew: true,
				Optional: true,
				Default:  string(containerinstance.DnsNameLabelReusePolicyUnsecure),
				ValidateFunc: validation.StringInSlice([]string{
					string(containerinstance.DnsNameLabelReusePolicyNoreuse),
					string(containerinstance.DnsNameLabelReusePolicyResourceGroupReuse),
					string(containerinstance.DnsNameLabelReusePolicySubscriptionReuse),
					string(containerinstance.DnsNameLabelReusePolicyTenantReuse),
					string(containerinstance.DnsNameLabelReusePolicyUnsecure),
				}, false),
			},

			"exposed_port": {
				Type:       pluginsdk.TypeSet,
				Optional:   true,
				Computed:   true,
				ForceNew:   true,
				ConfigMode: pluginsdk.SchemaConfigModeAttr,
				Set:        resourceContainerGroupPortsHash,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"port": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: validate.PortNumber,
						},

						"protocol": {
							Type:     pluginsdk.TypeString,
							Optional: true,
							ForceNew: true,
							Default:  string(containerinstance.ContainerGroupNetworkProtocolTCP),
							ValidateFunc: validation.StringInSlice([]string{
								string(containerinstance.ContainerGroupNetworkProtocolTCP),
								string(containerinstance.ContainerGroupNetworkProtocolUDP),
							}, false),
						},
					},
				},
			},

			"init_container": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				ForceNew: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"name": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ForceNew:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"image": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ForceNew:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"environment_variables": {
							Type:     pluginsdk.TypeMap,
							ForceNew: true,
							Optional: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
							},
						},

						"secure_environment_variables": {
							Type:      pluginsdk.TypeMap,
							Optional:  true,
							ForceNew:  true,
							Sensitive: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
							},
						},

						"commands": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Computed: true,
							ForceNew: true,
							Elem: &pluginsdk.Schema{
								Type:         pluginsdk.TypeString,
								ValidateFunc: validation.StringIsNotEmpty,
							},
						},

						"volume": containerVolumeSchema(),

						"security": containerSecurityContextSchema(),
					},
				},
			},
			"container": {
				Type:     pluginsdk.TypeList,
				Required: true,
				ForceNew: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"name": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ForceNew:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"image": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ForceNew:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},

						"cpu": {
							Type:     pluginsdk.TypeFloat,
							Required: true,
							ForceNew: true,
						},

						"memory": {
							Type:     pluginsdk.TypeFloat,
							Required: true,
							ForceNew: true,
						},

						"cpu_limit": {
							Type:         pluginsdk.TypeFloat,
							Optional:     true,
							ValidateFunc: validation.FloatAtLeast(0.0),
						},

						"memory_limit": {
							Type:         pluginsdk.TypeFloat,
							Optional:     true,
							ValidateFunc: validation.FloatAtLeast(0.0),
						},

						"ports": {
							Type:     pluginsdk.TypeSet,
							Optional: true,
							ForceNew: true,
							Set:      resourceContainerGroupPortsHash,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"port": {
										Type:         pluginsdk.TypeInt,
										Optional:     true,
										ForceNew:     true,
										ValidateFunc: validate.PortNumber,
									},

									"protocol": {
										Type:     pluginsdk.TypeString,
										Optional: true,
										ForceNew: true,
										Default:  string(containerinstance.ContainerGroupNetworkProtocolTCP),
										ValidateFunc: validation.StringInSlice([]string{
											string(containerinstance.ContainerGroupNetworkProtocolTCP),
											string(containerinstance.ContainerNetworkProtocolUDP),
										}, false),
									},
								},
							},
						},

						"environment_variables": {
							Type:     pluginsdk.TypeMap,
							ForceNew: true,
							Optional: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
							},
						},

						"secure_environment_variables": {
							Type:      pluginsdk.TypeMap,
							Optional:  true,
							ForceNew:  true,
							Sensitive: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
							},
						},

						"commands": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Computed: true,
							ForceNew: true,
							Elem: &pluginsdk.Schema{
								Type:         pluginsdk.TypeString,
								ValidateFunc: validation.StringIsNotEmpty,
							},
						},

						"volume": containerVolumeSchema(),

						"security": containerSecurityContextSchema(),

						"liveness_probe": SchemaContainerGroupProbe(),

						"readiness_probe": SchemaContainerGroupProbe(),
					},
				},
			},

			"diagnostics": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				ForceNew: true,
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"log_analytics": {
							Type:     pluginsdk.TypeList,
							Required: true,
							ForceNew: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"workspace_id": {
										Type:         pluginsdk.TypeString,
										Required:     true,
										ForceNew:     true,
										ValidateFunc: validation.IsUUID,
									},

									"workspace_key": {
										Type:         pluginsdk.TypeString,
										Required:     true,
										Sensitive:    true,
										ForceNew:     true,
										ValidateFunc: validation.StringIsNotEmpty,
									},

									"log_type": {
										Type:     pluginsdk.TypeString,
										Optional: true,
										ForceNew: true,
										ValidateFunc: validation.StringInSlice([]string{
											string(containerinstance.LogAnalyticsLogTypeContainerInsights),
											string(containerinstance.LogAnalyticsLogTypeContainerInstanceLogs),
										}, false),
									},

									"metadata": {
										Type:     pluginsdk.TypeMap,
										Optional: true,
										ForceNew: true,
										Elem: &pluginsdk.Schema{
											Type: pluginsdk.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},

			"ip_address": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"fqdn": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"dns_config": {
				Optional: true,
				MaxItems: 1,
				ForceNew: true,
				Type:     pluginsdk.TypeList,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"nameservers": {
							Type:     pluginsdk.TypeList,
							Required: true,
							ForceNew: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
							},
						},
						"search_domains": {
							Type:     pluginsdk.TypeSet,
							Optional: true,
							ForceNew: true,
							Elem: &pluginsdk.Schema{
								Type:         pluginsdk.TypeString,
								ValidateFunc: validation.StringIsNotEmpty,
							},
						},
						"options": {
							Type:     pluginsdk.TypeSet,
							Optional: true,
							ForceNew: true,
							Elem: &pluginsdk.Schema{
								Type:         pluginsdk.TypeString,
								ValidateFunc: validation.StringIsNotEmpty,
							},
						},
					},
				},
			},

			"key_vault_key_id": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: keyVaultValidate.NestedItemId,
			},

			"key_vault_user_assigned_identity_id": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ValidateFunc: commonids.ValidateUserAssignedIdentityID,
			},

			"priority": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: validation.StringInSlice(containerinstance.PossibleValuesForContainerGroupPriority(), false),
			},
		},
		CustomizeDiff: func(ctx context.Context, d *pluginsdk.ResourceDiff, i interface{}) error {
			if p := d.Get("priority").(string); p == string(containerinstance.ContainerGroupPrioritySpot) {
				if d.Get("ip_address_type").(string) != "None" {
					return fmt.Errorf("`ip_address_type` has to be `None` when `priority` is set to `Spot`")
				}
			}
			return nil
		},
	}

	return resource
}
