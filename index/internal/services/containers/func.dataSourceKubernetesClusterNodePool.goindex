package github.com/hashicorp/terraform-provider-azurerm/internal/services/containers
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerservice/2025-05-01/agentpools"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func dataSourceKubernetesClusterNodePool() *pluginsdk.Resource {
	dataSource := &pluginsdk.Resource{
		Read: dataSourceKubernetesClusterNodePoolRead,

		Timeouts: &pluginsdk.ResourceTimeout{
			Read: pluginsdk.DefaultTimeout(5 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ValidateFunc: validate.KubernetesAgentPoolName,
			},

			"kubernetes_cluster_name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ValidateFunc: validation.StringIsNotEmpty,
			},

			"resource_group_name": commonschema.ResourceGroupNameForDataSource(),

			"auto_scaling_enabled": {
				Type:     pluginsdk.TypeBool,
				Computed: true,
			},

			"eviction_policy": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"gpu_driver": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"max_count": {
				Type:     pluginsdk.TypeInt,
				Computed: true,
			},

			"max_pods": {
				Type:     pluginsdk.TypeInt,
				Computed: true,
			},

			"mode": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"min_count": {
				Type:     pluginsdk.TypeInt,
				Computed: true,
			},

			"node_count": {
				Type:     pluginsdk.TypeInt,
				Computed: true,
			},

			"node_labels": {
				Type:     pluginsdk.TypeMap,
				Computed: true,
				Elem: &pluginsdk.Schema{
					Type: pluginsdk.TypeString,
				},
			},

			"node_public_ip_enabled": {
				Type:     pluginsdk.TypeBool,
				Computed: true,
			},

			"node_public_ip_prefix_id": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"node_taints": {
				Type:     pluginsdk.TypeList,
				Computed: true,
				Elem: &pluginsdk.Schema{
					Type: pluginsdk.TypeString,
				},
			},

			"orchestrator_version": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"os_disk_size_gb": {
				Type:     pluginsdk.TypeInt,
				Computed: true,
			},

			"os_disk_type": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"os_type": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"priority": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"proximity_placement_group_id": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"spot_max_price": {
				Type:     pluginsdk.TypeFloat,
				Computed: true,
			},

			"tags": commonschema.TagsDataSource(),

			"upgrade_settings": upgradeSettingsForDataSourceSchema(),

			"vm_size": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"vnet_subnet_id": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"zones": commonschema.ZonesMultipleComputed(),
		},
	}

	return dataSource
}
