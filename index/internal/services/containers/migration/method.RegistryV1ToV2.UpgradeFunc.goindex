package github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/migration
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (RegistryV1ToV2) UpgradeFunc() pluginsdk.StateUpgraderFunc {
	return func(ctx context.Context, rawState map[string]interface{}, meta interface{}) (map[string]interface{}, error) {
		// Basic's been renamed Classic to allow for "ManagedBasic" ¯\_(ツ)_/¯
		rawState["sku"] = "Classic"

		storageAccountId := ""
		if v, ok := rawState["storage_account"]; ok {
			subscriptionId := meta.(*clients.Client).Account.SubscriptionId
			ctx, cancel := context.WithTimeout(meta.(*clients.Client).StopContext, time.Minute*5)
			defer cancel()

			raw := v.(*pluginsdk.Set).List()
			rawVals := raw[0].(map[string]interface{})
			storageAccountName := rawVals["name"].(string)

			account, err := meta.(*clients.Client).Storage.FindAccount(ctx, subscriptionId, storageAccountName)
			if err != nil {
				return nil, fmt.Errorf("finding Storage Account %q: %+v", storageAccountName, err)
			}

			storageAccountId = account.StorageAccountId.ID()
		}

		if storageAccountId == "" {
			return rawState, fmt.Errorf("unable to determine storage account ID")
		}

		return rawState, nil
	}
}
