package github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/migration
import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (k KubernetesClusterV1ToV2) UpgradeFunc() pluginsdk.StateUpgraderFunc {
	// since `server_app_secret` isn't returned from the AKS API we need to populate that value in the new `azure_active_directory_role_based_access_control` block
	return func(ctx context.Context, rawState map[string]interface{}, meta interface{}) (map[string]interface{}, error) {
		secretRaw := ""
		if rbac, ok := rawState["role_based_access_control"]; ok {
			rbacRaw := rbac.([]interface{})[0].(map[string]interface{})
			if aad, ok := rbacRaw["azure_active_directory"]; ok {
				aadRaw := aad.([]interface{})
				if len(aadRaw) == 0 {
					return rawState, nil
				}
				aadMap := aadRaw[0].(map[string]interface{})
				if secret, ok := aadMap["server_app_secret"]; ok {
					log.Printf("[DEBUG] found value for `role_based_access_control.0.azure_active_directory.0.server_app_secret`")
					secretRaw = secret.(string)
				}
			}
		}

		if secretRaw != "" {
			log.Printf("[DEBUG] copying value to `azure_active_directory_role_based_access_control.0.server_app_secret`")
			rawState["azure_active_directory_role_based_access_control"] = []interface{}{
				map[string]interface{}{
					"server_app_secret": secretRaw,
				},
			}
		}

		return rawState, nil
	}
}
