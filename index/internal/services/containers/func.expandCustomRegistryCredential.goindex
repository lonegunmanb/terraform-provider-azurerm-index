package github.com/hashicorp/terraform-provider-azurerm/internal/services/containers
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerregistry/2019-06-01-preview/tasks"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerregistry/2023-11-01-preview/registries"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/validate"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandCustomRegistryCredential(input []CustomRegistryCredential) map[string]tasks.CustomRegistryCredentials {
	if len(input) == 0 {
		return nil
	}

	out := map[string]tasks.CustomRegistryCredentials{}
	for _, credential := range input {
		cred := tasks.CustomRegistryCredentials{}

		if credential.UserName != "" {
			usernameType := tasks.SecretObjectTypeOpaque
			if _, err := keyVaultParse.ParseNestedItemID(credential.UserName); err == nil {
				usernameType = tasks.SecretObjectTypeVaultsecret
			}
			cred.UserName = &tasks.SecretObject{
				Value: pointer.To(credential.UserName),
				Type:  &usernameType,
			}
		}
		if credential.Password != "" {
			passwordType := tasks.SecretObjectTypeOpaque
			if _, err := keyVaultParse.ParseNestedItemID(credential.Password); err == nil {
				passwordType = tasks.SecretObjectTypeVaultsecret
			}
			cred.Password = &tasks.SecretObject{
				Value: pointer.To(credential.Password),
				Type:  &passwordType,
			}
		}
		if credential.Identity != "" {
			cred.Identity = pointer.To(credential.Identity)
		}
		out[credential.LoginServer] = cred
	}
	return out
}
