package github.com/hashicorp/terraform-provider-azurerm/internal/services/containers
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/kubernetesconfiguration/2023-05-01/fluxconfiguration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/validate"
	storageValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/giovanni/storage/2023-11-03/blob/accounts"
	"github.com/jackofallops/giovanni/storage/2023-11-03/blob/containers"
)
func flattenServicePrincipalDefinitionModel(input *fluxconfiguration.ServicePrincipalDefinition, servicePrincipal []ServicePrincipalDefinitionModel) []ServicePrincipalDefinitionModel {
	outputList := make([]ServicePrincipalDefinitionModel, 0)
	if input == nil {
		return outputList
	}
	output := ServicePrincipalDefinitionModel{
		ClientCertificateSendChain: pointer.From(input.ClientCertificateSendChain),
		ClientId:                   pointer.From(input.ClientId),
		TenantId:                   pointer.From(input.TenantId),
	}

	if len(servicePrincipal) > 0 {
		output.ClientCertificate = servicePrincipal[0].ClientCertificate
		output.ClientCertificatePassword = servicePrincipal[0].ClientCertificatePassword
		output.ClientSecret = servicePrincipal[0].ClientSecret
	}

	return append(outputList, output)
}
