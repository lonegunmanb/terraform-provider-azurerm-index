package github.com/hashicorp/terraform-provider-azurerm/internal/services/containers
import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/kubernetesconfiguration/2023-05-01/fluxconfiguration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/validate"
	storageValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/giovanni/storage/2023-11-03/blob/accounts"
	"github.com/jackofallops/giovanni/storage/2023-11-03/blob/containers"
)
func flattenAzureBlobDefinitionModel(input *fluxconfiguration.AzureBlobDefinition, azureBlob []AzureBlobDefinitionModel, storageDomainSuffix string) ([]AzureBlobDefinitionModel, error) {
	outputList := make([]AzureBlobDefinitionModel, 0)
	if input == nil {
		return outputList, nil
	}

	accountId, err := accounts.ParseAccountID(pointer.From(input.Url), storageDomainSuffix)
	if err != nil {
		return nil, fmt.Errorf("parsing account %q: %+v", pointer.From(input.Url), err)
	}

	id := containers.NewContainerID(*accountId, pointer.From(input.ContainerName))

	output := AzureBlobDefinitionModel{
		ContainerID:           id.ID(),
		LocalAuthRef:          pointer.From(input.LocalAuthRef),
		ManagedIdentity:       flattenManagedIdentityDefinitionModel(input.ManagedIdentity),
		SyncIntervalInSeconds: pointer.From(input.SyncIntervalInSeconds),
		TimeoutInSeconds:      pointer.From(input.TimeoutInSeconds),
	}

	var servicePrincipal []ServicePrincipalDefinitionModel
	if len(azureBlob) > 0 {
		output.AccountKey = azureBlob[0].AccountKey
		output.SasToken = azureBlob[0].SasToken
		servicePrincipal = azureBlob[0].ServicePrincipal
	}

	output.ServicePrincipal = flattenServicePrincipalDefinitionModel(input.ServicePrincipal, servicePrincipal)

	return append(outputList, output), nil
}
