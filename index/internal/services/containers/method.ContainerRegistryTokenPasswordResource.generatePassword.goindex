package github.com/hashicorp/terraform-provider-azurerm/internal/services/containers
import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	containterregistry_v2021_08_01_preview "github.com/hashicorp/go-azure-sdk/resource-manager/containerregistry/2023-11-01-preview"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerregistry/2023-11-01-preview/registries"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerregistry/2023-11-01-preview/tokens"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/client"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/containers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r ContainerRegistryTokenPasswordResource) generatePassword(ctx context.Context, clients client.Client, id tokens.TokenId, passwords []tokens.TokenPassword) ([]tokens.TokenPassword, error) {
	var genPasswords []tokens.TokenPassword

	existingPasswords, _, err := r.readPassword(ctx, clients.ContainerRegistryClient, id)
	if err != nil {
		return nil, fmt.Errorf("reading existing passwords: %+v", err)
	}

	// The token password API has the following behavior:
	// - To remove password, one uses the PATCH of the ACR token endpoint
	// - To add password, one uses the POST of the ACR's generate credential endpoint
	// Hence we'd have to check whether there is any password to clean up before we try to update/create passwords.
	if len(existingPasswords) > len(passwords) {
		param := tokens.TokenUpdateParameters{
			Properties: &tokens.TokenUpdateProperties{
				Credentials: &tokens.TokenCredentialsProperties{
					Passwords: &passwords,
				},
			},
		}
		if err := clients.ContainerRegistryClient.Tokens.UpdateThenPoll(ctx, id, param); err != nil {
			return nil, fmt.Errorf("deleting %s: %+v", id, err)
		}
	}

	// Iterate and generate password planned to be created.
PasswordGenLoop:
	for idx, password := range passwords {
		// For each password specified in the config, check whether it is changed compared to its remote state (i.e. is the `expiry` changed).
		// If nothing is changed, we should skip it - rather than generating a new password.
		for _, pwd := range existingPasswords {
			if pwd.Name == password.Name {
				if (pwd.Expiry == nil) != (password.Expiry == nil) {
					break
				}

				pwdExpiryTime, err := pwd.GetExpiryAsTime()
				if err != nil {
					return nil, fmt.Errorf("unable to get expiry time for %s: %+v", string(*pwd.Name), err)
				}
				passwordExpiryTime, err := password.GetExpiryAsTime()
				if err != nil {
					return nil, fmt.Errorf("unable to get expiry time for %s: %+v", string(*password.Name), err)
				}
				if pwd.Expiry == nil || pwdExpiryTime.Equal(*passwordExpiryTime) {
					genPasswords = append(genPasswords, password)
					continue PasswordGenLoop
				}
				break
			}
		}

		param := registries.GenerateCredentialsParameters{
			TokenId: utils.String(id.ID()),
			Expiry:  password.Expiry,
			Name:    (*registries.TokenPasswordName)(password.Name),
		}

		registryId := registries.NewRegistryID(id.SubscriptionId, id.ResourceGroupName, id.RegistryName)

		result, err := clients.ContainerRegistryClient.Registries.GenerateCredentials(ctx, registryId, param)
		if err != nil {
			return nil, fmt.Errorf("generating password credential %s: %v", string(*password.Name), err)
		}

		if err := result.Poller.PollUntilDone(ctx); err != nil {
			return nil, fmt.Errorf("polling generation of password credential %s: %v", string(*password.Name), err)
		}

		var res registries.GenerateCredentialsResult
		if err := json.NewDecoder(result.HttpResponse.Body).Decode(&res); err != nil {
			return nil, fmt.Errorf("decoding generated password credentials: %v", err)
		}

		value := ""
		if res.Passwords != nil && len(*res.Passwords) > idx && (*res.Passwords)[idx].Value != nil {
			value = *(*res.Passwords)[idx].Value
		}

		genPasswords = append(genPasswords, tokens.TokenPassword{
			Expiry: password.Expiry,
			Name:   password.Name,
			Value:  &value,
		})
	}
	return genPasswords, nil
}
