package github.com/hashicorp/terraform-provider-azurerm/internal/services/containers
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerinstance/2023-05-01/containerinstance"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	keyVaultParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/parse"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceContainerGroupCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Containers.ContainerInstanceClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := containerinstance.NewContainerGroupID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))

	existing, err := client.ContainerGroupsGet(ctx, id)
	if err != nil {
		if !response.WasNotFound(existing.HttpResponse) {
			return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
		}
	}

	if !response.WasNotFound(existing.HttpResponse) {
		return tf.ImportAsExistsError("azurerm_container_group", id.ID())
	}

	location := location.Normalize(d.Get("location").(string))
	OSType := d.Get("os_type").(string)
	IPAddressType := d.Get("ip_address_type").(string)
	restartPolicy := containerinstance.ContainerGroupRestartPolicy(d.Get("restart_policy").(string))
	diagnosticsRaw := d.Get("diagnostics").([]interface{})
	diagnostics := expandContainerGroupDiagnostics(diagnosticsRaw)
	dnsConfig := d.Get("dns_config").([]interface{})
	addedEmptyDirs := map[string]bool{}
	subnets, err := expandContainerGroupSubnets(d.Get("subnet_ids").(*pluginsdk.Set).List())
	if err != nil {
		return err
	}

	zones := zones.ExpandUntyped(d.Get("zones").(*pluginsdk.Set).List())
	initContainers, initContainerVolumes, err := expandContainerGroupInitContainers(d, addedEmptyDirs)
	if err != nil {
		return err
	}

	containers, containerGroupPorts, containerVolumes, err := expandContainerGroupContainers(d, addedEmptyDirs)
	if err != nil {
		return err
	}
	var containerGroupVolumes []containerinstance.Volume
	if initContainerVolumes != nil {
		containerGroupVolumes = initContainerVolumes
	}
	if containerGroupVolumes != nil {
		containerGroupVolumes = append(containerGroupVolumes, containerVolumes...)
	}

	containerGroup := containerinstance.ContainerGroup{
		Name:     pointer.To(id.ContainerGroupName),
		Location: &location,
		Tags:     tags.Expand(d.Get("tags").(map[string]interface{})),
		Properties: containerinstance.ContainerGroupPropertiesProperties{
			Sku:                      pointer.To(containerinstance.ContainerGroupSku(d.Get("sku").(string))),
			InitContainers:           initContainers,
			Containers:               containers,
			Diagnostics:              diagnostics,
			RestartPolicy:            &restartPolicy,
			OsType:                   containerinstance.OperatingSystemTypes(OSType),
			Volumes:                  &containerGroupVolumes,
			ImageRegistryCredentials: expandContainerImageRegistryCredentials(d),
			DnsConfig:                expandContainerGroupDnsConfig(dnsConfig),
			SubnetIds:                subnets,
		},
		Zones: &zones,
	}

	expandedIdentity, err := identity.ExpandSystemAndUserAssignedMap(d.Get("identity").([]interface{}))
	if err != nil {
		return fmt.Errorf("expanding `identity`: %+v", err)
	}
	containerGroup.Identity = expandedIdentity

	if IPAddressType != "None" {
		containerGroup.Properties.IPAddress = &containerinstance.IPAddress{
			Ports: containerGroupPorts,
			Type:  containerinstance.ContainerGroupIPAddressType(IPAddressType),
		}

		if dnsNameLabel := d.Get("dns_name_label").(string); dnsNameLabel != "" {
			containerGroup.Properties.IPAddress.DnsNameLabel = &dnsNameLabel
		}
		if dnsNameLabelReusePolicy := d.Get("dns_name_label_reuse_policy").(string); dnsNameLabelReusePolicy != "" {
			containerGroup.Properties.IPAddress.AutoGeneratedDomainNameLabelScope = (*containerinstance.DnsNameLabelReusePolicy)(&dnsNameLabelReusePolicy)
		}
	}

	if keyVaultKeyId := d.Get("key_vault_key_id").(string); keyVaultKeyId != "" {
		keyId, err := keyVaultParse.ParseOptionallyVersionedNestedItemID(keyVaultKeyId)
		if err != nil {
			return fmt.Errorf("parsing Key Vault Key ID: %+v", err)
		}
		containerGroup.Properties.EncryptionProperties = &containerinstance.EncryptionProperties{
			VaultBaseURL: keyId.KeyVaultBaseUrl,
			KeyName:      keyId.Name,
			KeyVersion:   keyId.Version,
		}

		if keyVaultUAI := d.Get("key_vault_user_assigned_identity_id").(string); keyVaultUAI != "" {
			containerGroup.Properties.EncryptionProperties.Identity = &keyVaultUAI
		}
	}

	if priority := d.Get("priority").(string); priority != "" {
		containerGroup.Properties.Priority = pointer.To(containerinstance.ContainerGroupPriority(priority))
	}

	// Avoid parallel provisioning if "subnet_ids" are given.
	if subnets != nil && len(*subnets) != 0 {
		for _, item := range *subnets {
			subnet, err := commonids.ParseSubnetID(item.Id)
			if err != nil {
				return fmt.Errorf(`parsing subnet id %q: %v`, item.Id, err)
			}

			locks.ByID(subnet.ID())
			defer locks.UnlockByID(subnet.ID())
		}
	}

	if err := client.ContainerGroupsCreateOrUpdateThenPoll(ctx, id, containerGroup); err != nil {
		return fmt.Errorf("creating %s: %+v", id, err)
	}

	d.SetId(id.ID())
	return resourceContainerGroupRead(d, meta)
}
