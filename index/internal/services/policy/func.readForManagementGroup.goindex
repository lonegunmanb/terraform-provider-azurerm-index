package github.com/hashicorp/terraform-provider-azurerm/internal/services/policy
import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2025-01-01/policysetdefinitions"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	mgmtGrpParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func readForManagementGroup(ctx context.Context, client *policysetdefinitions.PolicySetDefinitionsClient, d *pluginsdk.ResourceData, managementGroupIdString string) error {
	resourceId, err := parse.PolicySetDefinitionID(d.Id())
	if err != nil {
		return err
	}

	managementGroupId, err := mgmtGrpParse.ManagementGroupID(managementGroupIdString)
	if err != nil {
		return err
	}

	id := policysetdefinitions.NewProviders2PolicySetDefinitionID(managementGroupId.Name, resourceId.Name)

	resp, model, err := getPolicySetDefinitionByID(ctx, client, id)
	if err != nil {
		if response.WasNotFound(resp) {
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	if model != nil {
		d.Set("name", model.Name)
		d.Set("management_group_id", managementGroupIdString)

		if props := model.Properties; props != nil {
			d.Set("policy_type", string(pointer.From(props.PolicyType)))
			d.Set("display_name", props.DisplayName)
			d.Set("description", props.Description)

			if iMetadata := props.Metadata; iMetadata != nil {
				metadata := *iMetadata
				if v, ok := metadata.(map[string]interface{}); ok {
					metadataStr, err := pluginsdk.FlattenJsonToString(v)
					if err != nil {
						return fmt.Errorf("flattening `metadata`: %+v", err)
					}
					d.Set("metadata", metadataStr)
				}
			}

			if parameters := props.Parameters; parameters != nil {
				parametersStr, err := flattenParameterDefinitionsValue(parameters)
				if err != nil {
					return fmt.Errorf("flattening `parameters`: %+v", err)
				}

				d.Set("parameters", parametersStr)
			}

			references, err := flattenAzureRMPolicySetDefinitionPolicyDefinitions(props.PolicyDefinitions)
			if err != nil {
				return fmt.Errorf("flattening `policy_definition_reference`: %+v", err)
			}
			if err := d.Set("policy_definition_reference", references); err != nil {
				return fmt.Errorf("setting `policy_definition_reference`: %+v", err)
			}

			if err := d.Set("policy_definition_group", flattenAzureRMPolicySetDefinitionPolicyGroups(props.PolicyDefinitionGroups)); err != nil {
				return fmt.Errorf("setting `policy_definition_group`: %+v", err)
			}
		}
	}

	return nil
}
