package github.com/hashicorp/terraform-provider-azurerm/internal/services/policy
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/policyinsights/2021-10-01/remediations"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func setRemediationProperties(d *pluginsdk.ResourceData, prop *remediations.RemediationProperties) error {
	if prop == nil {
		return nil
	}
	locations := []interface{}{}
	if filters := prop.Filters; filters != nil {
		locations = utils.FlattenStringSlice(filters.Locations)
	}
	if err := d.Set("location_filters", locations); err != nil {
		return fmt.Errorf("setting `location_filters`: %+v", err)
	}

	d.Set("policy_assignment_id", prop.PolicyAssignmentId)
	d.Set("policy_definition_reference_id", prop.PolicyDefinitionReferenceId)
	d.Set("resource_discovery_mode", pointer.From((*string)(prop.ResourceDiscoveryMode)))

	d.Set("resource_count", prop.ResourceCount)
	d.Set("parallel_deployments", prop.ParallelDeployments)
	if prop.FailureThreshold != nil {
		d.Set("failure_percentage", prop.FailureThreshold.Percentage)
	}
	return nil
}
