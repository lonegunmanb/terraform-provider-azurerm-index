package github.com/hashicorp/terraform-provider-azurerm/internal/services/policy
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/resources/mgmt/2021-06-01-preview/policy" // nolint: staticcheck
	"github.com/Azure/go-autorest/autorest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	mgmtGrpParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceArmPolicySetDefinitionUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Policy.SetDefinitionsClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.PolicySetDefinitionID(d.Id())
	if err != nil {
		return err
	}

	managementGroupName := ""
	var managementGroupId mgmtGrpParse.ManagementGroupId
	if scopeId, ok := id.PolicyScopeId.(parse.ScopeAtManagementGroup); ok {
		managementGroupId = mgmtGrpParse.NewManagementGroupId(scopeId.ManagementGroupName)
		managementGroupName = managementGroupId.Name
	}

	// retrieve
	existing, err := getPolicySetDefinitionByName(ctx, client, id.Name, managementGroupName)
	if err != nil {
		return fmt.Errorf("retrieving Policy Set Definition %q (Scope %q): %+v", id.Name, id.ScopeId(), err)
	}
	if existing.SetDefinitionProperties == nil {
		return fmt.Errorf("retrieving Policy Set Definition %q (Scope %q): `properties` was nil", id.Name, id.ScopeId())
	}

	if d.HasChange("policy_type") {
		existing.SetDefinitionProperties.PolicyType = policy.Type(d.Get("policy_type").(string))
	}

	if d.HasChange("display_name") {
		existing.SetDefinitionProperties.DisplayName = utils.String(d.Get("display_name").(string))
	}

	if d.HasChange("description") {
		existing.SetDefinitionProperties.Description = utils.String(d.Get("description").(string))
	}

	if d.HasChange("metadata") {
		metaDataString := d.Get("metadata").(string)
		if metaDataString != "" {
			metaData, err := pluginsdk.ExpandJsonFromString(metaDataString)
			if err != nil {
				return fmt.Errorf("expanding JSON for `metadata`: %+v", err)
			}
			existing.SetDefinitionProperties.Metadata = metaData
		} else {
			existing.SetDefinitionProperties.Metadata = nil
		}
	}

	if d.HasChange("parameters") {
		parametersString := d.Get("parameters").(string)
		if parametersString != "" {
			parameters, err := expandParameterDefinitionsValueFromString(parametersString)
			if err != nil {
				return fmt.Errorf("expanding JSON for `parameters`: %+v", err)
			}
			existing.SetDefinitionProperties.Parameters = parameters
		} else {
			existing.SetDefinitionProperties.Parameters = nil
		}
	}

	if d.HasChange("policy_definition_group") {
		existing.SetDefinitionProperties.PolicyDefinitionGroups = expandAzureRMPolicySetDefinitionPolicyGroups(d.Get("policy_definition_group").(*pluginsdk.Set).List())
	}

	if d.HasChange("policy_definition_reference") {
		definitions, err := expandAzureRMPolicySetDefinitionPolicyDefinitionsUpdate(d)
		if err != nil {
			return fmt.Errorf("expanding `policy_definition_reference`: %+v", err)
		}
		existing.SetDefinitionProperties.PolicyDefinitions = definitions
	}

	if managementGroupName == "" {
		_, err = client.CreateOrUpdate(ctx, id.Name, existing)
	} else {
		_, err = client.CreateOrUpdateAtManagementGroup(ctx, id.Name, existing, managementGroupName)
	}

	if err != nil {
		return fmt.Errorf("updating Policy Set Definition %q: %+v", id.Name, err)
	}

	var resp policy.SetDefinition
	resp, err = getPolicySetDefinitionByName(ctx, client, id.Name, managementGroupName)
	if err != nil {
		return fmt.Errorf("retrieving Policy Set Definition %q: %+v", id.Name, err)
	}

	id, err = parse.PolicySetDefinitionID(*resp.ID)
	if err != nil {
		return fmt.Errorf("parsing Policy Set Definition %q: %+v", *resp.ID, err)
	}

	d.SetId(id.Id)

	return resourceArmPolicySetDefinitionRead(d, meta)
}
