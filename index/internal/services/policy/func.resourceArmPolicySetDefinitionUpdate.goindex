package github.com/hashicorp/terraform-provider-azurerm/internal/services/policy
import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2025-01-01/policysetdefinitions"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	mgmtGrpParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceArmPolicySetDefinitionUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Policy.PolicySetDefinitionsClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	resourceId, err := parse.PolicySetDefinitionID(d.Id())
	if err != nil {
		return err
	}

	managementGroupName := ""
	var managementGroupId mgmtGrpParse.ManagementGroupId
	if v, ok := resourceId.PolicyScopeId.(parse.ScopeAtManagementGroup); ok {
		managementGroupId = mgmtGrpParse.NewManagementGroupId(v.ManagementGroupName)
		managementGroupName = managementGroupId.Name
	}

	if managementGroupName != "" {
		return updateForManagementGroup(ctx, client, d, meta, managementGroupId.ID())
	}

	id := policysetdefinitions.NewProviderPolicySetDefinitionID(subscriptionId, resourceId.Name)

	_, model, err := getPolicySetDefinitionByID(ctx, client, id)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	if model == nil {
		return fmt.Errorf("retrieving %s: `model` was nil", id)
	}

	if model.Properties == nil {
		return fmt.Errorf("retrieving %s: `properties` was nil", id)
	}
	props := model.Properties

	if d.HasChange("policy_type") {
		props.PolicyType = pointer.To(policysetdefinitions.PolicyType(d.Get("policy_type").(string)))
	}

	if d.HasChange("display_name") {
		props.DisplayName = pointer.To(d.Get("display_name").(string))
	}

	if d.HasChange("description") {
		props.Description = pointer.To(d.Get("description").(string))
	}

	if d.HasChange("metadata") {
		metaDataString := d.Get("metadata").(string)
		if metaDataString != "" {
			metaData, err := pluginsdk.ExpandJsonFromString(metaDataString)
			if err != nil {
				return fmt.Errorf("expanding JSON for `metadata`: %+v", err)
			}

			var iMetadata interface{} = metaData

			props.Metadata = &iMetadata
		} else {
			props.Metadata = nil
		}
	}

	if d.HasChange("parameters") {
		parametersString := d.Get("parameters").(string)
		if parametersString != "" {
			parameters, err := expandParameterDefinitionsValue(parametersString)
			if err != nil {
				return fmt.Errorf("expanding JSON for `parameters`: %+v", err)
			}
			props.Parameters = parameters
		} else {
			props.Parameters = nil
		}
	}

	if d.HasChange("policy_definition_group") {
		props.PolicyDefinitionGroups = expandAzureRMPolicySetDefinitionPolicyGroups(d.Get("policy_definition_group").(*pluginsdk.Set).List())
	}

	if d.HasChange("policy_definition_reference") {
		definitions, err := expandAzureRMPolicySetDefinitionPolicyDefinitions(d.Get("policy_definition_reference").([]interface{}), d)
		if err != nil {
			return fmt.Errorf("expanding `policy_definition_reference`: %+v", err)
		}
		props.PolicyDefinitions = definitions
	}

	if _, err = client.CreateOrUpdate(ctx, id, *model); err != nil {
		return fmt.Errorf("updating %s: %+v", id, err)
	}

	return resourceArmPolicySetDefinitionRead(d, meta)
}
