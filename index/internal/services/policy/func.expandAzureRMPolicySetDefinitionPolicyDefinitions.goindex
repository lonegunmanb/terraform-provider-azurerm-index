package github.com/hashicorp/terraform-provider-azurerm/internal/services/policy
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/resources/mgmt/2021-06-01-preview/policy" // nolint: staticcheck
	"github.com/Azure/go-autorest/autorest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	mgmtGrpParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandAzureRMPolicySetDefinitionPolicyDefinitions(input []interface{}) (*[]policy.DefinitionReference, error) {
	result := make([]policy.DefinitionReference, 0)

	for _, item := range input {
		v := item.(map[string]interface{})

		var parameters map[string]*policy.ParameterValuesValue
		if p, ok := v["parameter_values"].(string); ok && p != "" {
			parameters = make(map[string]*policy.ParameterValuesValue)
			if err := json.Unmarshal([]byte(p), &parameters); err != nil {
				return nil, fmt.Errorf("unmarshalling `parameter_values`: %+v", err)
			}
		}
		if p, ok := v["parameters"].(map[string]interface{}); ok {
			if len(parameters) > 0 && len(p) > 0 {
				return nil, fmt.Errorf("cannot set both `parameters` and `parameter_values`")
			}
			parameters = make(map[string]*policy.ParameterValuesValue)
			for k, value := range p {
				parameters[k] = &policy.ParameterValuesValue{
					Value: value,
				}
			}
		}

		result = append(result, policy.DefinitionReference{
			PolicyDefinitionID:          utils.String(v["policy_definition_id"].(string)),
			Parameters:                  parameters,
			PolicyDefinitionReferenceID: utils.String(v["reference_id"].(string)),
			GroupNames:                  utils.ExpandStringSlice(v["policy_group_names"].(*pluginsdk.Set).List()),
		})
	}

	return &result, nil
}
