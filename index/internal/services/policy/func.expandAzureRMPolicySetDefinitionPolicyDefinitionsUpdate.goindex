package github.com/hashicorp/terraform-provider-azurerm/internal/services/policy
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/resources/mgmt/2021-06-01-preview/policy" // nolint: staticcheck
	"github.com/Azure/go-autorest/autorest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	mgmtGrpParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandAzureRMPolicySetDefinitionPolicyDefinitionsUpdate(d *pluginsdk.ResourceData) (*[]policy.DefinitionReference, error) {
	result := make([]policy.DefinitionReference, 0)
	input := d.Get("policy_definition_reference").([]interface{})

	for i := range input {
		if d.HasChange(fmt.Sprintf("policy_definition_reference.%d.parameter_values", i)) && d.HasChange(fmt.Sprintf("policy_definition_reference.%d.parameters", i)) {
			return nil, fmt.Errorf("cannot set both `parameters` and `parameter_values`")
		}
		parameters := make(map[string]*policy.ParameterValuesValue)
		if d.HasChange(fmt.Sprintf("policy_definition_reference.%d.parameters", i)) {
			// there is change in `parameters` - the user is will to use this attribute as parameter values
			log.Printf("[DEBUG] updating %s", fmt.Sprintf("policy_definition_reference.%d.parameters", i))
			p := d.Get(fmt.Sprintf("policy_definition_reference.%d.parameters", i)).(map[string]interface{})
			for k, v := range p {
				parameters[k] = &policy.ParameterValuesValue{
					Value: v,
				}
			}
		} else {
			// in this case, it is either parameter_values updated or no update on both, we took the value in `parameter_values` as the final value
			log.Printf("[DEBUG] updating %s", fmt.Sprintf("policy_definition_reference.%d.parameter_values", i))
			if p, ok := d.Get(fmt.Sprintf("policy_definition_reference.%d.parameter_values", i)).(string); ok && p != "" {
				if err := json.Unmarshal([]byte(p), &parameters); err != nil {
					return nil, fmt.Errorf("unmarshalling `parameter_values`: %+v", err)
				}
			}
		}

		result = append(result, policy.DefinitionReference{
			PolicyDefinitionID:          utils.String(d.Get(fmt.Sprintf("policy_definition_reference.%d.policy_definition_id", i)).(string)),
			Parameters:                  parameters,
			PolicyDefinitionReferenceID: utils.String(d.Get(fmt.Sprintf("policy_definition_reference.%d.reference_id", i)).(string)),
			GroupNames:                  utils.ExpandStringSlice(d.Get(fmt.Sprintf("policy_definition_reference.%d.policy_group_names", i)).(*schema.Set).List()),
		})
	}

	return &result, nil
}
