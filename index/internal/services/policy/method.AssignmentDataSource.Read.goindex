package github.com/hashicorp/terraform-provider-azurerm/internal/services/policy
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	assignments "github.com/hashicorp/go-azure-sdk/resource-manager/resources/2022-06-01/policyassignments"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (AssignmentDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Policy.AssignmentsClient

			var plan AssignmentDataSourceModel
			if err := metadata.Decode(&plan); err != nil {
				return fmt.Errorf("decoding %+v", err)
			}

			id := assignments.NewScopedPolicyAssignmentID(plan.ScopeId, plan.Name)
			resp, err := client.Get(ctx, id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return fmt.Errorf("%s was not found", id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}
			respModel := resp.Model
			if respModel == nil {
				return fmt.Errorf("reading a nil model")
			}

			model := AssignmentDataSourceModel{
				Name:     id.PolicyAssignmentName,
				ScopeId:  id.Scope,
				Location: location.NormalizeNilable(respModel.Location),
			}

			if err = model.flattenIdentity(respModel.Identity); err != nil {
				return fmt.Errorf("flatten `identity`: %v", err)
			}

			if props := respModel.Properties; props != nil {
				if v := props.Description; v != nil {
					model.Description = *v
				}
				if v := props.DisplayName; v != nil {
					model.DisplayName = *v
				}
				if mode := props.EnforcementMode; mode != nil {
					model.Enforce = *mode == assignments.EnforcementModeDefault
				}
				model.Metadata = flattenJSON(pointer.From(props.Metadata))
				if v := props.NotScopes; v != nil {
					model.NotScopes = *v
				}
				model.flattenNonComplianceMessages(props.NonComplianceMessages)
				if err := model.flattenParameter(props.Parameters); err != nil {
					return fmt.Errorf("flatten `parameters`: %v", err)
				}
				if v := props.PolicyDefinitionId; v != nil {
					model.PolicyDefinitionId = *v
				}
			}

			if err := metadata.Encode(&model); err != nil {
				return fmt.Errorf("encoding %s: %+v", id, err)
			}

			metadata.SetID(id)

			return nil
		},
	}
}
