package github.com/hashicorp/terraform-provider-azurerm/internal/services/policy
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/resources/mgmt/2021-06-01-preview/policy" // nolint: staticcheck
	"github.com/Azure/go-autorest/autorest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	mgmtGrpParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandAzureRMPolicySetDefinitionPolicyGroups(input []interface{}) *[]policy.DefinitionGroup {
	result := make([]policy.DefinitionGroup, 0)

	for _, item := range input {
		v := item.(map[string]interface{})
		group := policy.DefinitionGroup{}
		if name := v["name"].(string); name != "" {
			group.Name = utils.String(name)
		}
		if displayName := v["display_name"].(string); displayName != "" {
			group.DisplayName = utils.String(displayName)
		}
		if category := v["category"].(string); category != "" {
			group.Category = utils.String(category)
		}
		if description := v["description"].(string); description != "" {
			group.Description = utils.String(description)
		}
		if metadataID := v["additional_metadata_resource_id"].(string); metadataID != "" {
			group.AdditionalMetadataID = utils.String(metadataID)
		}
		result = append(result, group)
	}

	return &result
}
