package github.com/hashicorp/terraform-provider-azurerm/internal/services/policy
import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2025-01-01/policysetdefinitions"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	mgmtGrpParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/managementgroup/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/policy/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandAzureRMPolicySetDefinitionPolicyGroups(input []interface{}) *[]policysetdefinitions.PolicyDefinitionGroup {
	result := make([]policysetdefinitions.PolicyDefinitionGroup, 0)

	for _, item := range input {
		v := item.(map[string]interface{})
		group := policysetdefinitions.PolicyDefinitionGroup{}
		if name := v["name"].(string); name != "" {
			group.Name = name
		}
		if displayName := v["display_name"].(string); displayName != "" {
			group.DisplayName = pointer.To(displayName)
		}
		if category := v["category"].(string); category != "" {
			group.Category = pointer.To(category)
		}
		if description := v["description"].(string); description != "" {
			group.Description = pointer.To(description)
		}
		if metadataID := v["additional_metadata_resource_id"].(string); metadataID != "" {
			group.AdditionalMetadataId = pointer.To(metadataID)
		}
		result = append(result, group)
	}

	return &result
}
