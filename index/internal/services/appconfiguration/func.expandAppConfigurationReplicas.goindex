package github.com/hashicorp/terraform-provider-azurerm/internal/services/appconfiguration
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appconfiguration/2024-05-01/configurationstores"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appconfiguration/2024-05-01/deletedconfigurationstores"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appconfiguration/2024-05-01/operations"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appconfiguration/2024-05-01/replicas"
	"github.com/hashicorp/go-azure-sdk/sdk/client"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/appconfiguration/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func expandAppConfigurationReplicas(input []interface{}, configurationStoreName, configurationStoreLocation string) (*[]replicas.Replica, error) {
	result := make([]replicas.Replica, 0)

	// check if there are duplicated replica names or locations
	// location cannot be same as original configuration store and other replicas
	locationSet := make(map[string]string, 0)
	replicaNameSet := make(map[string]struct{}, 0)

	for _, v := range input {
		replica := v.(map[string]interface{})
		replicaName := replica["name"].(string)
		replicaLocation := location.Normalize(replica["location"].(string))
		if strings.EqualFold(replicaLocation, configurationStoreLocation) {
			return nil, fmt.Errorf("location (%q) of replica %q is duplicated with original configuration store %q", replicaLocation, replicaName, configurationStoreName)
		}

		if name, ok := locationSet[replicaLocation]; ok {
			return nil, fmt.Errorf("location (%q) of replica %q is duplicated with replica %q", replicaLocation, replicaName, name)
		}
		locationSet[replicaLocation] = replicaName

		normalizedReplicaName := strings.ToLower(replicaName)
		if _, ok := replicaNameSet[normalizedReplicaName]; ok {
			return nil, fmt.Errorf("replica name %q is duplicated", replicaName)
		}
		replicaNameSet[normalizedReplicaName] = struct{}{}

		if len(replicaName)+len(configurationStoreName) > 60 {
			return nil, fmt.Errorf("replica name %q is too long, the total length of replica name and configuration store name should be less or equal than 60", replicaName)
		}

		result = append(result, replicas.Replica{
			Name:     pointer.To(replicaName),
			Location: pointer.To(replicaLocation),
		})
	}

	return &result, nil
}
