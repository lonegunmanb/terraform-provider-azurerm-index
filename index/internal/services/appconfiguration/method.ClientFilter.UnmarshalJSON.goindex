package github.com/hashicorp/terraform-provider-azurerm/internal/services/appconfiguration
import (
	"encoding/json"
	"errors"
	"fmt"
	"strings"

	"github.com/mitchellh/mapstructure"
)
func (p *ClientFilter) UnmarshalJSON(b []byte) error {
	var tempIntf []interface{}

	if err := json.Unmarshal(b, &tempIntf); err != nil {
		return err
	}

	filtersOut := make([]interface{}, 0)
	for _, filterRawIntf := range tempIntf {
		filterRaw, ok := filterRawIntf.(map[string]interface{})
		if !ok {
			return fmt.Errorf("wtf")
		}
		nameRaw, ok := filterRaw["name"]
		if !ok {
			return errors.New("missing name")
		}

		name := nameRaw.(string)
		switch strings.ToLower(name) {
		case "microsoft.targeting":
			{
				var out TargetingFeatureFilter
				mpc := mapstructure.DecoderConfig{TagName: "json", Result: &out}
				mpd, err := mapstructure.NewDecoder(&mpc)
				if err != nil {
					return err
				}
				err = mpd.Decode(filterRaw)
				if err != nil {
					return err
				}
				filtersOut = append(filtersOut, out)
			}
		case "microsoft.timewindow":
			{
				var out TimewindowFeatureFilter
				mpc := mapstructure.DecoderConfig{TagName: "json", Result: &out}
				mpd, err := mapstructure.NewDecoder(&mpc)
				if err != nil {
					return err
				}
				err = mpd.Decode(filterRaw)
				if err != nil {
					return err
				}
				filtersOut = append(filtersOut, out)
			}
		case "microsoft.percentage":
			{
				var out PercentageFeatureFilter
				mpc := mapstructure.DecoderConfig{TagName: "json", Result: &out}
				mpd, err := mapstructure.NewDecoder(&mpc)
				if err != nil {
					return err
				}
				err = mpd.Decode(filterRaw)
				if err != nil {
					return err
				}
				filtersOut = append(filtersOut, out)
			}

		default:
			return fmt.Errorf("unknown type %q", name)
		}
	}

	p.Filters = filtersOut
	return nil
}
