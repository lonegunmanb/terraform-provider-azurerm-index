package github.com/hashicorp/terraform-provider-azurerm/internal/services/appconfiguration/client
import (
	"context"
	"fmt"
	"net/url"
	"strings"
	"sync"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appconfiguration/2024-05-01/configurationstores"
)
func (c *Client) ConfigurationStoreIDFromEndpoint(ctx context.Context, subscriptionId commonids.SubscriptionId, configurationStoreEndpoint, domainSuffix string) (*string, error) {
	configurationStoreName, err := c.parseNameFromEndpoint(configurationStoreEndpoint, domainSuffix)
	if err != nil {
		return nil, err
	}

	cacheKey := c.cacheKeyForConfigurationStore(*configurationStoreName)
	keysmith.Lock()
	if lock[cacheKey] == nil {
		lock[cacheKey] = &sync.RWMutex{}
	}
	keysmith.Unlock()
	lock[cacheKey].Lock()
	defer lock[cacheKey].Unlock()

	// first check the cache
	if v, ok := configurationStoreCache[cacheKey]; ok {
		return &v.configurationStoreId, nil
	}

	// If it's not present, populate the entire cache
	configurationStores, err := c.ConfigurationStoresClient.ListComplete(ctx, subscriptionId)
	if err != nil {
		return nil, fmt.Errorf("retrieving the list of Configuration Stores in %s: %+v", subscriptionId, err)
	}
	for _, item := range configurationStores.Items {
		if item.Id == nil || item.Properties == nil || item.Properties.Endpoint == nil {
			continue
		}

		itemId := *item.Id
		endpointUri := *item.Properties.Endpoint
		configurationStoreId, err := configurationstores.ParseConfigurationStoreIDInsensitively(itemId)
		if err != nil {
			return nil, fmt.Errorf("parsing %q: %+v", itemId, err)
		}

		c.AddToCache(*configurationStoreId, endpointUri)
	}

	// finally try and pull this from the cache
	if v, ok := configurationStoreCache[cacheKey]; ok {
		return &v.configurationStoreId, nil
	}

	// we haven't found it, but Data Sources and Resources need to handle this error separately
	return nil, nil
}
