package github.com/hashicorp/terraform-provider-azurerm/internal/services/appconfiguration/client
import (
	"context"
	"fmt"
	"net/url"
	"strings"
	"sync"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appconfiguration/2024-05-01/configurationstores"
)
func (c *Client) EndpointForConfigurationStore(ctx context.Context, configurationStoreId configurationstores.ConfigurationStoreId) (*string, error) {
	cacheKey := c.cacheKeyForConfigurationStore(configurationStoreId.ConfigurationStoreName)
	keysmith.Lock()
	if lock[cacheKey] == nil {
		lock[cacheKey] = &sync.RWMutex{}
	}
	keysmith.Unlock()
	lock[cacheKey].Lock()
	defer lock[cacheKey].Unlock()

	if v, ok := configurationStoreCache[cacheKey]; ok {
		return &v.dataPlaneEndpoint, nil
	}

	resp, err := c.ConfigurationStoresClient.Get(ctx, configurationStoreId)
	if err != nil {
		return nil, fmt.Errorf("retrieving %s:%+v", configurationStoreId, err)
	}

	if resp.Model == nil || resp.Model.Properties == nil || resp.Model.Properties.Endpoint == nil {
		return nil, fmt.Errorf("retrieving %s: `model.properties.Endpoint` was nil", configurationStoreId)
	}

	c.AddToCache(configurationStoreId, *resp.Model.Properties.Endpoint)

	return resp.Model.Properties.Endpoint, nil
}
