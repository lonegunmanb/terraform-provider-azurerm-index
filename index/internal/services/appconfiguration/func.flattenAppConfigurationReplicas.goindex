package github.com/hashicorp/terraform-provider-azurerm/internal/services/appconfiguration
import (
	"bytes"
	"context"
	"fmt"

	"github.com/Azure/go-autorest/autorest"
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appconfiguration/2024-05-01/configurationstores"
	"github.com/hashicorp/go-azure-sdk/resource-manager/appconfiguration/2024-05-01/replicas"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/jackofallops/kermit/sdk/appconfiguration/1.0/appconfiguration"
)
func flattenAppConfigurationReplicas(input []replicas.Replica) ([]interface{}, error) {
	results := make([]interface{}, 0)
	for _, v := range input {
		if v.Properties == nil {
			return results, fmt.Errorf("retrieving Replica %s Properties is nil", *v.Id)
		}

		replicaId, err := replicas.ParseReplicaIDInsensitively(pointer.From(v.Id))
		if err != nil {
			return results, err
		}

		result := map[string]interface{}{
			"name":     pointer.From(v.Name),
			"location": location.Normalize(pointer.From(v.Location)),
			"endpoint": pointer.From(v.Properties.Endpoint),
			"id":       replicaId.ID(),
		}
		results = append(results, result)
	}
	return results, nil
}
