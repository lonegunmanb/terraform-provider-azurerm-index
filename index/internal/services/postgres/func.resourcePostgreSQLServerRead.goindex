package github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/postgresql/2017-12-01/replicas"
	"github.com/hashicorp/go-azure-sdk/resource-manager/postgresql/2017-12-01/servers"
	"github.com/hashicorp/go-azure-sdk/resource-manager/postgresql/2017-12-01/serversecurityalertpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourcePostgreSQLServerRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Postgres.ServersClient
	securityClient := meta.(*clients.Client).Postgres.ServerSecurityAlertPoliciesClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := servers.ParseServerID(d.Id())
	if err != nil {
		return fmt.Errorf("parsing Postgres Server ID : %v", err)
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[WARN] %s was not found - removing from state", *id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.ServerName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.NormalizeNilable(&model.Location))

		tier := servers.SkuTierBasic
		if sku := model.Sku; sku != nil {
			d.Set("sku_name", sku.Name)
			if sku.Tier != nil {
				tier = *sku.Tier
			}
		}

		if err := d.Set("identity", identity.FlattenSystemAssigned(model.Identity)); err != nil {
			return fmt.Errorf("setting `identity`: %+v", err)
		}

		if props := model.Properties; props != nil {
			d.Set("administrator_login", props.AdministratorLogin)
			d.Set("ssl_minimal_tls_version_enforced", string(pointer.From(props.MinimalTlsVersion)))

			version := ""
			if props.Version != nil {
				version = string(*props.Version)
			}
			d.Set("version", version)

			infrastructureEncryption := false
			if props.InfrastructureEncryption != nil {
				infrastructureEncryption = *props.InfrastructureEncryption == servers.InfrastructureEncryptionEnabled
			}
			d.Set("infrastructure_encryption_enabled", infrastructureEncryption)

			publicNetworkAccess := false
			if props.PublicNetworkAccess != nil {
				publicNetworkAccess = *props.PublicNetworkAccess == servers.PublicNetworkAccessEnumEnabled
			}
			d.Set("public_network_access_enabled", publicNetworkAccess)

			sslEnforcement := false
			if props.SslEnforcement != nil {
				sslEnforcement = *props.SslEnforcement == servers.SslEnforcementEnumEnabled
			}
			d.Set("ssl_enforcement_enabled", sslEnforcement)

			if storage := props.StorageProfile; storage != nil {
				d.Set("storage_mb", storage.StorageMB)
				d.Set("backup_retention_days", storage.BackupRetentionDays)

				autoGrow := false
				if storage.StorageAutogrow != nil {
					autoGrow = *storage.StorageAutogrow == servers.StorageAutogrowEnabled
				}
				d.Set("auto_grow_enabled", autoGrow)

				geoRedundant := false
				if storage.GeoRedundantBackup != nil {
					geoRedundant = *storage.GeoRedundantBackup == servers.GeoRedundantBackupEnabled
				}
				d.Set("geo_redundant_backup_enabled", geoRedundant)
			}

			// Computed
			d.Set("fqdn", props.FullyQualifiedDomainName)
		}

		// the basic does not support threat detection policies
		if tier == servers.SkuTierGeneralPurpose || tier == servers.SkuTierMemoryOptimized {
			securityId := serversecurityalertpolicies.NewServerID(id.SubscriptionId, id.ResourceGroupName, id.ServerName)
			secResp, err := securityClient.Get(ctx, securityId)
			if err != nil && !response.WasNotFound(secResp.HttpResponse) {
				return fmt.Errorf("making read request to postgres server security alert policy: %+v", err)
			}

			if !response.WasNotFound(secResp.HttpResponse) {
				if secResp.Model != nil {
					block := flattenSecurityAlertPolicy(secResp.Model.Properties, d.Get("threat_detection_policy.0.storage_account_access_key").(string))
					if err := d.Set("threat_detection_policy", block); err != nil {
						return fmt.Errorf("setting `threat_detection_policy`: %+v", err)
					}
				}
			}
		}

		return tags.FlattenAndSet(d, model.Tags)
	}

	return nil
}
