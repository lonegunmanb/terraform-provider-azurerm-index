package github.com/hashicorp/terraform-provider-azurerm/internal/services/redhatopenshift
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/redhatopenshift/2023-09-04/openshiftclusters"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	commonValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/redhatopenshift/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenOpenShiftWorkerProfiles(profiles *[]openshiftclusters.WorkerProfile) ([]WorkerProfile, error) {
	if profiles == nil || len(*profiles) == 0 {
		return []WorkerProfile{}, nil
	}

	rawProfiles := *profiles
	profile := rawProfiles[0]

	encryptionAtHostEnabled := false
	if profile.EncryptionAtHost != nil {
		encryptionAtHostEnabled = *profile.EncryptionAtHost == openshiftclusters.EncryptionAtHostEnabled
	}

	subnetIdString := ""
	if profile.SubnetId != nil {
		subnetId, err := commonids.ParseSubnetIDInsensitively(*profile.SubnetId)
		if err != nil {
			return []WorkerProfile{}, fmt.Errorf("parsing subnet id: %+v", err)
		}
		subnetIdString = subnetId.ID()
	}

	return []WorkerProfile{
		{
			NodeCount:               pointer.From(profile.Count),
			VmSize:                  pointer.From(profile.VMSize),
			DiskSizeGb:              pointer.From(profile.DiskSizeGB),
			SubnetId:                subnetIdString,
			EncryptionAtHostEnabled: encryptionAtHostEnabled,
			DiskEncryptionSetId:     pointer.From(profile.DiskEncryptionSetId),
		},
	}, nil
}
