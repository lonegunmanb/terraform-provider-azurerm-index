package github.com/hashicorp/terraform-provider-azurerm/internal/services/dns
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dns/2018-05-01/zones"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (DnsZoneDataResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Dns.Zones
			subscriptionId := metadata.Client.Account.SubscriptionId

			var state DnsZoneDataResourceModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := zones.NewDnsZoneID(subscriptionId, state.ResourceGroupName, state.Name)
			var zone *zones.Zone
			if id.ResourceGroupName != "" {
				resp, err := client.Get(ctx, id)
				if err != nil {
					if response.WasNotFound(resp.HttpResponse) {
						return fmt.Errorf("%s was not found", id)
					}
					return fmt.Errorf("retrieving %s: %+v", id, err)
				}

				zone = resp.Model
			} else {
				result, resourceGroupName, err := findZone(ctx, client, id.SubscriptionId, id.DnsZoneName)
				if err != nil {
					return err
				}

				if resourceGroupName == nil {
					return fmt.Errorf("unable to locate the Resource Group for DNS Zone %q in Subscription %q", id.DnsZoneName, subscriptionId)
				}

				zone = result
				id.ResourceGroupName = pointer.From(resourceGroupName)
				state.ResourceGroupName = pointer.From(resourceGroupName)
			}

			if zone == nil {
				return fmt.Errorf("retrieving %s: `model` was nil", id)
			}

			metadata.SetID(id)

			if props := zone.Properties; props != nil {
				state.NumberOfRecordSets = pointer.From(props.NumberOfRecordSets)
				state.MaxNumberOfRecordSets = pointer.From(props.MaxNumberOfRecordSets)
				state.NameServers = pointer.From(props.NameServers)
			}

			state.Tags = pointer.From(zone.Tags)

			return metadata.Encode(&state)
		},
	}
}
