package github.com/hashicorp/terraform-provider-azurerm/internal/services/dns
import (
	"bytes"
	"fmt"
	"strconv"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dns/2018-05-01/recordsets"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/dns/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenAzureRmDnsMxRecords(records *[]recordsets.MxRecord) []map[string]interface{} {
	results := make([]map[string]interface{}, 0)

	if records != nil {
		for _, record := range *records {
			// TODO: convert this to use an int64
			preference := ""
			if record.Preference != nil {
				preference = strconv.Itoa(int(*record.Preference))
			}

			exchange := ""
			if record.Exchange != nil {
				exchange = *record.Exchange
			}

			results = append(results, map[string]interface{}{
				"preference": preference,
				"exchange":   exchange,
			})
		}
	}

	return results
}
