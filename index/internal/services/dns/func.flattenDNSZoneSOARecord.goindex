package github.com/hashicorp/terraform-provider-azurerm/internal/services/dns
import (
	"context"
	"fmt"
	"math"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dns/2018-05-01/recordsets"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dns/2018-05-01/zones"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/dns/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/dns/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenDNSZoneSOARecord(input *recordsets.RecordSet) []DnsZoneSoaRecordResourceRecord {
	output := make([]DnsZoneSoaRecordResourceRecord, 0)
	if input != nil {
		if props := input.Properties; props != nil {
			result := DnsZoneSoaRecordResourceRecord{
				Ttl:  pointer.From(props.TTL),
				Tags: pointer.From(props.Metadata),
				Fqdn: pointer.From(props.Fqdn),
			}

			if record := props.SOARecord; record != nil {
				result.Email = pointer.From(record.Email)
				result.HostName = pointer.From(record.Host)
				result.ExpireTime = pointer.From(record.ExpireTime)
				result.MinimumTtl = pointer.From(record.MinimumTTL)
				result.RefreshTime = pointer.From(record.RefreshTime)
				result.RetryTime = pointer.From(record.RetryTime)
				result.SerialNumber = pointer.From(record.SerialNumber)
			}

			output = append(output, result)
		}
	}

	return output
}
