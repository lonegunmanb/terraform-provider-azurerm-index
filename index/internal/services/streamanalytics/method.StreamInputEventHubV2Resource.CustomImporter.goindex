package github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/streamanalytics/2020-03-01/inputs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/streamanalytics/2020-03-01/streamingjobs"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r StreamInputEventHubV2Resource) CustomImporter() sdk.ResourceRunFunc {
	return func(ctx context.Context, metadata sdk.ResourceMetaData) error {
		id, err := inputs.ParseInputID(metadata.ResourceData.Id())
		if err != nil {
			return err
		}

		client := metadata.Client.StreamAnalytics.InputsClient
		resp, err := client.Get(ctx, *id)
		if err != nil || resp.Model == nil || resp.Model.Properties == nil {
			return fmt.Errorf("retrieving %s: %+v", *id, err)
		}

		props := resp.Model.Properties

		input, ok := props.(inputs.InputProperties) // nolint: gosimple
		if !ok {
			return fmt.Errorf("specified resource is not an Input: %+v", err)
		}

		streamInput, ok := input.(inputs.StreamInputProperties)
		if !ok {
			return fmt.Errorf("specified resource is not a Stream Input: %+v", err)
		}

		if _, ok := streamInput.Datasource.(inputs.EventHubV2StreamInputDataSource); !ok {
			return fmt.Errorf("specified input is not of type EventHubV2: %+v", err)
		}

		return nil
	}
}
