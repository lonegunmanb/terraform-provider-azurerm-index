package github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/streamanalytics/2021-10-01-preview/outputs"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (r OutputTableResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.StreamAnalytics.OutputsClient
			id, err := outputs.ParseOutputID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var state OutputTableResourceModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			props := &outputs.AzureTableOutputDataSourceProperties{
				AccountName:  utils.String(state.StorageAccount),
				AccountKey:   utils.String(state.StorageAccountKey),
				Table:        utils.String(state.Table),
				PartitionKey: utils.String(state.PartitionKey),
				RowKey:       utils.String(state.RowKey),
				BatchSize:    utils.Int64(state.BatchSize),
			}

			if metadata.ResourceData.HasChange("columns_to_remove") {
				props.ColumnsToRemove = &state.ColumnsToRemove
			}

			output := outputs.Output{
				Name: utils.String(state.Name),
				Properties: &outputs.OutputProperties{
					Datasource: &outputs.AzureTableOutputDataSource{
						Properties: props,
					},
				},
			}
			var opts outputs.UpdateOperationOptions
			if _, err = client.Update(ctx, *id, output, opts); err != nil {
				return fmt.Errorf("updating %s: %+v", *id, err)
			}

			return nil
		},
	}
}
