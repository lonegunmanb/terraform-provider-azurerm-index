package github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/streamanalytics/2020-03-01/inputs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/streamanalytics/2020-03-01/streamingjobs"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r StreamInputEventHubV2Resource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.StreamAnalytics.InputsClient
			id, err := inputs.ParseInputID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			streamingJobId := streamingjobs.NewStreamingJobID(id.SubscriptionId, id.ResourceGroupName, id.StreamingJobName)

			state := StreamInputEventHubV2ResourceModel{
				Name:                 id.InputName,
				StreamAnalyticsJobId: streamingJobId.ID(),
			}

			if model := resp.Model; model != nil {
				if props := model.Properties; props != nil {
					streamInput, ok := props.(inputs.StreamInputProperties)
					if !ok {
						return fmt.Errorf("converting %s to a Stream Input", *id)
					}

					eventHubV2Input, ok := streamInput.Datasource.(inputs.EventHubV2StreamInputDataSource)
					if !ok {
						return fmt.Errorf("converting %s to an EventHub V2 Stream Input", *id)
					}

					if eventHubV2InputProps := eventHubV2Input.Properties; eventHubV2InputProps != nil {
						servicebusNamespace := ""
						if v := eventHubV2InputProps.ServiceBusNamespace; v != nil {
							servicebusNamespace = *v
						}

						eventHubName := ""
						if v := eventHubV2InputProps.EventHubName; v != nil {
							eventHubName = *v
						}

						eventHubConsumerGroup := ""
						if v := eventHubV2InputProps.ConsumerGroupName; v != nil {
							eventHubConsumerGroup = *v
						}

						authenticationMode := ""
						if v := eventHubV2InputProps.AuthenticationMode; v != nil {
							authenticationMode = string(*v)
						}

						sharedAccessPolicyName := ""
						if v := eventHubV2InputProps.SharedAccessPolicyName; v != nil {
							sharedAccessPolicyName = *v
						}

						serialization := flattenStreamAnalyticsStreamInputSerializationTyped(streamInput.Serialization)

						partitionKey := ""
						if v := streamInput.PartitionKey; v != nil {
							partitionKey = *v
						}

						state.ServiceBusNamespace = servicebusNamespace
						state.EventHubName = eventHubName
						state.EventHubConsumerGroupName = eventHubConsumerGroup
						state.AuthenticationMode = authenticationMode
						state.SharedAccessPolicyName = sharedAccessPolicyName
						state.SharedAccessPolicyKey = metadata.ResourceData.Get("shared_access_policy_key").(string)
						state.Serialization = []Serialization{serialization}
						state.PartitionKey = partitionKey

						return metadata.Encode(&state)
					}
				}
			}
			return nil
		},
	}
}
