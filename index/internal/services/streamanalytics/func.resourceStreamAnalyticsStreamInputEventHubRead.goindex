package github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/streamanalytics/2020-03-01/inputs"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceStreamAnalyticsStreamInputEventHubRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).StreamAnalytics.InputsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := inputs.ParseInputID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] %s was not found - removing from state!", *id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.InputName)
	d.Set("stream_analytics_job_name", id.StreamingJobName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			input, ok := props.(inputs.InputProperties) // nolint: gosimple
			if !ok {
				return fmt.Errorf("converting %s to an Input", *id)
			}

			streamInput, ok := input.(inputs.StreamInputProperties)
			if !ok {
				return fmt.Errorf("converting %s to a Stream Input", *id)
			}

			streamEventHubInput, ok := streamInput.Datasource.(inputs.EventHubStreamInputDataSource)
			if !ok {
				return fmt.Errorf("converting %s to an Event Hub Stream Input", *id)
			}

			if streamEventHubInputProps := streamEventHubInput.Properties; streamEventHubInputProps != nil {
				eventHubName := ""
				if v := streamEventHubInputProps.EventHubName; v != nil {
					eventHubName = *v
				}
				d.Set("eventhub_name", eventHubName)

				serviceBusNameSpace := ""
				if v := streamEventHubInputProps.ServiceBusNamespace; v != nil {
					serviceBusNameSpace = *v
				}
				d.Set("servicebus_namespace", serviceBusNameSpace)

				authMode := ""
				if v := streamEventHubInputProps.AuthenticationMode; v != nil {
					authMode = string(*v)
				}
				d.Set("authentication_mode", authMode)

				consumerGroupName := ""
				if v := streamEventHubInputProps.ConsumerGroupName; v != nil {
					consumerGroupName = *v
				}
				d.Set("eventhub_consumer_group_name", consumerGroupName)

				sharedAccessPolicyName := ""
				if v := streamEventHubInputProps.SharedAccessPolicyName; v != nil {
					sharedAccessPolicyName = *v
				}
				d.Set("shared_access_policy_name", sharedAccessPolicyName)

				partitionKey := ""
				if v := streamInput.PartitionKey; v != nil {
					partitionKey = *v
				}
				d.Set("partition_key", partitionKey)

				if err := d.Set("serialization", flattenStreamAnalyticsStreamInputSerialization(streamInput.Serialization)); err != nil {
					return fmt.Errorf("setting `serialization`: %+v", err)
				}
			}
		}
	}

	return nil
}
