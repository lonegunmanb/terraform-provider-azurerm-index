package github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics
import (
	"fmt"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/streamanalytics/2021-10-01-preview/outputs"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandStreamAnalyticsOutputSerialization(input []interface{}) (outputs.Serialization, error) {
	v := input[0].(map[string]interface{})

	outputType := v["type"].(string)
	encoding := v["encoding"].(string)
	fieldDelimiter := v["field_delimiter"].(string)
	format := v["format"].(string)

	switch outputType {
	case string(outputs.EventSerializationTypeAvro):
		if encoding != "" {
			return nil, fmt.Errorf("`encoding` cannot be set when `type` is set to `Avro`")
		}
		if fieldDelimiter != "" {
			return nil, fmt.Errorf("`field_delimiter` cannot be set when `type` is set to `Avro`")
		}
		if format != "" {
			return nil, fmt.Errorf("`format` cannot be set when `type` is set to `Avro`")
		}
		var props interface{}
		return outputs.AvroSerialization{
			Properties: &props,
		}, nil

	case string(outputs.EventSerializationTypeCsv):
		if encoding == "" {
			return nil, fmt.Errorf("`encoding` must be specified when `type` is set to `Csv`")
		}
		if fieldDelimiter == "" {
			return nil, fmt.Errorf("`field_delimiter` must be set when `type` is set to `Csv`")
		}
		if format != "" {
			return nil, fmt.Errorf("`format` cannot be set when `type` is set to `Csv`")
		}
		return outputs.CsvSerialization{
			Properties: &outputs.CsvSerializationProperties{
				Encoding:       pointer.To(outputs.Encoding(encoding)),
				FieldDelimiter: pointer.To(fieldDelimiter),
			},
		}, nil

	case string(outputs.EventSerializationTypeJson):
		if encoding == "" {
			return nil, fmt.Errorf("`encoding` must be specified when `type` is set to `Json`")
		}
		if format == "" {
			return nil, fmt.Errorf("`format` must be specified when `type` is set to `Json`")
		}
		if fieldDelimiter != "" {
			return nil, fmt.Errorf("`field_delimiter` cannot be set when `type` is set to `Json`")
		}

		return outputs.JsonSerialization{
			Properties: &outputs.JsonSerializationProperties{
				Encoding: pointer.To(outputs.Encoding(encoding)),
				Format:   pointer.To(outputs.JsonOutputSerializationFormat(format)),
			},
		}, nil

	case string(outputs.EventSerializationTypeParquet):
		if encoding != "" {
			return nil, fmt.Errorf("`encoding` cannot be set when `type` is set to `Parquet`")
		}
		if fieldDelimiter != "" {
			return nil, fmt.Errorf("`field_delimiter` cannot be set when `type` is set to `Parquet`")
		}
		if format != "" {
			return nil, fmt.Errorf("`format` cannot be set when `type` is set to `Parquet`")
		}

		var props interface{}
		return outputs.ParquetSerialization{
			Properties: &props,
		}, nil
	}

	return nil, fmt.Errorf("unsupported Output Type %q", outputType)
}
