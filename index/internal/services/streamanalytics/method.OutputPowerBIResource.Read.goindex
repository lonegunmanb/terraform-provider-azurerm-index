package github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/streamanalytics/2020-03-01/streamingjobs"
	"github.com/hashicorp/go-azure-sdk/resource-manager/streamanalytics/2021-10-01-preview/outputs"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/streamanalytics/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r OutputPowerBIResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.StreamAnalytics.OutputsClient
			id, err := outputs.ParseOutputID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			if model := resp.Model; model != nil {
				if props := model.Properties; props != nil {
					output, ok := props.Datasource.(outputs.PowerBIOutputDataSource)
					if !ok {
						return fmt.Errorf("converting %s to a PowerBI Output", *id)
					}

					streamingJobId := streamingjobs.NewStreamingJobID(id.SubscriptionId, id.ResourceGroupName, id.StreamingJobName)

					state := OutputPowerBIResourceModel{
						Name:               id.OutputName,
						StreamAnalyticsJob: streamingJobId.ID(),
					}

					dataset := ""
					if v := output.Properties.Dataset; v != nil {
						dataset = *v
					}
					state.DataSet = dataset

					table := ""
					if v := output.Properties.Table; v != nil {
						table = *v
					}
					state.Table = table

					groupId := ""
					if v := output.Properties.GroupId; v != nil {
						groupId = *v
					}
					state.GroupID = groupId

					groupName := ""
					if v := output.Properties.GroupName; v != nil {
						groupName = *v
					}
					state.GroupName = groupName

					state.TokenUserDisplayName = metadata.ResourceData.Get("token_user_display_name").(string)
					state.TokenUserPrincipalName = metadata.ResourceData.Get("token_user_principal_name").(string)

					return metadata.Encode(&state)
				}
			}
			return nil
		},
	}
}
