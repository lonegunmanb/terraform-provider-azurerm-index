package github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance
import (
	"errors"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/maintenance/2023-04-01/maintenanceconfigurations"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceMaintenanceConfigurationUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Maintenance.ConfigurationsClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := maintenanceconfigurations.ParseMaintenanceConfigurationID(d.Id())
	if err != nil {
		return err
	}

	existing, err := client.Get(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	payload := existing.Model

	if d.HasChanges("scope", "window", "install_patches", "properties") {
		scope := maintenanceconfigurations.MaintenanceScope(d.Get("scope").(string))
		window := expandMaintenanceConfigurationWindow(d.Get("window").([]interface{}))
		installPatches := expandMaintenanceConfigurationInstallPatches(d.Get("install_patches").([]interface{}))
		extensionProperties := expandExtensionProperties(d.Get("properties").(map[string]interface{}))
		if scope == maintenanceconfigurations.MaintenanceScopeInGuestPatch {
			if window == nil {
				return errors.New("`window` must be specified when `scope` is `InGuestPatch`")
			}
			if installPatches == nil {
				return errors.New("`install_patches` must be specified when `scope` is `InGuestPatch`")
			}
			if _, ok := (*extensionProperties)["InGuestPatchMode"]; !ok {
				if _, ok := d.GetOk("in_guest_user_patch_mode"); !ok {
					return errors.New("`in_guest_user_patch_mode` must be specified when `scope` is `InGuestPatch`")
				}
				(*extensionProperties)["InGuestPatchMode"] = d.Get("in_guest_user_patch_mode").(string)
			}
		}

		payload.Properties.MaintenanceScope = &scope
		payload.Properties.MaintenanceWindow = window
		payload.Properties.ExtensionProperties = extensionProperties
		payload.Properties.InstallPatches = installPatches
	}

	if d.HasChange("visibility") {
		payload.Properties.Visibility = pointer.To(maintenanceconfigurations.Visibility(d.Get("visibility").(string)))
	}

	if d.HasChange("tags") {
		payload.Tags = tags.Expand(d.Get("tags").(map[string]interface{}))
	}

	if _, err := client.CreateOrUpdate(ctx, *id, *payload); err != nil {
		return fmt.Errorf("updating %s: %+v", id, err)
	}

	return resourceMaintenanceConfigurationRead(d, meta)
}
