package github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance
import (
	"errors"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/maintenance/2023-04-01/maintenanceconfigurations"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenMaintenanceConfigurationInstallPatches(input *maintenanceconfigurations.InputPatchConfiguration) []interface{} {
	results := make([]interface{}, 0)

	if v := input; v != nil {
		output := make(map[string]interface{})

		if rebootSetting := v.RebootSetting; rebootSetting != nil {
			// https://github.com/Azure/azure-rest-api-specs/issues/27222
			if strings.EqualFold(string(*rebootSetting), "AlwaysReboot") {
				output["reboot"] = "Always"
			} else {
				output["reboot"] = *rebootSetting
			}
		}

		if windowsParameters := v.WindowsParameters; windowsParameters != nil {
			output["windows"] = flattenMaintenanceConfigurationInstallPatchesWindows(windowsParameters)
		}

		if linuxParameters := v.LinuxParameters; linuxParameters != nil {
			output["linux"] = flattenMaintenanceConfigurationInstallPatchesLinux(linuxParameters)
		}

		results = append(results, output)
	}

	return results
}
