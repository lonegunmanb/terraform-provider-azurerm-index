package github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance
import (
	"encoding/base64"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/maintenance/2023-04-01/publicmaintenanceconfigurations"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func dataSourcePublicMaintenanceConfigurationsRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Maintenance.PublicConfigurationsClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	subId := commonids.NewSubscriptionID(subscriptionId)
	resp, err := client.List(ctx, subId)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return errors.New("no Public Maintenance Configurations were found")
		}
		return fmt.Errorf("retrieving Public Maintenance Configurations: %+v", err)
	}

	filteredPublicConfigs := make([]interface{}, 0)

	recurEveryFilterRaw := d.Get("recur_every").(string)
	recurEveryFilter := recurEveryFilterRaw
	switch recurEveryFilterRaw {
	case recurFridayToSunday:
		recurEveryFilter = "week Friday, Saturday, Sunday"
	case recurMondayToThursday:
		recurEveryFilter = "week Monday, Tuesday, Wednesday, Thursday"
	}

	locationFilter := azure.NormalizeLocation(d.Get("location").(string))
	scopeFilter := d.Get("scope").(string)

	if resp.Model != nil {
		if resp.Model.Value != nil {
			for _, maintenanceConfig := range *resp.Model.Value {
				var configLocation, configRecurEvery, configScope string
				if maintenanceConfig.Location != nil {
					configLocation = azure.NormalizeLocation(*maintenanceConfig.Location)
				}
				if props := maintenanceConfig.Properties; props != nil {
					if props.MaintenanceWindow != nil && props.MaintenanceWindow.RecurEvery != nil {
						configRecurEvery = *props.MaintenanceWindow.RecurEvery
					}

					if props.MaintenanceScope != nil {
						configScope = string(*props.MaintenanceScope)
					}
				}

				if locationFilter != "" && locationFilter != configLocation {
					continue
				}
				if recurEveryFilter != "" && recurEveryFilter != configRecurEvery {
					continue
				}
				if scopeFilter != "" && scopeFilter != configScope {
					continue
				}

				filteredPublicConfigs = append(filteredPublicConfigs, flattenPublicMaintenanceConfiguration(maintenanceConfig))
			}
		}
	}
	if len(filteredPublicConfigs) == 0 {
		return errors.New("no Public Maintenance Configurations were found")
	}

	if err := d.Set("configs", filteredPublicConfigs); err != nil {
		return fmt.Errorf("setting `configs`: %+v", err)
	}

	id := fmt.Sprintf("publicMaintenanceConfigurations/location=%s;scope=%s;recurEvery=%s", locationFilter, scopeFilter, recurEveryFilterRaw)
	d.SetId(base64.StdEncoding.EncodeToString([]byte(id)))
	return nil
}
