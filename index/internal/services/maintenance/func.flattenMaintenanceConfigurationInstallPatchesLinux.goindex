package github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance
import (
	"errors"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/maintenance/2023-04-01/maintenanceconfigurations"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/maintenance/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenMaintenanceConfigurationInstallPatchesLinux(input *maintenanceconfigurations.InputLinuxParameters) []interface{} {
	results := make([]interface{}, 0)

	if input != nil {
		classificationsToInclude := make([]interface{}, 0)
		if input.ClassificationsToInclude != nil {
			classificationsToInclude = utils.FlattenStringSlice(input.ClassificationsToInclude)
		}
		packageNamesMaskToExclude := make([]interface{}, 0)
		if input.PackageNameMasksToExclude != nil {
			packageNamesMaskToExclude = utils.FlattenStringSlice(input.PackageNameMasksToExclude)
		}
		packageNamesMaskToInclude := make([]interface{}, 0)
		if input.PackageNameMasksToInclude != nil {
			packageNamesMaskToInclude = utils.FlattenStringSlice(input.PackageNameMasksToInclude)
		}

		results = append(results, map[string]interface{}{
			"classifications_to_include":    classificationsToInclude,
			"package_names_mask_to_exclude": packageNamesMaskToExclude,
			"package_names_mask_to_include": packageNamesMaskToInclude,
		})
	}

	return results
}
