package github.com/hashicorp/terraform-provider-azurerm/internal/services/loadbalancer
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/loadbalancers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenArmLoadBalancerBackendAddresses(input *[]loadbalancers.LoadBalancerBackendAddress) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	output := make([]interface{}, 0)

	for _, e := range *input {
		var name string
		if e.Name != nil {
			name = *e.Name
		}

		var (
			ipAddress string
			vnetId    string
		)
		var inboundNATRulePortMappingList []interface{}
		if prop := e.Properties; prop != nil {
			ipAddress = pointer.From(prop.IPAddress)

			if prop.VirtualNetwork != nil {
				vnetId = pointer.From(prop.VirtualNetwork.Id)
			}
			if prop.InboundNatRulesPortMapping != nil {
				rules := prop.InboundNatRulesPortMapping
				for _, rule := range *rules {
					rulePortMapping := make(map[string]interface{})

					if rule.InboundNatRuleName != nil {
						rulePortMapping["inbound_nat_rule_name"] = pointer.From(rule.InboundNatRuleName)
					}
					if rule.FrontendPort != nil {
						rulePortMapping["frontend_port"] = *rule.FrontendPort
					}

					if rule.BackendPort != nil {
						rulePortMapping["backend_port"] = *rule.BackendPort
					}
					inboundNATRulePortMappingList = append(inboundNATRulePortMappingList, rulePortMapping)
				}
			}
		}

		v := map[string]interface{}{
			"name":                          name,
			"virtual_network_id":            vnetId,
			"ip_address":                    ipAddress,
			"inbound_nat_rule_port_mapping": inboundNATRulePortMappingList,
		}
		output = append(output, v)
	}

	return output
}
