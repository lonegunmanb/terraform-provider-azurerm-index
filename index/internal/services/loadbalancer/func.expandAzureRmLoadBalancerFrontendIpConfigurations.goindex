package github.com/hashicorp/terraform-provider-azurerm/internal/services/loadbalancer
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/edgezones"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/loadbalancers"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/publicipprefixes"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func expandAzureRmLoadBalancerFrontendIpConfigurations(d *pluginsdk.ResourceData) *[]loadbalancers.FrontendIPConfiguration {
	configs := d.Get("frontend_ip_configuration").([]interface{})
	frontEndConfigs := make([]loadbalancers.FrontendIPConfiguration, 0, len(configs))

	for _, configRaw := range configs {
		data := configRaw.(map[string]interface{})

		properties := loadbalancers.FrontendIPConfigurationPropertiesFormat{}

		if v := data["private_ip_address_allocation"].(string); v != "" {
			properties.PrivateIPAllocationMethod = pointer.To(loadbalancers.IPAllocationMethod(v))
		}

		if v := data["gateway_load_balancer_frontend_ip_configuration_id"].(string); v != "" {
			properties.GatewayLoadBalancer = &loadbalancers.SubResource{
				Id: pointer.To(v),
			}
		}

		if v := data["private_ip_address"].(string); v != "" {
			properties.PrivateIPAddress = pointer.To(v)
		}

		if v := data["public_ip_address_id"].(string); v != "" {
			properties.PublicIPAddress = &loadbalancers.PublicIPAddress{
				Id: pointer.To(v),
			}
		}

		if v := data["public_ip_prefix_id"].(string); v != "" {
			properties.PublicIPPrefix = &loadbalancers.SubResource{
				Id: pointer.To(v),
			}
		}

		if v := data["subnet_id"].(string); v != "" {
			properties.PrivateIPAddressVersion = pointer.To(loadbalancers.IPVersionIPvFour)
			if v := data["private_ip_address_version"].(string); v != "" {
				properties.PrivateIPAddressVersion = pointer.To(loadbalancers.IPVersion(v))
			}
			properties.Subnet = &loadbalancers.Subnet{
				Id: pointer.To(v),
			}
		}

		frontEndConfig := loadbalancers.FrontendIPConfiguration{
			Name:       pointer.To(data["name"].(string)),
			Properties: pointer.To(properties),
		}

		zones := zones.ExpandUntyped(data["zones"].(*pluginsdk.Set).List())
		if len(zones) > 0 {
			frontEndConfig.Zones = &zones
		}

		frontEndConfigs = append(frontEndConfigs, frontEndConfig)
	}

	return &frontEndConfigs
}
