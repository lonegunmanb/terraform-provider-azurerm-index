package github.com/hashicorp/terraform-provider-azurerm/internal/services/loadbalancer
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/loadbalancers"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func expandAzureRmLoadBalancerProbe(d *pluginsdk.ResourceData) *loadbalancers.Probe {
	properties := loadbalancers.ProbePropertiesFormat{
		NumberOfProbes:    pointer.To(int64(d.Get("number_of_probes").(int))),
		IntervalInSeconds: pointer.To(int64(d.Get("interval_in_seconds").(int))),
		Port:              int64(d.Get("port").(int)),
	}

	if v, ok := d.GetOk("protocol"); ok {
		properties.Protocol = loadbalancers.ProbeProtocol(v.(string))
	}

	if v, ok := d.GetOk("request_path"); ok {
		properties.RequestPath = pointer.To(v.(string))
	}

	if v, ok := d.GetOk("probe_threshold"); ok {
		properties.ProbeThreshold = pointer.To(int64(v.(int)))
	}

	return &loadbalancers.Probe{
		Name:       pointer.To(d.Get("name").(string)),
		Properties: &properties,
	}
}
