package github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/oracledatabase/2024-06-01/dbsystemshapes"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (d DbSystemShapesDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Oracle.OracleClient.DbSystemShapes
			subscriptionId := metadata.Client.Account.SubscriptionId

			state := DbSystemShapesModel{
				DbSystemShapes: make([]DbSystemShapeModel, 0),
			}
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := dbsystemshapes.NewLocationID(subscriptionId, state.Location)

			resp, err := client.ListByLocation(ctx, id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return fmt.Errorf("%s was not found", id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			if model := resp.Model; model != nil {
				for _, element := range *model {
					if props := element.Properties; props != nil {
						state.DbSystemShapes = append(state.DbSystemShapes, DbSystemShapeModel{
							AvailableCoreCount:                 props.AvailableCoreCount,
							AvailableCoreCountPerNode:          pointer.From(props.AvailableCoreCountPerNode),
							AvailableDataStorageInTbs:          pointer.From(props.AvailableDataStorageInTbs),
							AvailableDataStoragePerServerInTbs: pointer.From(props.AvailableDataStoragePerServerInTbs),
							AvailableDbNodePerNodeInGbs:        pointer.From(props.AvailableDbNodePerNodeInGbs),
							AvailableDbNodeStorageInGbs:        pointer.From(props.AvailableDbNodeStorageInGbs),
							AvailableMemoryInGbs:               pointer.From(props.AvailableMemoryInGbs),
							AvailableMemoryPerNodeInGbs:        pointer.From(props.AvailableMemoryPerNodeInGbs),
							CoreCountIncrement:                 pointer.From(props.CoreCountIncrement),
							MaxStorageCount:                    pointer.From(props.MaxStorageCount),
							MaximumNodeCount:                   pointer.From(props.MaximumNodeCount),
							MinCoreCountPerNode:                pointer.From(props.MinCoreCountPerNode),
							MinDataStorageInTbs:                pointer.From(props.MinDataStorageInTbs),
							MinDbNodeStoragePerNodeInGbs:       pointer.From(props.MinDbNodeStoragePerNodeInGbs),
							MinMemoryPerNodeInGbs:              pointer.From(props.MinMemoryPerNodeInGbs),
							MinStorageCount:                    pointer.From(props.MinStorageCount),
							MinimumCoreCount:                   pointer.From(props.MinimumCoreCount),
							MinimumNodeCount:                   pointer.From(props.MinimumNodeCount),
							RuntimeMinimumCoreCount:            pointer.From(props.RuntimeMinimumCoreCount),
							ShapeFamily:                        pointer.From(props.ShapeFamily),
						})
					}
				}
			}

			metadata.SetID(id)

			return metadata.Encode(&state)
		},
	}
}
