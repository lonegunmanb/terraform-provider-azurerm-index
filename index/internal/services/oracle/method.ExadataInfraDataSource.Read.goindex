package github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/oracledatabase/2024-06-01/cloudexadatainfrastructures"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (d ExadataInfraDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Oracle.OracleClient.CloudExadataInfrastructures
			subscriptionId := metadata.Client.Account.SubscriptionId

			var state ExadataInfraDataModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}
			id := cloudexadatainfrastructures.NewCloudExadataInfrastructureID(subscriptionId, state.ResourceGroupName, state.Name)

			resp, err := client.Get(ctx, id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return fmt.Errorf("%s was not found", id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			if model := resp.Model; model != nil {
				state.Tags = pointer.From(model.Tags)
				state.Location = location.Normalize(model.Location)
				state.Zones = model.Zones
				if props := model.Properties; props != nil {
					state.ActivatedStorageCount = pointer.From(props.ActivatedStorageCount)
					state.ActivatedStorageCount = pointer.From(props.ActivatedStorageCount)
					state.AdditionalStorageCount = pointer.From(props.AdditionalStorageCount)
					state.AvailableStorageSizeInGbs = pointer.From(props.AvailableStorageSizeInGbs)
					state.CpuCount = pointer.From(props.CpuCount)
					state.ComputeCount = pointer.From(props.ComputeCount)
					state.CustomerContacts = FlattenCustomerContacts(props.CustomerContacts)
					state.DataStorageSizeInTbs = pointer.From(props.DataStorageSizeInTbs)
					state.DbNodeStorageSizeInGbs = pointer.From(props.DbNodeStorageSizeInGbs)
					state.DbServerVersion = pointer.From(props.DbServerVersion)
					state.DisplayName = props.DisplayName
					state.EstimatedPatchingTime = FlattenEstimatedPatchingTimes(props.EstimatedPatchingTime)
					state.LastMaintenanceRunId = pointer.From(props.LastMaintenanceRunId)
					state.LifecycleDetails = pointer.From(props.LifecycleDetails)
					state.LifecycleState = string(*props.LifecycleState)
					state.MaintenanceWindow = FlattenMaintenanceWindow(props.MaintenanceWindow)
					state.MaxCPUCount = pointer.From(props.MaxCPUCount)
					state.MaxDataStorageInTbs = pointer.From(props.MaxDataStorageInTbs)
					state.MaxDbNodeStorageSizeInGbs = pointer.From(props.MaxDbNodeStorageSizeInGbs)
					state.MaxMemoryInGbs = pointer.From(props.MaxMemoryInGbs)
					state.MemorySizeInGbs = pointer.From(props.MemorySizeInGbs)
					state.MonthlyDbServerVersion = pointer.From(props.MonthlyDbServerVersion)
					state.MonthlyStorageServerVersion = pointer.From(props.MonthlyStorageServerVersion)
					state.NextMaintenanceRunId = pointer.From(props.NextMaintenanceRunId)
					state.OciUrl = pointer.From(props.OciURL)
					state.Ocid = pointer.From(props.Ocid)
					state.Shape = props.Shape
					state.StorageCount = pointer.From(props.StorageCount)
					state.StorageServerVersion = pointer.From(props.StorageServerVersion)
					state.TimeCreated = pointer.From(props.TimeCreated)
					state.TotalStorageSizeInGbs = pointer.From(props.TotalStorageSizeInGbs)
				}
			}

			metadata.SetID(id)

			return metadata.Encode(&state)
		},
	}
}
