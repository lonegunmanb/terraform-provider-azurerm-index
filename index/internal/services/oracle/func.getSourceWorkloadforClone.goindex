package github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/oracledatabase/2025-09-01/autonomousdatabases"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func getSourceWorkloadforClone(ctx context.Context, sourceId string, metadata sdk.ResourceMetaData) (string, error) {
	id, err := autonomousdatabases.ParseAutonomousDatabaseID(sourceId)
	if err != nil {
		return "", err
	}

	client := metadata.Client.Oracle.OracleClient.AutonomousDatabases
	resp, err := client.Get(ctx, *id)
	if err != nil {
		return "", fmt.Errorf("retrieving %s: %+v", id, err)
	}

	if resp.Model == nil {
		return "", fmt.Errorf("retrieving %s: `model` was nil", id)
	}

	if resp.Model.Properties == nil {
		return "", fmt.Errorf("retrieving %s: `properties` was nil", id)
	}

	props := resp.Model.Properties.AutonomousDatabaseBaseProperties()
	if props.DbWorkload == nil {
		return "", fmt.Errorf("unable to determine workload type for %s", id)
	}

	return string(*props.DbWorkload), nil
}
