package github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/oracledatabase/2025-09-01/autonomousdatabases"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (AutonomousDatabaseCloneFromDatabaseDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Oracle.OracleClient.AutonomousDatabases
			subscriptionId := metadata.Client.Account.SubscriptionId

			var state AutonomousDatabaseCloneFromDatabaseDataSourceModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := autonomousdatabases.NewAutonomousDatabaseID(subscriptionId, state.ResourceGroupName, state.Name)

			resp, err := client.Get(ctx, id)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			if model := resp.Model; model != nil {
				state.Location = location.Normalize(model.Location)
				state.Tags = pointer.From(model.Tags)

				props, ok := model.Properties.(autonomousdatabases.AutonomousDatabaseCloneProperties)
				if !ok {
					return fmt.Errorf("%s was not of type `Clone`", id)
				}
				state.SourceAutonomousDatabaseId = props.SourceId
				state.ReconnectCloneEnabled = pointer.From(props.IsReconnectCloneEnabled)
				state.RefreshableClone = pointer.From(props.IsRefreshableClone)
				state.TimeUntilReconnectUtc = pointer.From(props.TimeUntilReconnectCloneEnabled)
				state.RefreshableStatus = pointer.FromEnum(props.RefreshableStatus)
				state.ActualUsedDataStorageSizeInTb = pointer.From(props.ActualUsedDataStorageSizeInTbs)
				state.AllocatedStorageSizeInTb = pointer.From(props.AllocatedStorageSizeInTbs)
				state.AllowedIpAddresses = pointer.From(props.WhitelistedIPs)
				state.AutoScalingEnabled = pointer.From(props.IsAutoScalingEnabled)
				state.AutoScalingForStorageEnabled = pointer.From(props.IsAutoScalingForStorageEnabled)
				state.AvailableUpgradeVersions = pointer.From(props.AvailableUpgradeVersions)
				state.BackupRetentionPeriodInDays = pointer.From(props.BackupRetentionPeriodInDays)
				state.CharacterSet = pointer.From(props.CharacterSet)
				state.ComputeCount = pointer.From(props.ComputeCount)
				state.ComputeModel = pointer.FromEnum(props.ComputeModel)
				state.ConnectionStrings = flattenConnectionStrings(props.ConnectionStrings)
				state.CpuCoreCount = pointer.From(props.CpuCoreCount)
				state.CustomerContacts = flattenAdbsCustomerContacts(props.CustomerContacts)
				state.DataStorageSizeInGb = pointer.From(props.DataStorageSizeInGbs)
				state.DataStorageSizeInTb = pointer.From(props.DataStorageSizeInTbs)
				state.DatabaseVersion = pointer.From(props.DbVersion)
				state.DatabaseWorkload = pointer.FromEnum(props.DbWorkload)
				state.DisplayName = pointer.From(props.DisplayName)
				state.LicenseModel = pointer.FromEnum(props.LicenseModel)
				state.LifecycleState = pointer.FromEnum(props.LifecycleState)
				state.LifecycleDetails = pointer.From(props.LifecycleDetails)
				state.LocalAdgAutoFailoverMaxDataLossLimitInSeconds = pointer.From(props.LocalAdgAutoFailoverMaxDataLossLimit)
				state.LocalDataGuardEnabled = pointer.From(props.IsLocalDataGuardEnabled)
				state.LongTermBackupSchedule = FlattenLongTermBackUpScheduleDetails(props.LongTermBackupSchedule)
				state.MemoryAreaInGb = pointer.From(props.InMemoryAreaInGbs)
				state.MemoryPerOracleComputeUnitInGb = pointer.From(props.MemoryPerOracleComputeUnitInGbs)
				state.MtlsConnectionRequired = pointer.From(props.IsMtlsConnectionRequired)
				state.NationalCharacterSet = pointer.From(props.NcharacterSet)
				state.NextLongTermBackupTimestamp = pointer.From(props.NextLongTermBackupTimeStamp)
				state.Ocid = pointer.From(props.Ocid)
				state.OciUrl = pointer.From(props.OciURL)
				state.PeerDatabaseIds = pointer.From(props.PeerDbIds)
				state.Preview = pointer.From(props.IsPreview)
				state.PreviewVersionWithServiceTermsAccepted = pointer.From(props.IsPreviewVersionWithServiceTermsAccepted)
				state.PrivateEndpointUrl = pointer.From(props.PrivateEndpoint)
				state.PrivateEndpointIp = pointer.From(props.PrivateEndpointIP)
				state.PrivateEndpointLabel = pointer.From(props.PrivateEndpointLabel)
				state.ProvisionableCPUs = pointer.From(props.ProvisionableCPUs)
				state.RemoteDataGuardEnabled = pointer.From(props.IsRemoteDataGuardEnabled)
				state.ServiceConsoleUrl = pointer.From(props.ServiceConsoleURL)
				state.SqlWebDeveloperUrl = pointer.From(props.SqlWebDeveloperURL)
				state.SupportedRegionsToCloneTo = pointer.From(props.SupportedRegionsToCloneTo)
				state.TimeCreatedUtc = pointer.From(props.TimeCreated)
				state.TimeDataGuardRoleChangedInUtc = pointer.From(props.TimeDataGuardRoleChanged)
				state.TimeDeletionOfFreeAutonomousDatabaseInUtc = pointer.From(props.TimeDeletionOfFreeAutonomousDatabase)
				state.TimeLocalDataGuardEnabledInUtc = pointer.From(props.TimeLocalDataGuardEnabled)
				state.TimeMaintenanceBeginInUtc = pointer.From(props.TimeMaintenanceBegin)
				state.TimeMaintenanceEndInUtc = pointer.From(props.TimeMaintenanceEnd)
				state.TimeOfLastFailoverInUtc = pointer.From(props.TimeOfLastFailover)
				state.TimeOfLastRefreshInUtc = pointer.From(props.TimeOfLastRefresh)
				state.TimeOfLastRefreshPointInUtc = pointer.From(props.TimeOfLastRefreshPoint)
				state.TimeOfLastSwitchoverInUtc = pointer.From(props.TimeOfLastSwitchover)
				state.TimeDataGuardRoleChangedInUtc = pointer.From(props.TimeDataGuardRoleChanged)
				state.TimeReclamationOfFreeAutonomousDatabaseInUtc = pointer.From(props.TimeReclamationOfFreeAutonomousDatabase)
				state.TimeDataGuardRoleChangedInUtc = pointer.From(props.TimeDataGuardRoleChanged)
				state.UsedDataStorageSizeInTb = pointer.From(props.UsedDataStorageSizeInTbs)
				state.UsedDataStorageSizeInGb = pointer.From(props.UsedDataStorageSizeInGbs)
				state.SubnetId = pointer.From(props.SubnetId)
				state.VnetId = pointer.From(props.VnetId)
			}

			metadata.SetID(id)
			return metadata.Encode(&state)
		},
	}
}
