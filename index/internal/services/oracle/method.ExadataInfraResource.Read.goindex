package github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/zones"
	"github.com/hashicorp/go-azure-sdk/resource-manager/oracledatabase/2025-03-01/cloudexadatainfrastructures"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (ExadataInfraResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Oracle.OracleClient.CloudExadataInfrastructures

			id, err := cloudexadatainfrastructures.ParseCloudExadataInfrastructureID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			result, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(result.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			state := ExadataInfraResourceModel{
				Name:              id.CloudExadataInfrastructureName,
				ResourceGroupName: id.ResourceGroupName,
			}

			if model := result.Model; model != nil {
				state.Location = location.Normalize(model.Location)
				state.Zones = model.Zones
				state.Tags = pointer.From(model.Tags)
				if props := model.Properties; props != nil {
					state.CustomerContacts = FlattenCustomerContacts(result.Model.Properties.CustomerContacts)
					state.Name = pointer.ToString(result.Model.Name)
					state.Location = result.Model.Location
					state.Zones = result.Model.Zones
					state.ResourceGroupName = id.ResourceGroupName
					state.Tags = pointer.From(result.Model.Tags)
					state.ComputeCount = pointer.From(props.ComputeCount)
					state.DisplayName = props.DisplayName
					state.StorageCount = pointer.From(props.StorageCount)
					state.Shape = props.Shape
					state.MaintenanceWindow = FlattenMaintenanceWindow(props.MaintenanceWindow)
					state.DatabaseServerType = pointer.From(props.DatabaseServerType)
					state.StorageServerType = pointer.From(props.StorageServerType)
				}
			}

			return metadata.Encode(&state)
		},
	}
}
