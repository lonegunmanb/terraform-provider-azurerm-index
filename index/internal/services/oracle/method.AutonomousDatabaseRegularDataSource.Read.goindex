package github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/oracledatabase/2025-03-01/autonomousdatabases"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (d AutonomousDatabaseRegularDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Oracle.OracleClient.AutonomousDatabases
			subscriptionId := metadata.Client.Account.SubscriptionId

			var state AutonomousDatabaseRegularDataModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := autonomousdatabases.NewAutonomousDatabaseID(subscriptionId, state.ResourceGroupName, state.Name)

			resp, err := client.Get(ctx, id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return fmt.Errorf("%s was not found", id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			if model := resp.Model; model != nil {
				state.Location = location.Normalize(model.Location)
				state.Tags = pointer.From(model.Tags)
				if props := model.Properties; props != nil {
					adbsProps := props.AutonomousDatabaseBaseProperties()

					state.ActualUsedDataStorageSizeInTbs = pointer.From(adbsProps.ActualUsedDataStorageSizeInTbs)
					state.AllocatedStorageSizeInTbs = pointer.From(adbsProps.AllocatedStorageSizeInTbs)
					state.AutonomousDatabaseId = pointer.From(adbsProps.AutonomousDatabaseId)
					state.AutoScalingEnabled = pointer.From(adbsProps.IsAutoScalingEnabled)
					state.AutoScalingForStorageEnabled = pointer.From(adbsProps.IsAutoScalingForStorageEnabled)
					state.AvailableUpgradeVersions = pointer.From(adbsProps.AvailableUpgradeVersions)
					state.BackupRetentionPeriodInDays = pointer.From(adbsProps.BackupRetentionPeriodInDays)
					state.CharacterSet = pointer.From(adbsProps.CharacterSet)
					state.ComputeCount = pointer.From(adbsProps.ComputeCount)
					state.CpuCoreCount = pointer.From(adbsProps.CpuCoreCount)
					state.DataStorageSizeInGbs = pointer.From(adbsProps.DataStorageSizeInGbs)
					state.DataStorageSizeInTbs = pointer.From(adbsProps.DataStorageSizeInTbs)
					state.DbVersion = pointer.From(adbsProps.DbVersion)
					state.DisplayName = pointer.From(adbsProps.DisplayName)
					state.FailedDataRecoveryInSeconds = pointer.From(adbsProps.FailedDataRecoveryInSeconds)
					state.LifecycleDetails = pointer.From(adbsProps.LifecycleDetails)
					state.LocalAdgAutoFailoverMaxDataLossLimit = pointer.From(adbsProps.LocalAdgAutoFailoverMaxDataLossLimit)
					state.LocalDataGuardEnabled = pointer.From(adbsProps.IsLocalDataGuardEnabled)
					state.LongTermBackupSchedule = FlattenLongTermBackUpScheduleDetails(adbsProps.LongTermBackupSchedule)
					state.MemoryAreaInGbs = pointer.From(adbsProps.InMemoryAreaInGbs)
					state.MemoryPerOracleComputeUnitInGbs = pointer.From(adbsProps.MemoryPerOracleComputeUnitInGbs)
					state.MtlsConnectionRequired = pointer.From(adbsProps.IsMtlsConnectionRequired)
					state.NcharacterSet = pointer.From(adbsProps.NcharacterSet)
					state.NextLongTermBackupTimeStamp = pointer.From(adbsProps.NextLongTermBackupTimeStamp)
					state.Ocid = pointer.From(adbsProps.Ocid)
					state.OciUrl = pointer.From(adbsProps.OciURL)
					state.PeerDbId = pointer.From(adbsProps.PeerDbId)
					state.PeerDbIds = pointer.From(adbsProps.PeerDbIds)
					state.Preview = pointer.From(adbsProps.IsPreview)
					state.PreviewVersionWithServiceTermsAccepted = pointer.From(adbsProps.IsPreviewVersionWithServiceTermsAccepted)
					state.PrivateEndpoint = pointer.From(adbsProps.PrivateEndpoint)
					state.PrivateEndpointIP = pointer.From(adbsProps.PrivateEndpointIP)
					state.PrivateEndpointLabel = pointer.From(adbsProps.PrivateEndpointLabel)
					state.ProvisionableCPUs = pointer.From(adbsProps.ProvisionableCPUs)
					state.RemoteDataGuardEnabled = pointer.From(adbsProps.IsRemoteDataGuardEnabled)
					state.ServiceConsoleUrl = pointer.From(adbsProps.ServiceConsoleURL)
					state.SqlWebDeveloperUrl = pointer.From(adbsProps.SqlWebDeveloperURL)
					state.SubnetId = pointer.From(adbsProps.SubnetId)
					state.SupportedRegionsToCloneTo = pointer.From(adbsProps.SupportedRegionsToCloneTo)
					state.TimeCreated = pointer.From(adbsProps.TimeCreated)
					state.TimeDataGuardRoleChanged = pointer.From(adbsProps.TimeDataGuardRoleChanged)
					state.TimeDeletionOfFreeAutonomousDatabase = pointer.From(adbsProps.TimeDeletionOfFreeAutonomousDatabase)
					state.TimeLocalDataGuardEnabled = pointer.From(adbsProps.TimeLocalDataGuardEnabled)
					state.TimeMaintenanceBegin = pointer.From(adbsProps.TimeMaintenanceBegin)
					state.TimeMaintenanceEnd = pointer.From(adbsProps.TimeMaintenanceEnd)
					state.TimeOfLastFailover = pointer.From(adbsProps.TimeOfLastFailover)
					state.TimeOfLastRefresh = pointer.From(adbsProps.TimeOfLastRefresh)
					state.TimeOfLastRefreshPoint = pointer.From(adbsProps.TimeOfLastRefreshPoint)
					state.TimeOfLastSwitchover = pointer.From(adbsProps.TimeOfLastSwitchover)
					state.TimeReclamationOfFreeAutonomousDatabase = pointer.From(adbsProps.TimeReclamationOfFreeAutonomousDatabase)
					state.UsedDataStorageSizeInGbs = pointer.From(adbsProps.UsedDataStorageSizeInGbs)
					state.UsedDataStorageSizeInTbs = pointer.From(adbsProps.UsedDataStorageSizeInTbs)
					state.VnetId = pointer.From(adbsProps.VnetId)
					state.AllowedIps = pointer.From(adbsProps.WhitelistedIPs)
				}
			}

			metadata.SetID(id)

			return metadata.Encode(&state)
		},
	}
}
