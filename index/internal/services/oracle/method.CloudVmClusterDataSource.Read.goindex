package github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/oracledatabase/2025-03-01/cloudvmclusters"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/oracle/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (d CloudVmClusterDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Oracle.OracleClient.CloudVMClusters
			subscriptionId := metadata.Client.Account.SubscriptionId

			var state CloudVmClusterDataModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := cloudvmclusters.NewCloudVMClusterID(subscriptionId, state.ResourceGroupName, state.Name)

			resp, err := client.Get(ctx, id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return fmt.Errorf("%s was not found", id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			if model := resp.Model; model != nil {
				state.Location = location.Normalize(model.Location)
				state.Tags = pointer.From(model.Tags)
				if props := model.Properties; props != nil {
					state.BackupSubnetCidr = pointer.From(props.BackupSubnetCidr)
					state.CloudExadataInfrastructureId = props.CloudExadataInfrastructureId
					state.ClusterName = pointer.From(props.ClusterName)
					state.CompartmentId = pointer.From(props.CompartmentId)
					state.ComputeModel = pointer.FromEnum(props.ComputeModel)
					state.ComputeNodes = pointer.From(props.ComputeNodes)
					state.CpuCoreCount = props.CpuCoreCount
					state.DataStoragePercentage = pointer.From(props.DataStoragePercentage)
					state.DataStorageSizeInTbs = pointer.From(props.DataStorageSizeInTbs)
					state.DbNodeStorageSizeInGbs = pointer.From(props.DbNodeStorageSizeInGbs)
					state.DbServers = pointer.From(props.DbServers)
					state.DiskRedundancy = string(pointer.From(props.DiskRedundancy))
					state.DisplayName = props.DisplayName
					state.Domain = pointer.From(props.Domain)
					state.FileSystemConfiguration = FlattenFileSystemConfigurationDetails(props.FileSystemConfigurationDetails)
					state.GiVersion = props.GiVersion
					state.Hostname = removeHostnameSuffix(props.Hostname)
					state.HostnameActual = props.Hostname
					state.IormConfigCache = FlattenExadataIormConfig(props.IormConfigCache)
					state.IsLocalBackupEnabled = pointer.From(props.IsLocalBackupEnabled)
					state.IsSparseDiskgroupEnabled = pointer.From(props.IsSparseDiskgroupEnabled)
					state.LastUpdateHistoryEntryId = pointer.From(props.LastUpdateHistoryEntryId)
					state.LicenseModel = string(pointer.From(props.LicenseModel))
					state.LifecycleDetails = pointer.From(props.LifecycleDetails)
					state.LifecycleState = string(*props.LifecycleState)
					state.ListenerPort = pointer.From(props.ListenerPort)
					state.MemorySizeInGbs = pointer.From(props.MemorySizeInGbs)
					state.NodeCount = pointer.From(props.NodeCount)
					state.NsgUrl = pointer.From(props.NsgURL)
					state.OciUrl = pointer.From(props.OciURL)
					state.Ocid = pointer.From(props.Ocid)
					state.Shape = pointer.From(props.Shape)
					state.StorageSizeInGbs = pointer.From(props.StorageSizeInGbs)
					state.SubnetId = props.SubnetId
					state.SubnetOcid = pointer.From(props.SubnetOcid)
					state.SystemVersion = pointer.From(props.SystemVersion)
					state.TimeCreated = pointer.From(props.TimeCreated)
					state.TimeZone = pointer.From(props.TimeZone)
					state.VnetId = props.VnetId
					state.ZoneId = pointer.From(props.ZoneId)
				}
			}

			metadata.SetID(id)

			return metadata.Encode(&state)
		},
	}
}
