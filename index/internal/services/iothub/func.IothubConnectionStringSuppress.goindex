package github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub
import (
	"fmt"
	"log"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	eventhubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/eventhub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub/parse"
	iothubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub/validate"
	servicebusValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/servicebus/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	devices "github.com/jackofallops/kermit/sdk/iothub/2022-04-30-preview/iothub"
)
func IothubConnectionStringSuppress(k, old, new string, d *pluginsdk.ResourceData) bool {
	secretKeyRegex := regexp.MustCompile("(SharedAccessKey|AccountKey)=[^;]+")
	sbProtocolRegex := regexp.MustCompile("sb://([^:]+)(:5671)?/;")

	// Azure will always mask the Access Keys and will include the port number in the GET response
	// 5671 is the default port for Azure Service Bus connections
	maskedNew := sbProtocolRegex.ReplaceAllString(new, "sb://$1:5671/;")
	maskedNew = secretKeyRegex.ReplaceAllString(maskedNew, "$1=****")

	oldMap := connectionStringToMap(old)
	maskedNewMap := connectionStringToMap(maskedNew)
	if oldMap == nil || maskedNewMap == nil {
		return false
	}
	if len(oldMap) != len(maskedNewMap) {
		return false
	}
	for k, v := range oldMap {
		newV, ok := maskedNewMap[k]
		if !ok {
			return false
		}
		if newV != v {
			return false
		}
	}

	return true
}
