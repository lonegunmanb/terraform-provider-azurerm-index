package github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub
import (
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/deviceprovisioningservices/2022-02-05/iotdpsresource"
	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceIotHubDPSSharedAccessPolicyRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).IoTHub.DPSResourceClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := iotdpsresource.ParseKeyID(d.Id())
	if err != nil {
		return err
	}

	iothubDpsId := commonids.NewProvisioningServiceID(id.SubscriptionId, id.ResourceGroupName, id.ProvisioningServiceName)
	iothubDps, err := client.Get(ctx, iothubDpsId)
	if err != nil {
		return fmt.Errorf("retrieving IotHub DPS %q: %+v", id, err)
	}

	accessPolicy, err := client.ListKeysForKeyName(ctx, *id)
	if err != nil {
		if response.WasNotFound(accessPolicy.HttpResponse) {
			log.Printf("[DEBUG] %s - removing from state", id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("loading %s: %+v", id, err)
	}

	d.Set("name", id.KeyName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := accessPolicy.Model; model != nil {
		d.Set("primary_key", model.PrimaryKey)
		d.Set("secondary_key", model.SecondaryKey)

		if iothubDpsModel := iothubDps.Model; iothubDpsModel != nil {
			primaryConnectionString := ""
			secondaryConnectionString := ""
			properties := iothubDpsModel.Properties
			if properties.ServiceOperationsHostName != nil {
				hostname := properties.ServiceOperationsHostName
				if primary := model.PrimaryKey; primary != nil {
					primaryConnectionString = getSAPConnectionString(*hostname, id.KeyName, *primary)
				}
				if secondary := model.SecondaryKey; secondary != nil {
					secondaryConnectionString = getSAPConnectionString(*hostname, id.KeyName, *secondary)
				}
			}
			d.Set("primary_connection_string", primaryConnectionString)
			d.Set("secondary_connection_string", secondaryConnectionString)
		}

		rights := flattenDpsAccessRights(model.Rights)
		d.Set("enrollment_read", rights.enrollmentRead)
		d.Set("enrollment_write", rights.enrollmentWrite)
		d.Set("registration_read", rights.registrationRead)
		d.Set("registration_write", rights.registrationWrite)
		d.Set("service_config", rights.serviceConfig)
	}

	return nil
}
