package github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	azValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub/validate"
	storageValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/storage/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	devices "github.com/jackofallops/kermit/sdk/iothub/2022-04-30-preview/iothub"
)
func (r IotHubFileUploadResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.IoTHub.ResourceClient

			id, err := parse.IotHubID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			iotHub, err := client.Get(ctx, id.ResourceGroup, id.Name)
			if err != nil {
				if utils.ResponseWasNotFound(iotHub.Response) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %q: %+v", id, err)
			}

			state := IotHubFileUploadResourceModel{
				AuthenticationType:   string(devices.AuthenticationTypeKeyBased),
				ConnectionString:     "",
				ContainerName:        "",
				DefaultTTL:           "PT1H",
				IdentityId:           "",
				IotHubId:             id.ID(),
				LockDuration:         "PT1M",
				MaxDeliveryCount:     10,
				NotificationsEnabled: false,
				SasTTL:               "PT1H",
			}

			if props := iotHub.Properties; props != nil {
				if v := props.EnableFileUploadNotifications; v != nil {
					state.NotificationsEnabled = *v
				}

				if messagingEndpoint, ok := props.MessagingEndpoints["fileNotifications"]; ok {
					if v := messagingEndpoint.TTLAsIso8601; v != nil {
						state.DefaultTTL = *v
					}
					if v := messagingEndpoint.LockDurationAsIso8601; v != nil {
						state.LockDuration = *v
					}
					if v := messagingEndpoint.MaxDeliveryCount; v != nil {
						state.MaxDeliveryCount = int64(*v)
					}
				}

				if storageEndpoint, ok := props.StorageEndpoints["$default"]; ok {
					if v := string(storageEndpoint.AuthenticationType); v != "" {
						state.AuthenticationType = v
					}
					if v := storageEndpoint.ConnectionString; v != nil {
						state.ConnectionString = *v
					}
					if v := storageEndpoint.ContainerName; v != nil {
						state.ContainerName = *v
					}
					if v := storageEndpoint.Identity; v != nil && v.UserAssignedIdentity != nil {
						state.IdentityId = *v.UserAssignedIdentity
					}
					if v := storageEndpoint.SasTTLAsIso8601; v != nil {
						state.SasTTL = *v
					}
				}
			}

			return metadata.Encode(&state)
		},
		Timeout: 5 * time.Minute,
	}
}
