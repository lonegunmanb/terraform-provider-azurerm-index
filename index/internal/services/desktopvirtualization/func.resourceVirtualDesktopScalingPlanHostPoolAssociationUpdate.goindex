package github.com/hashicorp/terraform-provider-azurerm/internal/services/desktopvirtualization
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/desktopvirtualization/2024-04-03/scalingplan"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/desktopvirtualization/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceVirtualDesktopScalingPlanHostPoolAssociationUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).DesktopVirtualization.ScalingPlansClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.ScalingPlanHostPoolAssociationID(d.Id())
	if err != nil {
		return err
	}

	locks.ByName(id.ScalingPlan.ScalingPlanName, scalingPlanResourceType)
	defer locks.UnlockByName(id.ScalingPlan.ScalingPlanName, scalingPlanResourceType)

	locks.ByName(id.HostPool.HostPoolName, hostPoolResourceType)
	defer locks.UnlockByName(id.HostPool.HostPoolName, hostPoolResourceType)

	existing, err := client.Get(ctx, id.ScalingPlan)
	if err != nil {
		if response.WasNotFound(existing.HttpResponse) {
			return fmt.Errorf("%s was not found", id.ScalingPlan)
		}

		return fmt.Errorf("retrieving %s: %+v", id.ScalingPlan, err)
	}
	if existing.Model == nil {
		return fmt.Errorf("retrieving %s: model was nil", id.ScalingPlan)
	}
	model := *existing.Model
	if !scalingPlanHostPoolAssociationExists(model.Properties, id.HostPool.ID()) {
		log.Printf("[DEBUG] Association between %s and %s was not found - removing from state!", id.ScalingPlan, id.HostPool)
		d.SetId("")
		return nil
	}

	hostPoolReferences := []scalingplan.ScalingHostPoolReference{}
	hostPoolId := id.HostPool.ID()
	if v := model.Properties.HostPoolReferences; v != nil {
		for _, referenceId := range *v {
			if referenceId.HostPoolArmPath != nil {
				if strings.EqualFold(*referenceId.HostPoolArmPath, hostPoolId) {
					referenceId.ScalingPlanEnabled = utils.Bool(d.Get("enabled").(bool))
				}
			}
			hostPoolReferences = append(hostPoolReferences, referenceId)
		}
	}

	payload := scalingplan.ScalingPlanPatch{
		Properties: &scalingplan.ScalingPlanPatchProperties{
			HostPoolReferences: &hostPoolReferences,
			Schedules:          model.Properties.Schedules,
		},
		Tags: model.Tags,
	}
	if _, err = client.Update(ctx, id.ScalingPlan, payload); err != nil {
		return fmt.Errorf("updating association between %s and %s: %+v", id.ScalingPlan, id.HostPool, err)
	}

	return nil
}
