package github.com/hashicorp/terraform-provider-azurerm/internal/services/desktopvirtualization
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/desktopvirtualization/2022-02-10-preview/hostpool"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/desktopvirtualization/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceVirtualDesktopHostPoolRegistrationInfoRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).DesktopVirtualization.HostPoolsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.HostPoolRegistrationInfoID(d.Id())
	if err != nil {
		return err
	}

	hostPoolId := hostpool.NewHostPoolID(id.SubscriptionId, id.ResourceGroup, id.HostPoolName)
	resp, err := client.RetrieveRegistrationToken(ctx, hostPoolId)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] Registration Token was not found for %s - removing from state!", hostPoolId)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving Registration Token for %s: %+v", hostPoolId, err)
	}

	if resp.Model == nil || resp.Model.ExpirationTime == nil || resp.Model.Token == nil {
		log.Printf("HostPool is missing registration info - marking as gone")
		d.SetId("")
		return nil
	}

	d.Set("hostpool_id", hostPoolId.ID())
	d.Set("expiration_date", resp.Model.ExpirationTime)
	d.Set("token", resp.Model.Token)

	return nil
}
