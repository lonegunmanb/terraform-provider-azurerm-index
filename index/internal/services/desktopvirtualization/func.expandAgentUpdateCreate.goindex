package github.com/hashicorp/terraform-provider-azurerm/internal/services/desktopvirtualization
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/desktopvirtualization/2024-04-03/hostpool"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/desktopvirtualization/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandAgentUpdateCreate(input []interface{}) *hostpool.AgentUpdateProperties {
	if len(input) == 0 || input[0] == nil {
		return nil
	}

	raw := input[0].(map[string]interface{})

	props := hostpool.AgentUpdateProperties{}
	updatesScheduled := hostpool.SessionHostComponentUpdateTypeScheduled
	updatesDefault := hostpool.SessionHostComponentUpdateTypeDefault

	useSessionHostLocalTime := *utils.Bool(raw["use_session_host_timezone"].(bool))
	updateScheduleTimeZone := utils.String(raw["timezone"].(string))

	if raw["enabled"].(bool) {
		props.Type = &updatesScheduled
		if !useSessionHostLocalTime { // based on the priority used in the Azure Portal, if Session Host time is selected, this overrides the explicit TimeZone setting
			props.MaintenanceWindowTimeZone = updateScheduleTimeZone
			props.UseSessionHostLocalTime = &useSessionHostLocalTime
			props.MaintenanceWindows = expandAgentUpdateSchedule(raw["schedule"].([]interface{}))
		}
	} else {
		props.Type = &updatesDefault
		props.MaintenanceWindows = &[]hostpool.MaintenanceWindowProperties{}
		props.UseSessionHostLocalTime = &useSessionHostLocalTime // required by REST API even when set to Default/Disabled
		props.MaintenanceWindowTimeZone = updateScheduleTimeZone // required by REST API even when set to Default/Disabled
	}

	return &props
}
