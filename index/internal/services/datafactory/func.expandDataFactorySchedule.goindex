package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/datafactory/2018-06-01/datafactory" // nolint: staticcheck
)
func expandDataFactorySchedule(input []interface{}) *datafactory.RecurrenceSchedule {
	if len(input) == 0 || input[0] == nil {
		return nil
	}

	schedule := datafactory.RecurrenceSchedule{}

	value := input[0].(map[string]interface{})
	weekDays := make([]datafactory.DaysOfWeek, 0)
	for _, v := range value["days_of_week"].([]interface{}) {
		weekDays = append(weekDays, datafactory.DaysOfWeek(v.(string)))
	}
	if len(weekDays) > 0 {
		schedule.WeekDays = &weekDays
	}

	monthlyOccurrences := make([]datafactory.RecurrenceScheduleOccurrence, 0)
	for _, v := range value["monthly"].([]interface{}) {
		value := v.(map[string]interface{})
		monthlyOccurrences = append(monthlyOccurrences, datafactory.RecurrenceScheduleOccurrence{
			Day:        datafactory.DayOfWeek(value["weekday"].(string)),
			Occurrence: utils.Int32(int32(value["week"].(int))),
		})
	}
	if len(monthlyOccurrences) > 0 {
		schedule.MonthlyOccurrences = &monthlyOccurrences
	}

	if monthdays := value["days_of_month"].([]interface{}); len(monthdays) > 0 {
		schedule.MonthDays = utils.ExpandInt32Slice(monthdays)
	}
	if minutes := value["minutes"].([]interface{}); len(minutes) > 0 {
		schedule.Minutes = utils.ExpandInt32Slice(minutes)
	}
	if hours := value["hours"].([]interface{}); len(hours) > 0 {
		schedule.Hours = utils.ExpandInt32Slice(hours)
	}

	return &schedule
}
