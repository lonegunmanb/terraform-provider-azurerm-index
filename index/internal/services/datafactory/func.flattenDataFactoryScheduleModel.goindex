package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/datafactory/2018-06-01/datafactory" // nolint: staticcheck
)
func flattenDataFactoryScheduleModel(schedule *datafactory.RecurrenceSchedule) []TriggerSchedule {
	if schedule == nil {
		return []TriggerSchedule{}
	}

	result := TriggerSchedule{}
	results := []TriggerSchedule{}

	if schedule.Hours != nil {
		for _, v := range *schedule.Hours {
			result.Hours = append(result.Hours, int64(v))
		}
	}

	if schedule.Minutes != nil {
		for _, v := range *schedule.Minutes {
			result.Minutes = append(result.Minutes, int64(v))
		}
	}

	if schedule.MonthDays != nil {
		for _, v := range *schedule.MonthDays {
			result.DaysOfMonth = append(result.DaysOfMonth, int64(v))
		}
	}

	if schedule.WeekDays != nil {
		weekDays := make([]string, 0)
		for _, v := range *schedule.WeekDays {
			weekDays = append(weekDays, string(v))
		}
		result.DaysOfWeek = weekDays
	}

	if schedule.MonthlyOccurrences != nil {
		var monthlyOccurrences []TriggerScheduleScheduleMonthly
		for _, v := range *schedule.MonthlyOccurrences {
			occurrence := TriggerScheduleScheduleMonthly{}
			occurrence.Weekday = string(v.Day)
			if v.Occurrence != nil {
				occurrence.Week = int64(*v.Occurrence)
			}
			monthlyOccurrences = append(monthlyOccurrences, occurrence)
		}
		result.Monthly = monthlyOccurrences
	}
	results = append(results, result)
	return results
}
