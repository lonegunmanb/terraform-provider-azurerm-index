package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"fmt"
	"time"

	"github.com/Azure/go-autorest/autorest/date"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/datafactory/2018-06-01/datafactory" // nolint: staticcheck
)
func expandDataFactoryTriggerDependency(input []interface{}) *[]datafactory.BasicDependencyReference {
	if len(input) == 0 {
		return nil
	}

	result := make([]datafactory.BasicDependencyReference, 0, len(input))
	for _, item := range input {
		raw := item.(map[string]interface{})

		var trigger datafactory.BasicDependencyReference

		var offset, size *string
		if v := raw["offset"].(string); v != "" {
			offset = utils.String(v)
		}
		if v := raw["size"].(string); v != "" {
			size = utils.String(v)
		}

		if v := raw["trigger_name"].(string); v != "" {
			trigger = &datafactory.TumblingWindowTriggerDependencyReference{
				Offset: offset,
				Size:   size,
				ReferenceTrigger: &datafactory.TriggerReference{
					ReferenceName: utils.String(v),
					Type:          utils.String("TriggerReference"),
				},
			}
		} else {
			trigger = &datafactory.SelfDependencyTumblingWindowTriggerReference{
				Offset: offset,
				Size:   size,
			}
		}

		result = append(result, trigger)
	}
	return &result
}
