package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/dataflows"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenDataFactoryDataFlowSink(input *[]dataflows.DataFlowSink) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	result := make([]interface{}, 0)
	for _, v := range *input {
		result = append(result, map[string]interface{}{
			"name":                    v.Name,
			"description":             pointer.From(v.Description),
			"dataset":                 flattenDataFactoryDatasetReference(v.Dataset),
			"linked_service":          flattenDataFactoryLinkedServiceReference(v.LinkedService),
			"rejected_linked_service": flattenDataFactoryLinkedServiceReference(v.RejectedDataLinkedService),
			"schema_linked_service":   flattenDataFactoryLinkedServiceReference(v.SchemaLinkedService),
			"flowlet":                 flattenDataFactoryDataFlowReference(v.Flowlet),
		})
	}
	return result
}
