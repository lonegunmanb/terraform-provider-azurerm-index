package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/dataflows"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func expandDataFactoryDataFlowSource(input []interface{}) *[]dataflows.DataFlowSource {
	if len(input) == 0 || input[0] == nil {
		return nil
	}

	result := make([]dataflows.DataFlowSource, 0)
	for _, v := range input {
		raw := v.(map[string]interface{})
		result = append(result, dataflows.DataFlowSource{
			Description:         pointer.To(raw["description"].(string)),
			Name:                raw["name"].(string),
			Dataset:             expandDataFactoryDatasetReference(raw["dataset"].([]interface{})),
			LinkedService:       expandDataFactoryLinkedServiceReference(raw["linked_service"].([]interface{})),
			SchemaLinkedService: expandDataFactoryLinkedServiceReference(raw["schema_linked_service"].([]interface{})),
			Flowlet:             expandDataFactoryDataFlowReference(raw["flowlet"].([]interface{})),
		})
	}
	return &result
}
