package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/datafactory/2018-06-01/datafactory" // nolint: staticcheck
)
func flattenDataFactoryDataFlowTransformation(input *[]datafactory.Transformation) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	result := make([]interface{}, 0)
	for _, v := range *input {
		name := ""
		description := ""
		if v.Name != nil {
			name = *v.Name
		}
		if v.Description != nil {
			description = *v.Description
		}
		result = append(result, map[string]interface{}{
			"name":           name,
			"description":    description,
			"dataset":        flattenDataFactoryDatasetReference(v.Dataset),
			"linked_service": flattenDataFactoryLinkedServiceReference(v.LinkedService),
			"flowlet":        flattenDataFactoryDataFlowReference(v.Flowlet),
		})
	}
	return result
}
