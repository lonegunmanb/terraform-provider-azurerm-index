package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/datafactory/2018-06-01/datafactory" // nolint: staticcheck
)
func expandDataFactoryDataFlowTransformation(input []interface{}) *[]datafactory.Transformation {
	if len(input) == 0 || input[0] == nil {
		return nil
	}

	result := make([]datafactory.Transformation, 0)
	for _, v := range input {
		raw := v.(map[string]interface{})
		result = append(result, datafactory.Transformation{
			Description:   utils.String(raw["description"].(string)),
			Name:          utils.String(raw["name"].(string)),
			Dataset:       expandDataFactoryDatasetReference(raw["dataset"].([]interface{})),
			LinkedService: expandDataFactoryLinkedServiceReference(raw["linked_service"].([]interface{})),
			Flowlet:       expandDataFactoryDataFlowReference(raw["flowlet"].([]interface{})),
		})
	}
	return &result
}
