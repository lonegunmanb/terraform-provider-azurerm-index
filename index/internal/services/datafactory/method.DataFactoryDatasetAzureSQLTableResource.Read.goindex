package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/datafactory/2018-06-01/datafactory" // nolint: staticcheck
)
func (DataFactoryDatasetAzureSQLTableResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			d := metadata.ResourceData
			client := metadata.Client.DataFactory.DatasetClient
			id, err := parse.DataSetID(d.Id())
			if err != nil {
				return err
			}

			dataFactoryId := factories.NewFactoryID(id.SubscriptionId, id.ResourceGroup, id.FactoryName)
			var state DataFactoryDatasetAzureSQLTableResourceSchema

			resp, err := client.Get(ctx, id.ResourceGroup, id.FactoryName, id.Name, "")
			if err != nil {
				if utils.ResponseWasNotFound(resp.Response) {
					return metadata.MarkAsGone(id)
				}

				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			state.Name = id.Name
			state.DataFactoryId = dataFactoryId.ID()

			azureSqlTable, ok := resp.Properties.AsAzureSQLTableDataset()
			if !ok {
				return fmt.Errorf("classifying Data Factory Dataset Azure SQL Table %s: Expected: %q Received: %T", *id, datafactory.TypeBasicDatasetTypeAzureSQLTable, resp.Properties)
			}

			state.Description = pointer.From(azureSqlTable.Description)
			state.AdditionalProperties = azureSqlTable.AdditionalProperties

			state.Parameters = flattenDataSetParameters(azureSqlTable.Parameters)
			state.Annotations = flattenDataFactoryAnnotations(azureSqlTable.Annotations)

			if linkedService := azureSqlTable.LinkedServiceName; linkedService != nil && linkedService.ReferenceName != nil {
				state.LinkedServiceId = parse.NewLinkedServiceID(id.SubscriptionId, id.ResourceGroup, id.FactoryName, *linkedService.ReferenceName).ID()
			}

			if properties := azureSqlTable.AzureSQLTableDatasetTypeProperties; properties != nil {
				if val, ok := properties.Schema.(string); ok {
					state.Schema = val
				} else {
					state.Schema = ""
					log.Printf("[DEBUG] Skipping `schema` since it's not a string")
				}

				if val, ok := properties.Table.(string); ok {
					state.Table = val
				} else {
					state.Table = ""
					log.Printf("[DEBUG] Skipping `table` since it's not a string")
				}
			}

			state.Folder = ""
			if folder := azureSqlTable.Folder; folder != nil && folder.Name != nil {
				state.Folder = pointer.From(folder.Name)
			}

			state.SchemaColumn = flattenDataFactoryStructureColumnsToDatasetColumn(azureSqlTable.Structure)

			return metadata.Encode(&state)
		},
	}
}
