package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/datafactory/2018-06-01/datafactory" // nolint: staticcheck
)
func resourceDataFactoryDataFlowRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).DataFactory.DataFlowClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.DataFlowID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, id.ResourceGroup, id.FactoryName, id.Name, "")
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	mappingDataFlow, ok := resp.Properties.AsMappingDataFlow()
	if !ok {
		return fmt.Errorf("classifying type of %s: Expected: %q", id, datafactory.TypeBasicDataFlowTypeMappingDataFlow)
	}

	d.Set("name", id.Name)
	d.Set("data_factory_id", factories.NewFactoryID(id.SubscriptionId, id.ResourceGroup, id.FactoryName).ID())
	d.Set("description", mappingDataFlow.Description)

	if err := d.Set("annotations", flattenDataFactoryAnnotations(mappingDataFlow.Annotations)); err != nil {
		return fmt.Errorf("setting `annotations`: %+v", err)
	}

	folder := ""
	if mappingDataFlow.Folder != nil && mappingDataFlow.Folder.Name != nil {
		folder = *mappingDataFlow.Folder.Name
	}
	d.Set("folder", folder)

	if prop := mappingDataFlow.MappingDataFlowTypeProperties; prop != nil {
		d.Set("script", prop.Script)
		d.Set("script_lines", prop.ScriptLines)

		if err := d.Set("source", flattenDataFactoryDataFlowSource(prop.Sources)); err != nil {
			return fmt.Errorf("setting `source`: %+v", err)
		}
		if err := d.Set("sink", flattenDataFactoryDataFlowSink(prop.Sinks)); err != nil {
			return fmt.Errorf("setting `sink`: %+v", err)
		}
		if err := d.Set("transformation", flattenDataFactoryDataFlowTransformation(prop.Transformations)); err != nil {
			return fmt.Errorf("setting `transformation`: %+v", err)
		}
	}

	return nil
}
