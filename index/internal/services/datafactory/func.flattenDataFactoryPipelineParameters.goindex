package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/pipelines"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenDataFactoryPipelineParameters(input *map[string]pipelines.ParameterSpecification) map[string]interface{} {
	output := make(map[string]interface{})

	if input == nil {
		return output
	}
	for k, v := range *input {
		// we only support string parameters at this time
		if v.Type != pipelines.ParameterTypeString {
			log.Printf("[DEBUG] Skipping parameter %q since it's not a string", k)
			continue
		}

		output[k] = pointer.From(v.DefaultValue)
	}

	return output
}
