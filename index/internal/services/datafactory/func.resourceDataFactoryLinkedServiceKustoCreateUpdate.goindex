package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/datafactory/2018-06-01/datafactory" // nolint: staticcheck
)
func resourceDataFactoryLinkedServiceKustoCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).DataFactory.LinkedServiceClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	dataFactoryId, err := factories.ParseFactoryID(d.Get("data_factory_id").(string))
	if err != nil {
		return err
	}

	id := parse.NewLinkedServiceID(subscriptionId, dataFactoryId.ResourceGroupName, dataFactoryId.FactoryName, d.Get("name").(string))
	if d.IsNewResource() {
		existing, err := client.Get(ctx, id.ResourceGroup, id.FactoryName, id.Name, "")
		if err != nil {
			if !utils.ResponseWasNotFound(existing.Response) {
				return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
			}
		}
		if !utils.ResponseWasNotFound(existing.Response) {
			return tf.ImportAsExistsError("azurerm_data_factory_linked_service_kusto", id.ID())
		}
	}

	kustoLinkedService := &datafactory.AzureDataExplorerLinkedService{
		AzureDataExplorerLinkedServiceTypeProperties: &datafactory.AzureDataExplorerLinkedServiceTypeProperties{
			Endpoint: d.Get("kusto_endpoint").(string),
			Database: d.Get("kusto_database_name").(string),
		},
		Description: utils.String(d.Get("description").(string)),
		Type:        datafactory.TypeBasicLinkedServiceTypeAzureDataExplorer,
	}

	if d.Get("use_managed_identity").(bool) {
		kustoLinkedService.AzureDataExplorerLinkedServiceTypeProperties = &datafactory.AzureDataExplorerLinkedServiceTypeProperties{
			Endpoint: d.Get("kusto_endpoint").(string),
			Database: d.Get("kusto_database_name").(string),
		}
	} else if v, ok := d.GetOk("service_principal_id"); ok {
		kustoLinkedService.AzureDataExplorerLinkedServiceTypeProperties = &datafactory.AzureDataExplorerLinkedServiceTypeProperties{
			Endpoint:           d.Get("kusto_endpoint").(string),
			Database:           d.Get("kusto_database_name").(string),
			ServicePrincipalID: v.(string),
			ServicePrincipalKey: &datafactory.SecureString{
				Value: utils.String(d.Get("service_principal_key").(string)),
				Type:  datafactory.TypeSecureString,
			},
			Tenant: utils.String(d.Get("tenant").(string)),
		}
	} else {
		return fmt.Errorf("one of Managed Identity and service principal authentication must be set")
	}

	if v, ok := d.GetOk("parameters"); ok {
		kustoLinkedService.Parameters = expandLinkedServiceParameters(v.(map[string]interface{}))
	}

	if v, ok := d.GetOk("integration_runtime_name"); ok {
		kustoLinkedService.ConnectVia = expandDataFactoryLinkedServiceIntegrationRuntime(v.(string))
	}

	if v, ok := d.GetOk("additional_properties"); ok {
		kustoLinkedService.AdditionalProperties = v.(map[string]interface{})
	}

	if v, ok := d.GetOk("annotations"); ok {
		annotations := v.([]interface{})
		kustoLinkedService.Annotations = &annotations
	}

	linkedService := datafactory.LinkedServiceResource{
		Properties: kustoLinkedService,
	}

	if _, err := client.CreateOrUpdate(ctx, id.ResourceGroup, id.FactoryName, id.Name, linkedService, ""); err != nil {
		return fmt.Errorf("creating/updating %s: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceDataFactoryLinkedServiceKustoRead(d, meta)
}
