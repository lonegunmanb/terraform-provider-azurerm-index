package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
	"github.com/jackofallops/kermit/sdk/datafactory/2018-06-01/datafactory" // nolint: staticcheck
)
func resourceDataFactoryLinkedServiceAzureSQLDatabaseCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).DataFactory.LinkedServiceClient
	subscriptionId := meta.(*clients.Client).DataFactory.LinkedServiceClient.SubscriptionID
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	dataFactoryId, err := factories.ParseFactoryID(d.Get("data_factory_id").(string))
	if err != nil {
		return err
	}

	id := parse.NewLinkedServiceID(subscriptionId, dataFactoryId.ResourceGroupName, dataFactoryId.FactoryName, d.Get("name").(string))

	if d.IsNewResource() {
		existing, err := client.Get(ctx, id.ResourceGroup, id.FactoryName, id.Name, "")
		if err != nil {
			if !utils.ResponseWasNotFound(existing.Response) {
				return fmt.Errorf("checking for presence of existing Data Factory Azure SQL Database %s: %+v", id, err)
			}
		}

		if !utils.ResponseWasNotFound(existing.Response) {
			return tf.ImportAsExistsError("azurerm_data_factory_linked_service_azure_sql_database", id.ID())
		}
	}

	sqlDatabaseProperties := &datafactory.AzureSQLDatabaseLinkedServiceTypeProperties{}

	if v, ok := d.GetOk("connection_string"); ok {
		if d.Get("use_managed_identity").(bool) {
			sqlDatabaseProperties.ConnectionString = utils.String(v.(string))
		} else {
			sqlDatabaseProperties.ConnectionString = &datafactory.SecureString{
				Value: utils.String(v.(string)),
				Type:  datafactory.TypeSecureString,
			}
		}
	}

	if v, ok := d.GetOk("key_vault_connection_string"); ok {
		sqlDatabaseProperties.ConnectionString = expandAzureKeyVaultSecretReference(v.([]interface{}))
	}

	if d.Get("use_managed_identity").(bool) {
		sqlDatabaseProperties.Tenant = utils.String(d.Get("tenant_id").(string))
	} else {
		secureString := datafactory.SecureString{
			Value: utils.String(d.Get("service_principal_key").(string)),
			Type:  datafactory.TypeSecureString,
		}

		sqlDatabaseProperties.ServicePrincipalID = utils.String(d.Get("service_principal_id").(string))
		sqlDatabaseProperties.ServicePrincipalKey = &secureString
		if v := d.Get("tenant_id").(string); v != "" {
			sqlDatabaseProperties.Tenant = pointer.To(v)
		}
	}

	if v, ok := d.GetOk("key_vault_password"); ok {
		password := v.([]interface{})
		sqlDatabaseProperties.Password = expandAzureKeyVaultSecretReference(password)
	}

	azureSQLDatabaseLinkedService := &datafactory.AzureSQLDatabaseLinkedService{
		Description: utils.String(d.Get("description").(string)),
		AzureSQLDatabaseLinkedServiceTypeProperties: sqlDatabaseProperties,
		Type: datafactory.TypeBasicLinkedServiceTypeAzureSQLDatabase,
	}

	if v, ok := d.GetOk("parameters"); ok {
		azureSQLDatabaseLinkedService.Parameters = expandLinkedServiceParameters(v.(map[string]interface{}))
	}

	if v, ok := d.GetOk("integration_runtime_name"); ok {
		azureSQLDatabaseLinkedService.ConnectVia = expandDataFactoryLinkedServiceIntegrationRuntime(v.(string))
	}

	if v, ok := d.GetOk("additional_properties"); ok {
		azureSQLDatabaseLinkedService.AdditionalProperties = v.(map[string]interface{})
	}

	if v, ok := d.GetOk("annotations"); ok {
		annotations := v.([]interface{})
		azureSQLDatabaseLinkedService.Annotations = &annotations
	}

	if credentialName := d.Get("credential_name").(string); credentialName != "" {
		azureSQLDatabaseLinkedService.Credential = &datafactory.CredentialReference{
			ReferenceName: pointer.To(credentialName),
		}
	}

	linkedService := datafactory.LinkedServiceResource{
		Properties: azureSQLDatabaseLinkedService,
	}

	if _, err := client.CreateOrUpdate(ctx, id.ResourceGroup, id.FactoryName, id.Name, linkedService, ""); err != nil {
		return fmt.Errorf("creating/updating Data Factory Azure SQL Database %s: %+v", id, err)
	}

	d.SetId(id.ID())

	return resourceDataFactoryLinkedServiceAzureSQLDatabaseRead(d, meta)
}
