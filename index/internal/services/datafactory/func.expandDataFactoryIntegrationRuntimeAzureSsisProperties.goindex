package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/integrationruntimes"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/helper"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory/migration"
	sqlValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandDataFactoryIntegrationRuntimeAzureSsisProperties(d *pluginsdk.ResourceData) *integrationruntimes.IntegrationRuntimeSsisProperties {
	ssisProperties := &integrationruntimes.IntegrationRuntimeSsisProperties{
		LicenseType:                  pointer.To(integrationruntimes.IntegrationRuntimeLicenseType(d.Get("license_type").(string))),
		DataProxyProperties:          expandDataFactoryIntegrationRuntimeAzureSsisProxy(d.Get("proxy").([]interface{})),
		Edition:                      pointer.To(integrationruntimes.IntegrationRuntimeEdition(d.Get("edition").(string))),
		ExpressCustomSetupProperties: expandDataFactoryIntegrationRuntimeAzureSsisExpressCustomSetUp(d.Get("express_custom_setup").([]interface{})),
		PackageStores:                expandDataFactoryIntegrationRuntimeAzureSsisPackageStore(d.Get("package_store").([]interface{})),
	}

	if credentialName := d.Get("credential_name"); credentialName.(string) != "" {
		ssisProperties.Credential = &integrationruntimes.CredentialReference{
			ReferenceName: credentialName.(string),
			Type:          integrationruntimes.CredentialReferenceTypeCredentialReference,
		}
	}

	if catalogInfos, ok := d.GetOk("catalog_info"); ok && len(catalogInfos.([]interface{})) > 0 {
		catalogInfo := catalogInfos.([]interface{})[0].(map[string]interface{})

		// the property `elastic_pool_name` and `pricing_tier` share the same prop `CatalogPricingTier` in request and response.
		var pricingTier integrationruntimes.IntegrationRuntimeSsisCatalogPricingTier
		if elasticPoolName := catalogInfo["elastic_pool_name"]; elasticPoolName != nil && elasticPoolName.(string) != "" {
			pricingTier = integrationruntimes.IntegrationRuntimeSsisCatalogPricingTier(formatDataFactoryIntegrationRuntimeElasticPool(elasticPoolName.(string)))
		} else {
			pricingTier = integrationruntimes.IntegrationRuntimeSsisCatalogPricingTier(catalogInfo["pricing_tier"].(string))
		}

		ssisProperties.CatalogInfo = &integrationruntimes.IntegrationRuntimeSsisCatalogInfo{
			CatalogServerEndpoint: pointer.To(catalogInfo["server_endpoint"].(string)),
			CatalogPricingTier:    pointer.To(pricingTier),
		}

		if adminUserName := catalogInfo["administrator_login"]; adminUserName.(string) != "" {
			ssisProperties.CatalogInfo.CatalogAdminUserName = pointer.To(adminUserName.(string))
		}

		if adminPassword := catalogInfo["administrator_password"]; adminPassword.(string) != "" {
			ssisProperties.CatalogInfo.CatalogAdminPassword = &integrationruntimes.SecureString{
				Value: adminPassword.(string),
				Type:  string(helper.SecretTypeSecureString),
			}
		}

		if dualStandbyPairName := catalogInfo["dual_standby_pair_name"].(string); dualStandbyPairName != "" {
			ssisProperties.CatalogInfo.DualStandbyPairName = pointer.To(dualStandbyPairName)
		}
	}

	if customSetupScripts, ok := d.GetOk("custom_setup_script"); ok && len(customSetupScripts.([]interface{})) > 0 {
		customSetupScript := customSetupScripts.([]interface{})[0].(map[string]interface{})

		sasToken := &integrationruntimes.SecureString{
			Value: customSetupScript["sas_token"].(string),
			Type:  string(helper.SecretTypeSecureString),
		}

		ssisProperties.CustomSetupScriptProperties = &integrationruntimes.IntegrationRuntimeCustomSetupScriptProperties{
			BlobContainerUri: pointer.To(customSetupScript["blob_container_uri"].(string)),
			SasToken:         sasToken,
		}
	}

	return ssisProperties
}
