package github.com/hashicorp/terraform-provider-azurerm/internal/services/datafactory
import (
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/datafactory/2018-06-01/factories"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenGitHubRepoConfigurationDataSource(input factories.FactoryRepoConfiguration) []interface{} {
	output := make([]interface{}, 0)

	if v, ok := input.(factories.FactoryGitHubConfiguration); ok {
		gitUrl := ""
		if v.HostName != nil {
			gitUrl = *v.HostName
		}
		output = append(output, map[string]interface{}{
			"account_name":    v.AccountName,
			"branch_name":     v.CollaborationBranch,
			"git_url":         gitUrl,
			"repository_name": v.RepositoryName,
			"root_folder":     v.RootFolder,
		})
	}

	return output
}
