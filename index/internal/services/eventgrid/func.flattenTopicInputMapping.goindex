package github.com/hashicorp/terraform-provider-azurerm/internal/services/eventgrid
import (
	"fmt"
	"log"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventgrid/2022-06-15/topics"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenTopicInputMapping(input topics.InputSchemaMapping) []interface{} {
	val, ok := input.(topics.JsonInputSchemaMapping)
	if !ok {
		return []interface{}{}
	}

	dataVersion := ""
	eventTime := ""
	eventType := ""
	id := ""
	subject := ""
	topic := ""
	if props := val.Properties; props != nil {
		if props.EventTime != nil && props.EventTime.SourceField != nil {
			eventTime = *props.EventTime.SourceField
		}

		if props.Id != nil && props.Id.SourceField != nil {
			id = *props.Id.SourceField
		}

		if props.Topic != nil && props.Topic.SourceField != nil {
			topic = *props.Topic.SourceField
		}

		if props.DataVersion != nil && props.DataVersion.SourceField != nil {
			dataVersion = *props.DataVersion.SourceField
		}

		if props.EventType != nil && props.EventType.SourceField != nil {
			eventType = *props.EventType.SourceField
		}

		if props.Subject != nil && props.Subject.SourceField != nil {
			subject = *props.Subject.SourceField
		}
	}

	return []interface{}{
		map[string]interface{}{
			"data_version": dataVersion,
			"event_time":   eventTime,
			"event_type":   eventType,
			"id":           id,
			"subject":      subject,
			"topic":        topic,
		},
	}
}
