package github.com/hashicorp/terraform-provider-azurerm/internal/services/eventgrid
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventgrid/2022-06-15/eventsubscriptions"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceEventGridEventSubscriptionRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).EventGrid.EventSubscriptions
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := eventsubscriptions.ParseScopedEventSubscriptionID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[WARN] %s was not found - removing from state", *id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	fullUrlResp, err := client.GetFullURL(ctx, *id)
	if err != nil {
		// unexpected status 400 with error: InvalidRequest: Destination type of the event subscription XXXX
		// is StorageQueue which doesn't support full URL. Only webhook destination type supports full URL.
		if !response.WasBadRequest(fullUrlResp.HttpResponse) {
			return fmt.Errorf("retrieving full url for %s: %+v", *id, err)
		}
	}

	d.Set("name", id.EventSubscriptionName)
	d.Set("scope", id.Scope)

	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			expirationTimeUtc := ""
			if props.ExpirationTimeUtc != nil {
				t, err := props.GetExpirationTimeUtcAsTime()
				if err == nil {
					expirationTimeUtc = t.Format(time.RFC3339)
				}
			}
			d.Set("expiration_time_utc", expirationTimeUtc)

			eventDeliverySchema := ""
			if props.EventDeliverySchema != nil {
				eventDeliverySchema = string(*props.EventDeliverySchema)
			}
			d.Set("event_delivery_schema", eventDeliverySchema)

			destination := props.Destination
			deliveryIdentityFlattened := make([]interface{}, 0)
			if deliveryIdentity := props.DeliveryWithResourceIdentity; deliveryIdentity != nil {
				destination = deliveryIdentity.Destination
				deliveryIdentityFlattened = flattenEventSubscriptionIdentity(deliveryIdentity.Identity)
			}
			if err := d.Set("delivery_identity", deliveryIdentityFlattened); err != nil {
				return fmt.Errorf("setting `delivery_identity` for %s: %+v", *id, err)
			}

			existingMappingsFromState := expandEventSubscriptionDeliveryAttributeMappings(d.Get("delivery_property").([]interface{}))
			deliveryMappings := flattenEventSubscriptionDeliveryAttributeMappings(destination, existingMappingsFromState)
			if err := d.Set("delivery_property", deliveryMappings); err != nil {
				return fmt.Errorf("setting `delivery_property` for %s: %+v", *id, err)
			}

			if err := d.Set("azure_function_endpoint", flattenEventSubscriptionDestinationAzureFunction(destination)); err != nil {
				return fmt.Errorf("setting `azure_function_endpoint` for %s: %+v", *id, err)
			}

			d.Set("eventhub_endpoint_id", flattenEventSubscriptionDestinationEventHub(destination))
			d.Set("hybrid_connection_endpoint_id", flattenEventSubscriptionDestinationHybridConnection(destination))
			d.Set("service_bus_queue_endpoint_id", flattenEventSubscriptionDestinationServiceBusQueueEndpoint(destination))
			d.Set("service_bus_topic_endpoint_id", flattenEventSubscriptionDestinationServiceBusTopicEndpoint(destination))
			if err := d.Set("storage_queue_endpoint", flattenEventSubscriptionDestinationStorageQueueEndpoint(destination)); err != nil {
				return fmt.Errorf("setting `storage_queue_endpoint` for %s: %+v", *id, err)
			}
			if err := d.Set("webhook_endpoint", flattenEventSubscriptionWebhookEndpoint(destination, fullUrlResp.Model)); err != nil {
				return fmt.Errorf("setting `webhook_endpoint` for %s: %+v", *id, err)
			}

			deadLetterDestination := props.DeadLetterDestination
			deadLetterIdentityFlattened := make([]interface{}, 0)
			if deadLetterIdentity := props.DeadLetterWithResourceIdentity; deadLetterIdentity != nil {
				deadLetterDestination = deadLetterIdentity.DeadLetterDestination
				deadLetterIdentityFlattened = flattenEventSubscriptionIdentity(deadLetterIdentity.Identity)
			}
			if err := d.Set("dead_letter_identity", deadLetterIdentityFlattened); err != nil {
				return fmt.Errorf("setting `dead_letter_identity` for %s: %+v", *id, err)
			}
			if err := d.Set("storage_blob_dead_letter_destination", flattenEventSubscriptionStorageBlobDeadLetterDestination(deadLetterDestination)); err != nil {
				return fmt.Errorf("setting `storage_blob_dead_letter_destination` for %s: %+v", *id, err)
			}

			enableAdvancedFilteringOnArrays := false
			includedEventTypes := make([]string, 0)
			if filter := props.Filter; filter != nil {
				enableAdvancedFilteringOnArrays = pointer.From(filter.EnableAdvancedFilteringOnArrays)
				includedEventTypes = pointer.From(filter.IncludedEventTypes)
			}
			d.Set("advanced_filtering_on_arrays_enabled", enableAdvancedFilteringOnArrays)
			d.Set("included_event_types", includedEventTypes)
			if err := d.Set("advanced_filter", flattenEventSubscriptionAdvancedFilter(props.Filter)); err != nil {
				return fmt.Errorf("setting `advanced_filter` for %s: %+v", *id, err)
			}
			if err := d.Set("retry_policy", flattenEventSubscriptionRetryPolicy(props.RetryPolicy)); err != nil {
				return fmt.Errorf("setting `retry_policy` for %s: %+v", *id, err)
			}
			if err := d.Set("subject_filter", flattenEventSubscriptionSubjectFilter(props.Filter)); err != nil {
				return fmt.Errorf("setting `subject_filter` for %s: %+v", *id, err)
			}

			d.Set("labels", props.Labels)
		}
	}

	return nil
}
