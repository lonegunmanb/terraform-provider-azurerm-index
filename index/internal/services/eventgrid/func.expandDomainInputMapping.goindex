package github.com/hashicorp/terraform-provider-azurerm/internal/services/eventgrid
import (
	"fmt"
	"log"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventgrid/2025-02-15/domains"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandDomainInputMapping(d *pluginsdk.ResourceData) *domains.JsonInputSchemaMapping {
	imf, imfok := d.GetOk("input_mapping_fields")

	imdv, imdvok := d.GetOk("input_mapping_default_values")

	if !imfok && !imdvok {
		return nil
	}

	jismp := domains.JsonInputSchemaMappingProperties{}

	if imfok {
		mappings := imf.([]interface{})
		if len(mappings) > 0 && mappings[0] != nil {
			mapping := mappings[0].(map[string]interface{})

			if id := mapping["id"].(string); id != "" {
				jismp.Id = &domains.JsonField{SourceField: &id}
			}

			if eventTime := mapping["event_time"].(string); eventTime != "" {
				jismp.EventTime = &domains.JsonField{
					SourceField: &eventTime,
				}
			}

			if topic := mapping["topic"].(string); topic != "" {
				jismp.Topic = &domains.JsonField{
					SourceField: &topic,
				}
			}

			if dataVersion := mapping["data_version"].(string); dataVersion != "" {
				jismp.DataVersion = &domains.JsonFieldWithDefault{
					SourceField: &dataVersion,
				}
			}

			if subject := mapping["subject"].(string); subject != "" {
				jismp.Subject = &domains.JsonFieldWithDefault{
					SourceField: &subject,
				}
			}

			if eventType := mapping["event_type"].(string); eventType != "" {
				jismp.EventType = &domains.JsonFieldWithDefault{
					SourceField: &eventType,
				}
			}
		}
	}

	if imdvok {
		mappings := imdv.([]interface{})
		if len(mappings) > 0 && mappings[0] != nil {
			mapping := mappings[0].(map[string]interface{})

			if dataVersion := mapping["data_version"].(string); dataVersion != "" {
				jismp.DataVersion = &domains.JsonFieldWithDefault{
					DefaultValue: &dataVersion,
				}
			}

			if subject := mapping["subject"].(string); subject != "" {
				jismp.Subject = &domains.JsonFieldWithDefault{
					DefaultValue: &subject,
				}
			}

			if eventType := mapping["event_type"].(string); eventType != "" {
				jismp.EventType = &domains.JsonFieldWithDefault{
					DefaultValue: &eventType,
				}
			}
		}
	}

	return &domains.JsonInputSchemaMapping{
		Properties: &jismp,
	}
}
