package github.com/hashicorp/terraform-provider-azurerm/internal/services/eventgrid
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventgrid/2022-06-15/topics"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventgrid/2023-12-15-preview/namespaces"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenTopicSpacesConfiguration(topicSpacesConfig *namespaces.TopicSpacesConfiguration) ([]TopicSpacesConfigurationModel, error) {
	var output TopicSpacesConfigurationModel
	if topicSpacesConfig == nil {
		return nil, nil
	}

	output.MaximumSessionExpiryInHours = pointer.From(topicSpacesConfig.MaximumSessionExpiryInHours)
	output.MaximumClientSessionsPerAuthenticationName = pointer.From(topicSpacesConfig.MaximumClientSessionsPerAuthenticationName)
	var routeId string
	if topicSpacesConfig.RouteTopicResourceId != nil && *topicSpacesConfig.RouteTopicResourceId != "" {
		id, err := topics.ParseTopicID(*topicSpacesConfig.RouteTopicResourceId)
		if err != nil {
			return nil, err
		}
		routeId = id.ID()
	}
	output.RouteTopicResourceId = routeId

	if topicSpacesConfig.ClientAuthentication != nil {
		output.AlternativeAuthenticationNameSources = flattenAlternativeAuthenticationNameSources(topicSpacesConfig.ClientAuthentication.AlternativeAuthenticationNameSources)
	}
	if topicSpacesConfig.RoutingEnrichments != nil {
		output.DynamicRoutingEnrichment = flattenDynamicRoutingEnrichments(topicSpacesConfig.RoutingEnrichments.Dynamic)
		output.StaticRoutingEnrichment = flattenStaticRoutingEnrichments(topicSpacesConfig.RoutingEnrichments.Static)
	}

	return []TopicSpacesConfigurationModel{output}, nil
}
