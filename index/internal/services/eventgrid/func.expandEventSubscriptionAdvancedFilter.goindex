package github.com/hashicorp/terraform-provider-azurerm/internal/services/eventgrid
import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventgrid/2022-06-15/eventsubscriptions"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandEventSubscriptionAdvancedFilter(operatorType string, config map[string]interface{}) (eventsubscriptions.AdvancedFilter, error) {
	k := config["key"].(string)

	switch operatorType {
	case "bool_equals":
		v := config["value"].(bool)
		return eventsubscriptions.BoolEqualsAdvancedFilter{
			Key:   &k,
			Value: &v,
		}, nil
	case "number_greater_than":
		v := config["value"].(float64)
		return eventsubscriptions.NumberGreaterThanAdvancedFilter{
			Key:   &k,
			Value: &v,
		}, nil
	case "number_greater_than_or_equals":
		v := config["value"].(float64)
		return eventsubscriptions.NumberGreaterThanOrEqualsAdvancedFilter{
			Key:   &k,
			Value: &v,
		}, nil
	case "number_less_than":
		v := config["value"].(float64)
		return eventsubscriptions.NumberLessThanAdvancedFilter{
			Key:   &k,
			Value: &v,
		}, nil
	case "number_less_than_or_equals":
		v := config["value"].(float64)
		return eventsubscriptions.NumberLessThanOrEqualsAdvancedFilter{
			Key:   &k,
			Value: &v,
		}, nil
	case "number_in":
		v := utils.ExpandFloatSlice(config["values"].([]interface{}))
		return eventsubscriptions.NumberInAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "number_not_in":
		v := utils.ExpandFloatSlice(config["values"].([]interface{}))
		return eventsubscriptions.NumberNotInAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "string_begins_with":
		v := utils.ExpandStringSlice(config["values"].([]interface{}))
		return eventsubscriptions.StringBeginsWithAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "string_not_begins_with":
		v := utils.ExpandStringSlice(config["values"].([]interface{}))
		return eventsubscriptions.StringNotBeginsWithAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "string_ends_with":
		v := utils.ExpandStringSlice(config["values"].([]interface{}))
		return eventsubscriptions.StringEndsWithAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "string_not_ends_with":
		v := utils.ExpandStringSlice(config["values"].([]interface{}))
		return eventsubscriptions.StringNotEndsWithAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "string_contains":
		v := utils.ExpandStringSlice(config["values"].([]interface{}))
		return eventsubscriptions.StringContainsAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "string_not_contains":
		v := utils.ExpandStringSlice(config["values"].([]interface{}))
		return eventsubscriptions.StringNotContainsAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "string_in":
		v := utils.ExpandStringSlice(config["values"].([]interface{}))
		return eventsubscriptions.StringInAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "string_not_in":
		v := utils.ExpandStringSlice(config["values"].([]interface{}))
		return eventsubscriptions.StringNotInAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "is_not_null":
		return eventsubscriptions.IsNotNullAdvancedFilter{
			Key: &k,
		}, nil
	case "is_null_or_undefined":
		return eventsubscriptions.IsNullOrUndefinedAdvancedFilter{
			Key: &k,
		}, nil
	case "number_in_range":
		v := utils.ExpandFloatRangeSlice(config["values"].([]interface{}))
		return eventsubscriptions.NumberInRangeAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	case "number_not_in_range":
		v := utils.ExpandFloatRangeSlice(config["values"].([]interface{}))
		return eventsubscriptions.NumberNotInRangeAdvancedFilter{
			Key:    &k,
			Values: v,
		}, nil
	default:
		return nil, fmt.Errorf("Invalid `advanced_filter` operator_type %q used", operatorType)
	}
}
