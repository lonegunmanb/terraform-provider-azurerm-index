package github.com/hashicorp/terraform-provider-azurerm/internal/services/eventgrid
import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/eventgrid/2022-06-15/eventsubscriptions"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenEventSubscriptionWebhookEndpoint(input eventsubscriptions.EventSubscriptionDestination, fullUrl *eventsubscriptions.EventSubscriptionFullURL) []interface{} {
	output := make([]interface{}, 0)
	val, ok := input.(eventsubscriptions.WebHookEventSubscriptionDestination)
	if ok {
		webHookUrl := ""
		if fullUrl != nil {
			webHookUrl = *fullUrl.EndpointURL
		}

		azureActiveDirectoryApplicationIdOrUrl := ""
		azureActiveDirectoryTenantId := ""
		maxEventsPerBatch := 0
		preferredBatchSizeInKilobytes := 0
		webhookBaseURL := ""
		if props := val.Properties; props != nil {
			if props.EndpointBaseURL != nil {
				webhookBaseURL = *props.EndpointBaseURL
			}

			if props.MaxEventsPerBatch != nil {
				maxEventsPerBatch = int(*props.MaxEventsPerBatch)
			}

			if props.PreferredBatchSizeInKilobytes != nil {
				preferredBatchSizeInKilobytes = int(*props.PreferredBatchSizeInKilobytes)
			}

			if props.AzureActiveDirectoryTenantId != nil {
				azureActiveDirectoryTenantId = *props.AzureActiveDirectoryTenantId
			}

			if props.AzureActiveDirectoryApplicationIdOrUri != nil {
				azureActiveDirectoryApplicationIdOrUrl = *props.AzureActiveDirectoryApplicationIdOrUri
			}
		}

		output = append(output, map[string]interface{}{
			"url":                               webHookUrl,
			"base_url":                          webhookBaseURL,
			"max_events_per_batch":              maxEventsPerBatch,
			"preferred_batch_size_in_kilobytes": preferredBatchSizeInKilobytes,
			"active_directory_tenant_id":        azureActiveDirectoryTenantId,
			"active_directory_app_id_or_uri":    azureActiveDirectoryApplicationIdOrUrl,
		})
	}

	return output
}
