package github.com/hashicorp/terraform-provider-azurerm/internal/services/authorization
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/authorization/2022-05-01-preview/roledefinitions"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/authorization/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/authorization/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r RoleDefinitionResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Authorization.ScopedRoleDefinitionsClient

			stateId, err := parse.RoleDefinitionId(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			id := roledefinitions.NewScopedRoleDefinitionID(stateId.Scope, stateId.RoleID)

			resp, err := client.Get(ctx, id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(stateId)
				}

				return fmt.Errorf("retrieving %s: %+v", stateId, err)
			}

			state := RoleDefinitionModel{
				Scope:            stateId.Scope,
				RoleDefinitionId: stateId.RoleID,
			}

			if model := resp.Model; model != nil {
				// The Azure resource id of Role Definition is not as same as the one we used to create it.
				// So we read from the response.
				state.RoleDefinitionResourceId = pointer.From(model.Id)
				if prop := model.Properties; prop != nil {
					state.Name = pointer.From(model.Properties.RoleName)
					state.Description = pointer.From(prop.Description)
					state.Permissions = flattenRoleDefinitionPermissions(prop.Permissions)
					state.AssignableScopes = pointer.From(prop.AssignableScopes)
				}
			}

			return metadata.Encode(&state)
		},
	}
}
