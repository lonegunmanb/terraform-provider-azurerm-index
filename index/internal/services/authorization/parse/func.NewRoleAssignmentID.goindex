package github.com/hashicorp/terraform-provider-azurerm/internal/services/authorization/parse
import (
	"errors"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
)
func NewRoleAssignmentID(subscriptionId, resourceGroup, resourceProvider, resourceScope, managementGroup, name, tenantId, subscriptionAlias string, isSubLevel bool, isSubAliasLevel bool) (*RoleAssignmentId, error) {
	if subscriptionId == "" && resourceGroup == "" && managementGroup == "" && !isSubLevel && !isSubAliasLevel {
		return nil, errors.New("one of subscriptionId, resourceGroup, managementGroup, isSubscriptionLevel or isSubscriptionAliasLevel must be provided")
	}

	if managementGroup != "" {
		if subscriptionId != "" || resourceGroup != "" || isSubLevel {
			return nil, errors.New("cannot provide subscriptionId, resourceGroup or isSubscriptionLevel when managementGroup is provided")
		}
	}

	if isSubLevel {
		if subscriptionId != "" || resourceGroup != "" || managementGroup != "" {
			return nil, errors.New("cannot provide subscriptionId, resourceGroup or managementGroup when isSubscriptionLevel is provided")
		}
	}

	if isSubAliasLevel {
		if subscriptionId != "" || resourceGroup != "" || managementGroup != "" {
			return nil, errors.New("cannot provide subscriptionId, resourceGroup or managementGroup when isSubscriptionAliasLevel is provided")
		}
	}

	if resourceGroup != "" {
		if subscriptionId == "" {
			return nil, errors.New("subscriptionId must not be empty when resourceGroup is provided")
		}
	}

	return &RoleAssignmentId{
		SubscriptionID:           subscriptionId,
		ResourceGroup:            resourceGroup,
		ResourceProvider:         resourceProvider,
		ResourceScope:            resourceScope,
		ManagementGroup:          managementGroup,
		SubscriptionAlias:        subscriptionAlias,
		Name:                     name,
		TenantId:                 tenantId,
		IsSubscriptionLevel:      isSubLevel,
		IsSubscriptionAliasLevel: isSubAliasLevel,
	}, nil
}
