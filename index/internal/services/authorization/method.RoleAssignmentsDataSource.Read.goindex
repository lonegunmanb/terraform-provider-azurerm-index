package github.com/hashicorp/terraform-provider-azurerm/internal/services/authorization
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/authorization/2022-04-01/roleassignments"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r RoleAssignmentsDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Authorization.ScopedRoleAssignmentsClient

			var state RoleAssignmentsDataSourceModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := commonids.NewScopeID(state.Scope)

			options := roleassignments.DefaultListForScopeOperationOptions()
			// Root scope requires a filter, default to `atScope()`
			if state.Scope == "/" {
				options.Filter = pointer.To("atScope()")
			}

			if state.TenantID != "" {
				options.TenantId = pointer.To(state.TenantID)
			}

			if state.PrincipalID != "" {
				options.Filter = pointer.To(fmt.Sprintf("principalId eq '%s'", state.PrincipalID))
			}

			resp, err := client.ListForScope(ctx, id, options)
			if err != nil {
				return fmt.Errorf("listing role assignments for %s: %+v", id, err)
			}

			metadata.SetID(id)

			if model := resp.Model; model != nil {
				state.RoleAssignments = flattenRoleAssignmentsToModel(model, state.Scope, state.LimitAtScope)
			}

			return metadata.Encode(&state)
		},
	}
}
