package github.com/hashicorp/terraform-provider-azurerm/internal/services/authorization
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/authorization/2022-04-01/roleassignments"
	"github.com/hashicorp/go-azure-sdk/resource-manager/authorization/2022-05-01-preview/roledefinitions"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/authorization/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func (br roleAssignmentBaseResource) createFunc(resourceName, scope string) sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			roleAssignmentsClient := metadata.Client.Authorization.ScopedRoleAssignmentsClient
			roleDefinitionsClient := metadata.Client.Authorization.ScopedRoleDefinitionsClient
			subscriptionClient := metadata.Client.Subscription.SubscriptionsClient
			subscriptionId := metadata.Client.Account.SubscriptionId
			name := metadata.ResourceData.Get("name").(string)

			var roleDefinitionId string
			if v, ok := metadata.ResourceData.GetOk("role_definition_id"); ok {
				roleDefinitionId = v.(string)
			}

			if v, ok := metadata.ResourceData.GetOk("role_definition_name"); ok {
				roleName := v.(string)
				roleDefinitions, err := roleDefinitionsClient.List(ctx, commonids.NewScopeID(scope), roledefinitions.ListOperationOptions{Filter: pointer.To(fmt.Sprintf("roleName eq '%s'", roleName))})
				if err != nil {
					return fmt.Errorf("loading Role Definition List: %+v", err)
				}

				if roleDefinitions.Model == nil || len(*roleDefinitions.Model) != 1 || (*roleDefinitions.Model)[0].Id == nil {
					return fmt.Errorf("loading Role Definition List: failed to find role '%s'", roleName)
				}

				roleDefinitionId = *(*roleDefinitions.Model)[0].Id
			}

			if roleDefinitionId == "" {
				return fmt.Errorf("either 'role_definition_id' or 'role_definition_name' needs to be set")
			}

			metadata.ResourceData.Set("role_definition_id", roleDefinitionId)

			principalId := metadata.ResourceData.Get("principal_id").(string)

			var err error
			if name == "" {
				name, err = uuid.GenerateUUID()
				if err != nil {
					return fmt.Errorf("generating UUID for Role Assignment: %+v", err)
				}
			}

			tenantId := ""
			delegatedManagedIdentityResourceID := metadata.ResourceData.Get("delegated_managed_identity_resource_id").(string)
			if len(delegatedManagedIdentityResourceID) > 0 {
				tenantId, err = getTenantIdBySubscriptionId(ctx, subscriptionClient, subscriptionId)
				if err != nil {
					return err
				}
			}

			id := parse.NewScopedRoleAssignmentID(scope, name, tenantId)
			options := roleassignments.DefaultGetOperationOptions()
			if tenantId != "" {
				options.TenantId = &tenantId
			}

			existing, err := roleAssignmentsClient.Get(ctx, id.ScopedId, options)
			if err != nil {
				if !response.WasNotFound(existing.HttpResponse) {
					return fmt.Errorf("checking for presence of existing %s: %s", id, err)
				}
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return tf.ImportAsExistsError(resourceName, id.ID())
			}

			properties := roleassignments.RoleAssignmentCreateParameters{
				Properties: roleassignments.RoleAssignmentProperties{
					RoleDefinitionId: roleDefinitionId,
					PrincipalId:      principalId,
					Description:      pointer.To(metadata.ResourceData.Get("description").(string)),
				},
			}

			if len(delegatedManagedIdentityResourceID) > 0 {
				properties.Properties.DelegatedManagedIdentityResourceId = &delegatedManagedIdentityResourceID
			}

			condition := metadata.ResourceData.Get("condition").(string)
			conditionVersion := metadata.ResourceData.Get("condition_version").(string)

			if condition != "" {
				properties.Properties.Condition = &condition
				properties.Properties.ConditionVersion = &conditionVersion
			}

			skipPrincipalCheck := metadata.ResourceData.Get("skip_service_principal_aad_check").(bool)
			if skipPrincipalCheck {
				properties.Properties.PrincipalType = pointer.To(roleassignments.PrincipalTypeServicePrincipal)
			}

			deadline, ok := ctx.Deadline()
			if !ok {
				return fmt.Errorf("could not retrieve context deadline for %s", id)
			}

			if err = pluginsdk.Retry(time.Until(deadline), br.retryRoleAssignmentsClient(ctx, metadata, id, &properties)); err != nil {
				return err
			}

			metadata.SetID(id)
			return nil
		},

		Timeout: 30 * time.Minute,
	}
}
