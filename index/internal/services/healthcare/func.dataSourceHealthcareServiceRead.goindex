package github.com/hashicorp/terraform-provider-azurerm/internal/services/healthcare
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	service "github.com/hashicorp/go-azure-sdk/resource-manager/healthcareapis/2022-12-01/resource"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func dataSourceHealthcareServiceRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).HealthCare.HealthcareServiceClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := service.NewServiceID(subscriptionId, d.Get("resource_group_name").(string), d.Get("name").(string))
	resp, err := client.ServicesGet(ctx, id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return fmt.Errorf("%s was not found", id)
		}

		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	d.SetId(id.ID())

	if m := resp.Model; m != nil {
		d.Set("kind", string(m.Kind))

		if props := m.Properties; props != nil {
			if err := d.Set("access_policy_object_ids", flattenAccessPolicies(props.AccessPolicies)); err != nil {
				return fmt.Errorf("setting `access_policy_object_ids`: %+v", err)
			}

			cosmodDbKeyVaultKeyVersionlessId := ""
			cosmosDbThroughput := 0
			if cosmos := props.CosmosDbConfiguration; cosmos != nil {
				if v := cosmos.OfferThroughput; v != nil {
					cosmosDbThroughput = int(*v)
				}
				if v := cosmos.KeyVaultKeyUri; v != nil {
					cosmodDbKeyVaultKeyVersionlessId = *v
				}
			}
			d.Set("cosmosdb_key_vault_key_versionless_id", cosmodDbKeyVaultKeyVersionlessId)
			d.Set("cosmosdb_throughput", cosmosDbThroughput)

			if err := d.Set("authentication_configuration", flattenAuthentication(props.AuthenticationConfiguration)); err != nil {
				return fmt.Errorf("setting `authentication_configuration`: %+v", err)
			}

			if err := d.Set("cors_configuration", flattenCorsConfig(props.CorsConfiguration)); err != nil {
				return fmt.Errorf("setting `cors_configuration`: %+v", err)
			}
		}

		return tags.FlattenAndSet(d, m.Tags)
	}

	return nil
}
