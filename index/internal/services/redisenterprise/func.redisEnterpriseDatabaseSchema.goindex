package github.com/hashicorp/terraform-provider-azurerm/internal/services/redisenterprise
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/redisenterprise/2024-06-01-preview/databases"
	"github.com/hashicorp/go-azure-sdk/resource-manager/redisenterprise/2024-06-01-preview/redisenterprise"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/redisenterprise/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func redisEnterpriseDatabaseSchema() map[string]*pluginsdk.Schema {
	s := map[string]*pluginsdk.Schema{
		"name": {
			Type:         pluginsdk.TypeString,
			Optional:     true,
			ForceNew:     true,
			Default:      "default",
			ValidateFunc: validate.RedisEnterpriseDatabaseName,
		},

		"cluster_id": {
			Type:         pluginsdk.TypeString,
			Required:     true,
			ForceNew:     true,
			ValidateFunc: redisenterprise.ValidateRedisEnterpriseID,
		},

		"client_protocol": {
			Type:     pluginsdk.TypeString,
			Optional: true,
			ForceNew: true,
			Default:  string(redisenterprise.ProtocolEncrypted),
			ValidateFunc: validation.StringInSlice([]string{
				string(redisenterprise.ProtocolEncrypted),
				string(redisenterprise.ProtocolPlaintext),
			}, false),
		},

		"clustering_policy": {
			Type:     pluginsdk.TypeString,
			Optional: true,
			ForceNew: true,
			Default:  string(redisenterprise.ClusteringPolicyOSSCluster),
			ValidateFunc: validation.StringInSlice([]string{
				string(redisenterprise.ClusteringPolicyEnterpriseCluster),
				string(redisenterprise.ClusteringPolicyOSSCluster),
			}, false),
		},

		"eviction_policy": {
			Type:     pluginsdk.TypeString,
			Optional: true,
			ForceNew: true,
			Default:  string(redisenterprise.EvictionPolicyVolatileLRU),
			ValidateFunc: validation.StringInSlice([]string{
				string(redisenterprise.EvictionPolicyAllKeysLFU),
				string(redisenterprise.EvictionPolicyAllKeysLRU),
				string(redisenterprise.EvictionPolicyAllKeysRandom),
				string(redisenterprise.EvictionPolicyVolatileLRU),
				string(redisenterprise.EvictionPolicyVolatileLFU),
				string(redisenterprise.EvictionPolicyVolatileTTL),
				string(redisenterprise.EvictionPolicyVolatileRandom),
				string(redisenterprise.EvictionPolicyNoEviction),
			}, false),
		},

		"module": {
			Type:     pluginsdk.TypeList,
			Optional: true,
			ForceNew: true,
			MaxItems: 4,
			Elem: &pluginsdk.Resource{
				Schema: map[string]*pluginsdk.Schema{
					"name": {
						Type:     pluginsdk.TypeString,
						Required: true,
						ForceNew: true,
						ValidateFunc: validation.StringInSlice([]string{
							"RedisBloom",
							"RedisTimeSeries",
							"RediSearch",
							"RedisJSON",
						}, false),
					},

					"args": {
						Type:     pluginsdk.TypeString,
						Optional: true,
						ForceNew: true,
						Default:  "",
					},

					"version": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},
				},
			},
		},

		"linked_database_id": {
			Type:     pluginsdk.TypeSet,
			Optional: true,
			MaxItems: 5,
			Set:      pluginsdk.HashString,
			Elem: &pluginsdk.Schema{
				Type:         pluginsdk.TypeString,
				ValidateFunc: databases.ValidateDatabaseID,
			},
		},

		"linked_database_group_nickname": {
			Type:         pluginsdk.TypeString,
			Optional:     true,
			ForceNew:     true,
			RequiredWith: []string{"linked_database_id"},
		},

		// This attribute is currently in preview and is not returned by the RP
		// "persistence": {
		// 	Type:     pluginsdk.TypeList,
		// 	Optional: true,
		// 	MaxItems: 1,
		// 	Elem: &pluginsdk.Resource{
		// 		Schema: map[string]*pluginsdk.Schema{
		// 			"aof_enabled": {
		// 				Type:     pluginsdk.TypeBool,
		// 				Optional: true,
		// 			},

		// 			"aof_frequency": {
		// 				Type:     pluginsdk.TypeString,
		// 				Optional: true,
		// 				ValidateFunc: validation.StringInSlice([]string{
		// 					string(redisenterprise.Ones),
		// 					string(redisenterprise.Always),
		// 				}, false),
		// 			},

		// 			"rdb_enabled": {
		// 				Type:     pluginsdk.TypeBool,
		// 				Optional: true,
		// 			},

		// 			"rdb_frequency": {
		// 				Type:     pluginsdk.TypeString,
		// 				Optional: true,
		// 				ValidateFunc: validation.StringInSlice([]string{
		// 					string(redisenterprise.Oneh),
		// 					string(redisenterprise.Sixh),
		// 					string(redisenterprise.OneTwoh),
		// 				}, false),
		// 			},
		// 		},
		// 	},
		// },

		"port": {
			Type:         pluginsdk.TypeInt,
			Optional:     true,
			ForceNew:     true,
			Default:      10000,
			ValidateFunc: validation.IntBetween(0, 65353),
		},

		"primary_access_key": {
			Type:      pluginsdk.TypeString,
			Computed:  true,
			Sensitive: true,
		},

		"secondary_access_key": {
			Type:      pluginsdk.TypeString,
			Computed:  true,
			Sensitive: true,
		},
	}

	return s
}
