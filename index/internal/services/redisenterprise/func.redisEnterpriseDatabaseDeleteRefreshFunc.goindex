package github.com/hashicorp/terraform-provider-azurerm/internal/services/redisenterprise
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/redisenterprise/2024-06-01-preview/databases"
	"github.com/hashicorp/go-azure-sdk/resource-manager/redisenterprise/2024-06-01-preview/redisenterprise"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/redisenterprise/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func redisEnterpriseDatabaseDeleteRefreshFunc(ctx context.Context, databaseClient *databases.DatabasesClient, clusterClient *redisenterprise.RedisEnterpriseClient, clusterId redisenterprise.RedisEnterpriseId, databaseId databases.DatabaseId) pluginsdk.StateRefreshFunc {
	return func() (interface{}, string, error) {
		cluster, err := clusterClient.Get(ctx, clusterId)
		if err != nil {
			if response.WasNotFound(cluster.HttpResponse) {
				return "clusterNotFound", "clusterNotFound", nil
			}
		}
		db, err := databaseClient.Get(ctx, databaseId)
		if err != nil {
			if response.WasNotFound(db.HttpResponse) {
				return "dbNotFound", "dbNotFound", nil
			}
		}
		return db, "found", nil
	}
}
