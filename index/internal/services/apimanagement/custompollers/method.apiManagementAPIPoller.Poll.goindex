package github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement/custompollers
import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"time"

	"github.com/hashicorp/go-azure-sdk/resource-manager/apimanagement/2022-08-01/api"
	"github.com/hashicorp/go-azure-sdk/sdk/client"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
)
func (p apiManagementAPIPoller) Poll(ctx context.Context) (*pollers.PollResult, error) {
	if p.asyncID == "" {
		return &pollingSuccess, nil
	}

	opts := client.RequestOptions{
		ContentType: "application/json; charset=utf-8",
		ExpectedStatusCodes: []int{
			http.StatusOK,
			http.StatusAccepted,
			http.StatusCreated,
		},
		HttpMethod: http.MethodGet,
		Path:       p.id.ID(),
		OptionsObject: options{
			asyncId: p.asyncID,
		},
	}
	req, err := p.client.Client.NewRequest(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("building request: %+v", err)
	}

	resp, err := p.client.Client.Execute(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("retrieving %s: %+v", p.id, err)
	}

	// the response actually doesn't include a provisioningState property, so we only chech the http status code
	switch resp.StatusCode {
	case http.StatusOK:
		return &pollingSuccess, nil
	case http.StatusAccepted, http.StatusCreated:
		return &pollingInProgress, nil
	}

	return nil, fmt.Errorf("unexpected status code %d", resp.StatusCode)
}
