package github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement
import (
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/apimanagement/2022-08-01/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement/schemaz"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceApiManagementGlobalSchemaCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).ApiManagement.GlobalSchemaClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := schema.NewSchemaID(subscriptionId, d.Get("resource_group_name").(string), d.Get("api_management_name").(string), d.Get("schema_id").(string))
	if d.IsNewResource() {
		existing, err := client.GlobalSchemaGet(ctx, id)
		if err != nil {
			if !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for presence of existing %s: %s", id, err)
			}
		}

		if !response.WasNotFound(existing.HttpResponse) {
			return tf.ImportAsExistsError("azurerm_api_management_global_schema", id.ID())
		}
	}

	payload := schema.GlobalSchemaContract{
		Properties: &schema.GlobalSchemaContractProperties{
			Description: pointer.To(d.Get("description").(string)),
			SchemaType:  schema.SchemaType(d.Get("type").(string)),
		},
	}

	// value for type=xml, document for type=json
	value := d.Get("value")
	if d.Get("type").(string) == string(schema.SchemaTypeJson) {
		var document interface{}
		if err := json.Unmarshal([]byte(value.(string)), &document); err != nil {
			return fmt.Errorf(" error preparing value data to send %s: %s", id, err)
		}
		payload.Properties.Document = &document
	}
	if d.Get("type").(string) == string(schema.SchemaTypeXml) {
		payload.Properties.Value = &value
	}

	if err := client.GlobalSchemaCreateOrUpdateThenPoll(ctx, id, payload, schema.DefaultGlobalSchemaCreateOrUpdateOperationOptions()); err != nil {
		return fmt.Errorf("creating/updating %s: %s", id, err)
	}

	d.SetId(id.ID())
	return resourceApiManagementGlobalSchemaRead(d, meta)
}
