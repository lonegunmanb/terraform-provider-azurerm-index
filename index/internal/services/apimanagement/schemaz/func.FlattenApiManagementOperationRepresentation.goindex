package github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement/schemaz
import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/apimanagement/2022-08-01/apioperation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func FlattenApiManagementOperationRepresentation(input *[]apioperation.RepresentationContract) ([]interface{}, error) {
	if input == nil {
		return []interface{}{}, nil
	}

	outputs := make([]interface{}, 0)

	for _, v := range *input {
		output := make(map[string]interface{})

		output["content_type"] = v.ContentType

		formParameter, err := FlattenApiManagementOperationParameterContract(v.FormParameters)
		if err != nil {
			return nil, err
		}
		output["form_parameter"] = formParameter

		if v.Examples != nil {
			example, err := FlattenApiManagementOperationParameterExampleContract(*v.Examples)
			if err != nil {
				return nil, err
			}
			output["example"] = example
		}

		if v.SchemaId != nil {
			output["schema_id"] = *v.SchemaId
		}

		if v.TypeName != nil {
			output["type_name"] = *v.TypeName
		}

		outputs = append(outputs, output)
	}

	return outputs, nil
}
