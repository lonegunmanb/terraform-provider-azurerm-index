package github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-sdk/resource-manager/apimanagement/2022-08-01/apioperation"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/apimanagement/schemaz"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func flattenApiManagementOperationRequestContract(input *apioperation.RequestContract) ([]interface{}, error) {
	if input == nil {
		return []interface{}{}, nil
	}

	output := make(map[string]interface{})

	output["description"] = pointer.From(input.Description)

	header, err := schemaz.FlattenApiManagementOperationParameterContract(input.Headers)
	if err != nil {
		return nil, err
	}
	output["header"] = header

	queryParameter, err := schemaz.FlattenApiManagementOperationParameterContract(input.QueryParameters)
	if err != nil {
		return nil, err
	}
	output["query_parameter"] = queryParameter

	representation, err := schemaz.FlattenApiManagementOperationRepresentation(input.Representations)
	if err != nil {
		return nil, err
	}
	output["representation"] = representation

	return []interface{}{output}, nil
}
