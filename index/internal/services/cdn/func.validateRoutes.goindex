package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func validateRoutes(d *pluginsdk.ResourceData, meta interface{}, id *parse.FrontDoorCustomDomainId) ([]interface{}, error) {
	out := make([]interface{}, 0)
	o, n := d.GetChange("cdn_frontdoor_route_ids")
	oRoutes := o.([]interface{})
	nRoutes := n.([]interface{})

	if len(nRoutes) == 0 || nRoutes == nil || id == nil {
		return out, nil
	}

	oIds, _, err := expandRoutes(oRoutes)
	if err != nil {
		return out, err
	}

	nIds, result, err := expandRoutes(nRoutes)
	if err != nil {
		return out, err
	}

	// validate the new routes...
	if len(*nIds) != 0 {
		for _, v := range *nIds {
			// Make sure the route exists and get the routes custom domain association list...
			associations, _, err := getRouteProperties(d, meta, &v, "cdn_frontdoor_custom_domain_association")
			if err != nil {
				return out, err
			}

			// Make sure the custom domain is in the routes association list
			if len(associations) == 0 || !sliceContainsString(associations, id.ID()) {
				return out, fmt.Errorf("the CDN FrontDoor Route(Name: %q) is currently not associated with the CDN FrontDoor Custom Domain(Name: %q). Please remove the CDN FrontDoor Route from your 'cdn_frontdoor_custom_domain_association' configuration block", v.RouteName, id.CustomDomainName)
			}
		}

		if err := validateCustomDomainRoutes(nIds, id); err != nil {
			return out, err
		}
	}

	if len(oRoutes) != 0 {
		// now get the delta between the old and the new list, if any custom domains were removed from
		// the list we need to remove the custom domain association from those routes...
		if delta, _ := routeDelta(oIds, nIds); len(*delta) != 0 {
			if err = removeCustomDomainAssociationFromRoutes(d, meta, delta, id); err != nil {
				return out, err
			}
		}
	}

	return result, nil
}
