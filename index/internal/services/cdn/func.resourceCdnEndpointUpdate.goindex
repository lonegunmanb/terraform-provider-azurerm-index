package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/cdn/mgmt/2020-09-01/cdn" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCdnEndpointUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	endpointsClient := meta.(*clients.Client).Cdn.EndpointsClient
	profilesClient := meta.(*clients.Client).Cdn.ProfilesClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	log.Printf("[INFO] preparing arguments for Azure ARM CDN EndPoint update.")

	id, err := parse.EndpointID(d.Id())
	if err != nil {
		return err
	}

	location := azure.NormalizeLocation(d.Get("location").(string))
	httpAllowed := d.Get("is_http_allowed").(bool)
	httpsAllowed := d.Get("is_https_allowed").(bool)
	cachingBehaviour := d.Get("querystring_caching_behaviour").(string)
	originPath := d.Get("origin_path").(string)
	probePath := d.Get("probe_path").(string)
	optimizationType := d.Get("optimization_type").(string)
	t := d.Get("tags").(map[string]interface{})

	// NOTE: "Only tags can be updated after creating an endpoint." So only
	// call 'PATCH' if the only thing that has changed are the tags, else
	// call the 'PUT' instead. https://learn.microsoft.com/rest/api/cdn/endpoints/update?tabs=HTTP
	// see issue #22326 for more details.
	updateTypePATCH := !d.HasChanges("is_http_allowed", "is_https_allowed", "querystring_caching_behaviour", "origin_path",
		"probe_path", "optimization_type", "origin_host_header", "content_types_to_compress", "geo_filter",
		"is_compression_enabled", "probe_path", "geo_filter", "optimization_type", "global_delivery_rule",
		"delivery_rule")

	if updateTypePATCH {
		log.Printf("[INFO] No changes detected using PATCH for Azure ARM CDN EndPoint update.")

		if !d.HasChange("tags") {
			log.Printf("[INFO] 'tags' did not change, skipping Azure ARM CDN EndPoint update.")
			return resourceCdnEndpointRead(d, meta)
		}

		endpoint := cdn.EndpointUpdateParameters{
			EndpointPropertiesUpdateParameters: &cdn.EndpointPropertiesUpdateParameters{},
			Tags:                               tags.Expand(t),
		}

		future, err := endpointsClient.Update(ctx, id.ResourceGroup, id.ProfileName, id.Name, endpoint)
		if err != nil {
			return fmt.Errorf("updating %s: %+v", *id, err)
		}

		if err = future.WaitForCompletionRef(ctx, endpointsClient.Client); err != nil {
			return fmt.Errorf("waiting for update of %s: %+v", *id, err)
		}
	} else {
		log.Printf("[INFO] One or more fields have changed using PUT for Azure ARM CDN EndPoint update.")

		endpoint := cdn.Endpoint{
			Location: &location,
			EndpointProperties: &cdn.EndpointProperties{
				IsHTTPAllowed:              &httpAllowed,
				IsHTTPSAllowed:             &httpsAllowed,
				QueryStringCachingBehavior: cdn.QueryStringCachingBehavior(cachingBehaviour),
			},
			Tags: tags.Expand(t),
		}

		if v, ok := d.GetOk("origin_host_header"); ok {
			endpoint.OriginHostHeader = utils.String(v.(string))
		}

		if _, ok := d.GetOk("content_types_to_compress"); ok {
			contentTypes := expandArmCdnEndpointContentTypesToCompress(d)
			endpoint.ContentTypesToCompress = &contentTypes
		}

		if _, ok := d.GetOk("geo_filter"); ok {
			geoFilters := expandCdnEndpointGeoFilters(d)
			endpoint.GeoFilters = geoFilters
		}

		if v, ok := d.GetOk("is_compression_enabled"); ok {
			endpoint.IsCompressionEnabled = utils.Bool(v.(bool))
		}

		if optimizationType != "" {
			endpoint.OptimizationType = cdn.OptimizationType(optimizationType)
		}

		if originPath != "" {
			endpoint.OriginPath = utils.String(originPath)
		}

		if probePath != "" {
			endpoint.ProbePath = utils.String(probePath)
		}

		origins := expandAzureRmCdnEndpointOrigins(d)
		if len(origins) > 0 {
			endpoint.Origins = &origins
		}

		profile, err := profilesClient.Get(ctx, id.ResourceGroup, id.ProfileName)
		if err != nil {
			return fmt.Errorf("retrieving parent CDN Profile for %s: %+v", id, err)
		}

		if profile.Sku != nil {
			globalDeliveryRulesRaw := d.Get("global_delivery_rule").([]interface{})
			deliveryRulesRaw := d.Get("delivery_rule").([]interface{})
			deliveryPolicy, err := expandArmCdnEndpointDeliveryPolicy(globalDeliveryRulesRaw, deliveryRulesRaw)
			if err != nil {
				return fmt.Errorf("expanding `global_delivery_rule` or `delivery_rule`: %s", err)
			}

			if profile.Sku.Name != cdn.SkuNameStandardMicrosoft && len(*deliveryPolicy.Rules) > 0 {
				return fmt.Errorf("`global_delivery_rule` and `delivery_rule` are only allowed when `Standard_Microsoft` sku is used. Profile sku:  %s", profile.Sku.Name)
			}

			if profile.Sku.Name == cdn.SkuNameStandardMicrosoft {
				endpoint.DeliveryPolicy = deliveryPolicy
			}
		}

		future, err := endpointsClient.Create(ctx, id.ResourceGroup, id.ProfileName, id.Name, endpoint)
		if err != nil {
			return fmt.Errorf("updating %s: %+v", id, err)
		}

		if err = future.WaitForCompletionRef(ctx, endpointsClient.Client); err != nil {
			return fmt.Errorf("waiting for update of %s: %+v", id, err)
		}
	}

	return resourceCdnEndpointRead(d, meta)
}
