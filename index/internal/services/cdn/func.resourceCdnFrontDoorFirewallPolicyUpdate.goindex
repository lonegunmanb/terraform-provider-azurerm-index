package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn
import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	waf "github.com/hashicorp/go-azure-sdk/resource-manager/frontdoor/2024-02-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCdnFrontDoorFirewallPolicyUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Cdn.FrontDoorFirewallPoliciesClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := waf.ParseFrontDoorWebApplicationFirewallPolicyID(d.Id())
	if err != nil {
		return err
	}

	result, err := client.PoliciesGet(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	model := result.Model

	if model == nil {
		return fmt.Errorf("retrieving %s: 'model' was nil", *id)
	}

	if model.Properties == nil {
		return fmt.Errorf("retrieving %s: 'model.Properties' was nil", *id)
	}

	props := *model.Properties

	if d.HasChanges("custom_block_response_body", "custom_block_response_status_code", "enabled", "mode", "redirect_url", "request_body_check_enabled", "js_challenge_cookie_expiration_in_minutes") {
		enabled := waf.PolicyEnabledStateDisabled
		if d.Get("enabled").(bool) {
			enabled = waf.PolicyEnabledStateEnabled
		}

		requestBodyCheck := waf.PolicyRequestBodyCheckDisabled
		if d.Get("request_body_check_enabled").(bool) {
			requestBodyCheck = waf.PolicyRequestBodyCheckEnabled
		}

		props.PolicySettings = &waf.PolicySettings{
			EnabledState:     pointer.To(enabled),
			Mode:             pointer.To(waf.PolicyMode(d.Get("mode").(string))),
			RequestBodyCheck: pointer.To(requestBodyCheck),
		}

		// NOTE: js_challenge_cookie_expiration_in_minutes is only valid for
		// Premium_AzureFrontDoor skus...
		if model.Sku != nil && *model.Sku.Name == waf.SkuNamePremiumAzureFrontDoor {
			// Set the Default value...
			jsChallengeExpirationInMinutes := 30

			if v, ok := d.GetOk("js_challenge_cookie_expiration_in_minutes"); ok {
				jsChallengeExpirationInMinutes = v.(int)
			}

			props.PolicySettings.JavascriptChallengeExpirationInMinutes = pointer.FromInt64(int64(jsChallengeExpirationInMinutes))
		}

		if redirectUrl := d.Get("redirect_url").(string); redirectUrl != "" {
			props.PolicySettings.RedirectURL = pointer.To(redirectUrl)
		}

		if body := d.Get("custom_block_response_body").(string); body != "" {
			props.PolicySettings.CustomBlockResponseBody = pointer.To(body)
		}

		if statusCode := int64(d.Get("custom_block_response_status_code").(int)); statusCode > 0 {
			props.PolicySettings.CustomBlockResponseStatusCode = pointer.To(statusCode)
		}
	}

	if d.HasChange("custom_rule") {
		props.CustomRules = expandCdnFrontDoorFirewallCustomRules(d.Get("custom_rule").([]interface{}))
	}

	if d.HasChange("managed_rule") {
		if model.Sku == nil {
			return fmt.Errorf("retrieving %s: 'model.Sku' was nil", *id)
		}

		managedRules, err := expandCdnFrontDoorFirewallManagedRules(d.Get("managed_rule").([]interface{}))
		if err != nil {
			return fmt.Errorf("expanding managed_rule: %+v", err)
		}

		if pointer.From(model.Sku.Name) != waf.SkuNamePremiumAzureFrontDoor && managedRules != nil {
			return fmt.Errorf("the 'managed_rule' field is only supported when using the sku 'Premium_AzureFrontDoor', got %q", pointer.From(model.Sku.Name))
		}

		if managedRules != nil {
			props.ManagedRules = managedRules
		}
	}

	if d.HasChange("tags") {
		model.Tags = tags.Expand(d.Get("tags").(map[string]interface{}))
	}

	model.Properties = pointer.To(props)

	err = client.PoliciesCreateOrUpdateThenPoll(ctx, *id, *model)
	if err != nil {
		return fmt.Errorf("updating %s: %+v", *id, err)
	}

	return resourceCdnFrontDoorFirewallPolicyRead(d, meta)
}
