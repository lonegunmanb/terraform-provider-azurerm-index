package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cdn/2024-02-01/rulesets"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cdn/2024-09-01/rules"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	cdnFrontDoorRuleActions "github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/frontdoorruleactions"
	cdnFrontDoorRuleConditions "github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/frontdoorruleconditions"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceCdnFrontDoorRuleUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Cdn.FrontDoorRulesClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := rules.ParseRuleID(d.Id())
	if err != nil {
		return err
	}

	params := rules.RuleUpdateParameters{
		Properties: &rules.RuleUpdatePropertiesParameters{},
	}

	if d.HasChange("behavior_on_match") {
		matchProcessingBehaviorValue := rules.MatchProcessingBehavior(d.Get("behavior_on_match").(string))
		params.Properties.MatchProcessingBehavior = pointer.To(matchProcessingBehaviorValue)
	}

	if d.HasChange("order") {
		order := int64(d.Get("order").(int))
		params.Properties.Order = pointer.To(order)
	}

	if d.HasChange("actions") {
		actions, err := expandFrontdoorDeliveryRuleActions(d.Get("actions").([]interface{}))
		if err != nil {
			return fmt.Errorf("expanding 'actions': %+v", err)
		}

		params.Properties.Actions = &actions
	}

	if d.HasChange("conditions") {
		conditions, err := expandFrontdoorDeliveryRuleConditions(d.Get("conditions").([]interface{}))
		if err != nil {
			return fmt.Errorf("expanding 'conditions': %+v", err)
		}

		if len(conditions) > 10 {
			return fmt.Errorf("expanding 'conditions': configuration file exceeds the maximum of 10 match conditions, got %d", len(conditions))
		}

		params.Properties.Conditions = &conditions
	}

	err = client.UpdateThenPoll(ctx, *id, params)
	if err != nil {
		return fmt.Errorf("updating %s: %+v", *id, err)
	}

	return resourceCdnFrontDoorRuleRead(d, meta)
}
