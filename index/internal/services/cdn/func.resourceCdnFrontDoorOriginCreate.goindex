package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn
import (
	"fmt"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/cdn/mgmt/2021-06-01/cdn" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cdn/2024-02-01/profiles"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-11-01/privatelinkservices"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/azuresdkhacks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCdnFrontDoorOriginCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Cdn.FrontDoorOriginsClient
	profileClient := meta.(*clients.Client).Cdn.FrontDoorProfilesClient
	ctx, cancel := timeouts.ForCreate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	originGroupRaw := d.Get("cdn_frontdoor_origin_group_id").(string)
	originGroup, err := parse.FrontDoorOriginGroupID(originGroupRaw)
	if err != nil {
		return err
	}

	id := parse.NewFrontDoorOriginID(originGroup.SubscriptionId, originGroup.ResourceGroup, originGroup.ProfileName, originGroup.OriginGroupName, d.Get("name").(string))

	existing, err := client.Get(ctx, id.ResourceGroup, id.ProfileName, id.OriginGroupName, id.OriginName)
	if err != nil {
		if !utils.ResponseWasNotFound(existing.Response) {
			return fmt.Errorf("checking for existing %s: %+v", id, err)
		}
	}

	if !utils.ResponseWasNotFound(existing.Response) {
		return tf.ImportAsExistsError("azurerm_cdn_frontdoor_origin", id.ID())
	}

	// I need to get the profile SKU so I know if it is valid or not to define a private link as
	// private links are only allowed in the premium sku...
	profileId := profiles.NewProfileID(id.SubscriptionId, id.ResourceGroup, id.ProfileName)

	profileResp, err := profileClient.Get(ctx, profileId)
	if err != nil {
		if response.WasNotFound(profileResp.HttpResponse) {
			return fmt.Errorf("retrieving parent %s: not found", profileId)
		}

		return fmt.Errorf("retrieving parent %s: %+v", profileId, err)
	}

	profileModel := profileResp.Model

	if profileModel == nil {
		return fmt.Errorf("profileModel is 'nil'")
	}

	if profileModel.Properties == nil {
		return fmt.Errorf("profileModel.Properties is 'nil'")
	}

	if profileModel.Sku.Name == nil {
		return fmt.Errorf("profileModel.Sku.Name' is 'nil'")
	}
	skuName := string(pointer.From(profileModel.Sku.Name))

	var enabled bool
	if !pluginsdk.IsExplicitlyNullInConfig(d, "enabled") {
		enabled = d.Get("enabled").(bool)
	}

	enableCertNameCheck := d.Get("certificate_name_check_enabled").(bool)
	props := &cdn.AFDOriginProperties{
		EnabledState:                expandEnabledBool(enabled),
		EnforceCertificateNameCheck: utils.Bool(enableCertNameCheck),
		HostName:                    utils.String(d.Get("host_name").(string)),
		HTTPPort:                    utils.Int32(int32(d.Get("http_port").(int))),
		HTTPSPort:                   utils.Int32(int32(d.Get("https_port").(int))),
		Priority:                    utils.Int32(int32(d.Get("priority").(int))),
		Weight:                      utils.Int32(int32(d.Get("weight").(int))),
	}

	if originHostHeader := d.Get("origin_host_header").(string); originHostHeader != "" {
		props.OriginHostHeader = utils.String(originHostHeader)
	}

	expanded, err := expandPrivateLinkSettings(d.Get("private_link").([]interface{}), profiles.SkuName(skuName), enableCertNameCheck)
	if err != nil {
		return err
	}
	props.SharedPrivateLinkResource = expanded

	payload := cdn.AFDOrigin{
		AFDOriginProperties: props,
	}

	future, err := client.Create(ctx, id.ResourceGroup, id.ProfileName, id.OriginGroupName, id.OriginName, payload)
	if err != nil {
		return fmt.Errorf("creating %s: %+v", id, err)
	}

	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		return fmt.Errorf("waiting for the creation of %s: %+v", id, err)
	}

	d.SetId(id.ID())
	return resourceCdnFrontDoorOriginRead(d, meta)
}
