package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/cdn/mgmt/2020-09-01/cdn" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCdnEndpoint() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceCdnEndpointCreate,
		Read:   resourceCdnEndpointRead,
		Update: resourceCdnEndpointUpdate,
		Delete: resourceCdnEndpointDelete,

		SchemaVersion: 1,
		StateUpgraders: pluginsdk.StateUpgrades(map[int]pluginsdk.StateUpgrade{
			0: migration.CdnEndpointV0ToV1{},
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := parse.EndpointID(id)
			return err
		}),

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ForceNew: true,
			},

			"location": commonschema.Location(),

			"resource_group_name": commonschema.ResourceGroupName(),

			"profile_name": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ForceNew: true,
			},

			"origin_host_header": {
				Type:     pluginsdk.TypeString,
				Optional: true,
			},

			"is_http_allowed": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Default:  true,
			},

			"is_https_allowed": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
				Default:  true,
			},

			"origin": {
				Type:     pluginsdk.TypeSet,
				Required: true,
				ForceNew: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"name": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ForceNew: true,
						},

						"host_name": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ForceNew: true,
						},

						"http_port": {
							Type:     pluginsdk.TypeInt,
							Optional: true,
							ForceNew: true,
							Default:  80,
						},

						"https_port": {
							Type:     pluginsdk.TypeInt,
							Optional: true,
							ForceNew: true,
							Default:  443,
						},
					},
				},
			},

			"origin_path": {
				Type:     pluginsdk.TypeString,
				Optional: true,
			},

			"querystring_caching_behaviour": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				Default:  string(cdn.QueryStringCachingBehaviorIgnoreQueryString),
				ValidateFunc: validation.StringInSlice([]string{
					string(cdn.QueryStringCachingBehaviorBypassCaching),
					string(cdn.QueryStringCachingBehaviorIgnoreQueryString),
					string(cdn.QueryStringCachingBehaviorNotSet),
					string(cdn.QueryStringCachingBehaviorUseQueryString),
				}, false),
			},

			"content_types_to_compress": {
				Type:     pluginsdk.TypeSet,
				Optional: true,
				Elem: &pluginsdk.Schema{
					Type: pluginsdk.TypeString,
				},
				Set: pluginsdk.HashString,
			},

			"is_compression_enabled": {
				Type:     pluginsdk.TypeBool,
				Optional: true,
			},

			"probe_path": {
				Type:     pluginsdk.TypeString,
				Optional: true,
			},

			"geo_filter": {
				Type:     pluginsdk.TypeList,
				Optional: true,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"relative_path": {
							Type:     pluginsdk.TypeString,
							Required: true,
						},
						"action": {
							Type:     pluginsdk.TypeString,
							Required: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(cdn.ActionTypeAllow),
								string(cdn.ActionTypeBlock),
							}, false),
						},
						"country_codes": {
							Type:     pluginsdk.TypeList,
							Required: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
							},
						},
					},
				},
			},

			"optimization_type": {
				Type:     pluginsdk.TypeString,
				Optional: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(cdn.OptimizationTypeDynamicSiteAcceleration),
					string(cdn.OptimizationTypeGeneralMediaStreaming),
					string(cdn.OptimizationTypeGeneralWebDelivery),
					string(cdn.OptimizationTypeLargeFileDownload),
					string(cdn.OptimizationTypeVideoOnDemandMediaStreaming),
				}, false),
			},

			"fqdn": {
				Type:     pluginsdk.TypeString,
				Computed: true,
			},

			"global_delivery_rule": endpointGlobalDeliveryRule(),

			"delivery_rule": endpointDeliveryRule(),

			"tags": commonschema.Tags(),
		},

		CustomizeDiff: pluginsdk.CustomizeDiffShim(func(ctx context.Context, d *pluginsdk.ResourceDiff, v interface{}) error {
			if IsCdnFullyRetired() {
				return fmt.Errorf("%s", FullyRetiredMessage)
			}

			if IsCdnDeprecatedForCreation() && d.HasChanges("name", "profile_name", "origin") {
				return fmt.Errorf("%s", CreateDeprecationMessage)
			}

			return nil
		}),
	}
}
