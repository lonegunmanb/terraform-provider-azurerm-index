package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn
import (
	"context"
	"fmt"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/cdn/mgmt/2020-09-01/cdn" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCdnProfile() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceCdnProfileCreate,
		Read:   resourceCdnProfileRead,
		Update: resourceCdnProfileUpdate,
		Delete: resourceCdnProfileDelete,

		SchemaVersion: 1,
		StateUpgraders: pluginsdk.StateUpgrades(map[int]pluginsdk.StateUpgrade{
			0: migration.CdnProfileV0ToV1{},
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := parse.ProfileID(id)
			return err
		}),

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ForceNew: true,
			},

			"location": commonschema.Location(),

			"resource_group_name": commonschema.ResourceGroupName(),

			"sku": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(cdn.SkuNameStandardAkamai),
					string(cdn.SkuNameStandardChinaCdn),
					string(cdn.SkuNameStandardVerizon),
					string(cdn.SkuNameStandardMicrosoft),
					string(cdn.SkuNamePremiumVerizon),
				}, false),
			},

			"tags": commonschema.Tags(),
		},

		CustomizeDiff: pluginsdk.CustomizeDiffShim(func(ctx context.Context, d *pluginsdk.ResourceDiff, v interface{}) error {
			sku := d.Get("sku").(string)

			if IsCdnFullyRetired() {
				return fmt.Errorf("%s", FullyRetiredMessage)
			}

			switch sku {
			case string(cdn.SkuNameStandardAkamai):
				// The Akamai sku was retired on 31 October 2023...
				if IsCdnStandardAkamaiDeprecatedForCreation() {
					return fmt.Errorf("%s", AkamaiDeprecationMessage)
				}
			case string(cdn.SkuNameStandardVerizon), string(cdn.SkuNamePremiumVerizon):
				// The Verizon skus were retired on 15 January 2025...
				if IsCdnStandardVerizonPremiumVerizonDeprecatedForCreation() {
					return fmt.Errorf("%s", VerizonDeprecationMessage)
				}
			case string(cdn.SkuNameStandardMicrosoft), string(cdn.SkuNameStandardChinaCdn):
				// The only currently supported sku's for CDN are 'Standard_Microsoft' and 'Standard_ChinaCdn' which
				// will also be deprecated as of October 1, 2025, but can still be updated until September 30, 2027.
				// First, check to see if any of the force new fields have changed after the October 1, 2025 deprecation date,
				// if they have we need to block the update because the force new will cause the deployments to fail...
				if IsCdnDeprecatedForCreation() && d.HasChanges("name", "location", "resource_group_name", "sku") {
					return fmt.Errorf("%s", CreateDeprecationMessage)
				}
			}

			return nil
		}),
	}
}
