package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn
import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cdn/2024-02-01/profiles"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cdn/2024-02-01/securitypolicies"
	waf "github.com/hashicorp/go-azure-sdk/resource-manager/frontdoor/2024-02-01/webapplicationfirewallpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceCdnFrontdoorSecurityPolicyRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Cdn.FrontDoorSecurityPoliciesClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := securitypolicies.ParseSecurityPolicyID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, pointer.From(id))
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	d.Set("name", id.SecurityPolicyName)
	d.Set("cdn_frontdoor_profile_id", profiles.NewProfileID(id.SubscriptionId, id.ResourceGroupName, id.ProfileName).ID())

	if model := resp.Model; model != nil {
		if props := model.Properties; props != nil {
			if props.Parameters.SecurityPolicyPropertiesParameters().Type != securitypolicies.SecurityPolicyTypeWebApplicationFirewall {
				return fmt.Errorf("'model.Properties.Parameters.Type' of %q is unexpected, want security policy 'Type' of 'WebApplicationFirewall': %s", props.Parameters.SecurityPolicyPropertiesParameters().Type, id)
			}

			// we know it's a firewall policy at this point,
			// create the objects to hold the policy data
			wafParams := props.Parameters.(securitypolicies.SecurityPolicyWebApplicationFirewallParameters)
			associations := make([]interface{}, 0)
			wafPolicyId := ""

			if wafParams.WafPolicy != nil && wafParams.WafPolicy.Id != nil {
				parsedId, err := waf.ParseFrontDoorWebApplicationFirewallPolicyIDInsensitively(*wafParams.WafPolicy.Id)
				if err != nil {
					return fmt.Errorf("flattening `cdn_frontdoor_firewall_policy_id`: %+v", err)
				}
				wafPolicyId = parsedId.ID()
			}

			if wafParams.Associations != nil {
				for _, item := range *wafParams.Associations {
					domain, err := flattenSecurityPoliciesActivatedResourceReference(item.Domains)
					if err != nil {
						return fmt.Errorf("flattening `ActivatedResourceReference`: %+v", err)
					}

					associations = append(associations, map[string]interface{}{
						"domain":            domain,
						"patterns_to_match": utils.FlattenStringSlice(item.PatternsToMatch),
					})
				}
			}

			securityPolicy := []interface{}{
				map[string]interface{}{
					"firewall": []interface{}{
						map[string]interface{}{
							"association":                      associations,
							"cdn_frontdoor_firewall_policy_id": wafPolicyId,
						},
					},
				},
			}

			d.Set("security_policies", securityPolicy)
		}
	}

	return nil
}
