package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/cdnfrontdoorruleconditions
import (
	"fmt"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cdn/2024-09-01/rules"
	helperValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func ExpandCdnFrontDoorServerPortCondition(input []interface{}) (*[]rules.DeliveryRuleCondition, error) {
	output := make([]rules.DeliveryRuleCondition, 0)
	m := InitializeCdnFrontDoorConditionMappings()
	conditionMapping := m.ServerPort

	for _, v := range input {
		item := v.(map[string]interface{})
		matchValuesRaw := item["match_values"].(*pluginsdk.Set).List()

		condition := rules.DeliveryRuleServerPortCondition{
			Name: conditionMapping.Name,
			Parameters: rules.ServerPortMatchConditionParameters{
				TypeName:        conditionMapping.TypeName,
				Operator:        rules.ServerPortOperator(item["operator"].(string)),
				NegateCondition: pointer.To(item["negate_condition"].(bool)),
				MatchValues:     utils.ExpandStringSlice(matchValuesRaw),
			},
		}

		if err := validateCdnFrontDoorExpandConditionOperatorValues(string(condition.Parameters.Operator), condition.Parameters.MatchValues, conditionMapping); err != nil {
			return nil, err
		}

		output = append(output, condition)
	}

	return &output, nil
}
