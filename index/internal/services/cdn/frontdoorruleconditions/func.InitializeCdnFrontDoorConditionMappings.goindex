package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/cdnfrontdoorruleconditions
import (
	"fmt"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cdn/2024-09-01/rules"
	helperValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func InitializeCdnFrontDoorConditionMappings() *CdnFrontDoorCondtionsMappings {
	m := CdnFrontDoorCondtionsMappings{}

	m.ClientPort = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableClientPort,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleClientPortConditionParameters,
		ConfigName: "client_port_condition",
	}

	m.Cookies = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableCookies,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleCookiesConditionParameters,
		ConfigName: "cookies_condition",
	}

	m.HostName = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableHostName,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleHostNameConditionParameters,
		ConfigName: "host_name_condition",
	}

	m.HttpVersion = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableHTTPVersion,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleHTTPVersionConditionParameters,
		ConfigName: "http_version_condition",
	}

	m.IsDevice = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableIsDevice,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleIsDeviceConditionParameters,
		ConfigName: "is_device_condition",
	}

	m.PostArgs = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariablePostArgs,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRulePostArgsConditionParameters,
		ConfigName: "post_args_condition",
	}

	m.QueryString = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableQueryString,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleQueryStringConditionParameters,
		ConfigName: "query_string_condition",
	}

	m.RemoteAddress = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableRemoteAddress,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleRemoteAddressConditionParameters,
		ConfigName: "remote_address_condition",
	}

	m.RequestBody = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableRequestBody,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleRequestBodyConditionParameters,
		ConfigName: "request_body_condition",
	}

	m.RequestHeader = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableRequestHeader,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleRequestHeaderConditionParameters,
		ConfigName: "request_header_condition",
	}

	m.RequestMethod = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableRequestMethod,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleRequestMethodConditionParameters,
		ConfigName: "request_method_condition",
	}

	m.RequestScheme = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableRequestScheme,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleRequestSchemeConditionParameters,
		ConfigName: "request_scheme_condition",
	}

	m.RequestUri = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableRequestUri,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleRequestUriConditionParameters,
		ConfigName: "request_uri_condition",
	}

	m.ServerPort = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableServerPort,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleServerPortConditionParameters,
		ConfigName: "server_port_condition",
	}

	m.SocketAddress = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableSocketAddr,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleSocketAddrConditionParameters,
		ConfigName: "socket_address_condition",
	}

	m.SslProtocol = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableSslProtocol,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleSslProtocolConditionParameters,
		ConfigName: "ssl_protocol_condition",
	}

	m.UrlFileExtension = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableURLFileExtension,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleURLFileExtensionMatchConditionParameters,
		ConfigName: "url_file_extension_condition",
	}

	m.UrlFilename = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableURLFileName,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleURLFilenameConditionParameters,
		ConfigName: "url_filename_condition",
	}

	m.UrlPath = CdnFrontDoorConditionParameters{
		Name:       rules.MatchVariableURLPath,
		TypeName:   rules.DeliveryRuleConditionParametersTypeDeliveryRuleURLPathMatchConditionParameters,
		ConfigName: "url_path_condition",
	}

	return &m
}
