package github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/cdnfrontdoorruleconditions
import (
	"fmt"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/resource-manager/cdn/2024-09-01/rules"
	helperValidate "github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/cdn/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func ExpandCdnFrontDoorSocketAddressCondition(input []interface{}) (*[]rules.DeliveryRuleCondition, error) {
	output := make([]rules.DeliveryRuleCondition, 0)
	m := InitializeCdnFrontDoorConditionMappings()
	conditionMapping := m.SocketAddress

	for _, v := range input {
		item := v.(map[string]interface{})
		condition := rules.DeliveryRuleSocketAddrCondition{
			Name: conditionMapping.Name,
			Parameters: rules.SocketAddrMatchConditionParameters{
				TypeName:        conditionMapping.TypeName,
				Operator:        rules.SocketAddrOperator(item["operator"].(string)),
				NegateCondition: pointer.To(item["negate_condition"].(bool)),
				MatchValues:     utils.ExpandStringSlice(item["match_values"].([]interface{})),
			},
		}

		if condition.Parameters.Operator == rules.SocketAddrOperatorIPMatch {
			// make sure all of the passed CIDRs are valid
			for _, matchValue := range item["match_values"].([]interface{}) {
				if _, err := validate.FrontDoorRuleCidrIsValid(matchValue, "match_values"); err != nil {
					return nil, fmt.Errorf("%q is invalid: when the 'operator' is set to 'IPMatch' the 'match_values' must be a valid IPv4 or IPv6 CIDR, got %q", conditionMapping.ConfigName, matchValue.(string))
				}
			}

			// Check for CIDR overlap and CIDR duplicates in the match values
			_, err := validate.FrontDoorRuleCidrOverlap(item["match_values"].([]interface{}), "match_values")
			if err != nil {
				return nil, fmt.Errorf("%q is invalid: %+v", conditionMapping.ConfigName, err)
			}
		}

		if err := validateCdnFrontDoorExpandConditionOperatorValues(string(condition.Parameters.Operator), condition.Parameters.MatchValues, conditionMapping); err != nil {
			return nil, err
		}

		output = append(output, condition)
	}

	return &output, nil
}
