package github.com/hashicorp/terraform-provider-azurerm/internal/services/redis
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/resource-manager/redis/2024-11-01/redis"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func (r RedisCacheAccessPolicyResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			var model RedisCacheAccessPolicyResourceModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding %+v", err)
			}
			client := metadata.Client.Redis.Redis
			subscriptionId := metadata.Client.Account.SubscriptionId

			redisId, err := redis.ParseRediID(model.RedisCacheID)
			if err != nil {
				return fmt.Errorf("parsing Redis Cache ID (%s): %+v", model.RedisCacheID, err)
			}
			id := redis.NewAccessPolicyID(subscriptionId, redisId.ResourceGroupName, redisId.RedisName, model.Name)

			existing, err := client.AccessPolicyGet(ctx, id)
			if err != nil && !response.WasNotFound(existing.HttpResponse) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}

			if !response.WasNotFound(existing.HttpResponse) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			policyTypeCustom := redis.AccessPolicyTypeCustom

			createInput := redis.RedisCacheAccessPolicy{
				Name: &model.Name,
				Properties: &redis.RedisCacheAccessPolicyProperties{
					Permissions: model.Permissions,
					Type:        &policyTypeCustom,
				},
			}

			locks.ByID(model.RedisCacheID)
			defer locks.UnlockByID(model.RedisCacheID)

			if err := client.AccessPolicyCreateUpdateThenPoll(ctx, id, createInput); err != nil {
				return fmt.Errorf("failed to create Redis Cache Access Policy %s in Redis Cache %s in resource group %s: %s", model.Name, redisId.RedisName, redisId.ResourceGroupName, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
