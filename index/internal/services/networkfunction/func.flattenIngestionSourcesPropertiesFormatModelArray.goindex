package github.com/hashicorp/terraform-provider-azurerm/internal/services/networkfunction
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/networkfunction/2022-11-01/azuretrafficcollectors"
	"github.com/hashicorp/go-azure-sdk/resource-manager/networkfunction/2022-11-01/collectorpolicies"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func flattenIngestionSourcesPropertiesFormatModelArray(inputList *[]collectorpolicies.IngestionSourcesPropertiesFormat) []IpfxIngestionModel {
	outputList := make([]IpfxIngestionModel, 0)
	if inputList == nil {
		return outputList
	}

	output := IpfxIngestionModel{
		SourceResourceIds: make([]string, 0),
	}

	for _, input := range *inputList {
		if input.ResourceId != nil && input.SourceType != nil && *input.SourceType == collectorpolicies.SourceTypeResource {
			output.SourceResourceIds = append(output.SourceResourceIds, *input.ResourceId)
		}
	}

	if len(output.SourceResourceIds) > 0 {
		outputList = append(outputList, output)
	}

	return outputList
}
