package github.com/hashicorp/terraform-provider-azurerm/internal/services/containerapps/helpers
import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerapps/2023-05-01/daprcomponents"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerapps/2024-03-01/containerapps"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerapps/2024-03-01/managedenvironments"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/containerapps/validate"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func CustomScaleRuleSchema() *pluginsdk.Schema {
	return &pluginsdk.Schema{
		Type:     pluginsdk.TypeList,
		Optional: true,
		Elem: &pluginsdk.Resource{
			Schema: map[string]*pluginsdk.Schema{
				"name": {
					Type:         pluginsdk.TypeString,
					Required:     true,
					ValidateFunc: validate.LowerCaseAlphaNumericWithHyphensAndPeriods,
				},

				"metadata": {
					Type:     pluginsdk.TypeMap,
					Required: true,
					Elem: &pluginsdk.Schema{
						Type: pluginsdk.TypeString,
					},
				},

				"custom_rule_type": {
					Type:     pluginsdk.TypeString,
					Required: true,
					ValidateFunc: validation.StringInSlice([]string{
						"activemq", "artemis-queue", "kafka", "pulsar", "aws-cloudwatch",
						"aws-dynamodb", "aws-dynamodb-streams", "aws-kinesis-stream", "aws-sqs-queue",
						"azure-app-insights", "azure-blob", "azure-data-explorer", "azure-eventhub",
						"azure-log-analytics", "azure-monitor", "azure-pipelines", "azure-servicebus",
						"azure-queue", "cassandra", "cpu", "cron", "datadog", "elasticsearch", "external",
						"external-push", "gcp-stackdriver", "gcp-storage", "gcp-pubsub", "graphite", "http",
						"huawei-cloudeye", "ibmmq", "influxdb", "kubernetes-workload", "liiklus", "memory",
						"metrics-api", "mongodb", "mssql", "mysql", "nats-jetstream", "stan", "tcp", "new-relic",
						"openstack-metric", "openstack-swift", "postgresql", "predictkube", "prometheus",
						"rabbitmq", "redis", "redis-cluster", "redis-sentinel", "redis-streams",
						"redis-cluster-streams", "redis-sentinel-streams", "selenium-grid",
						"solace-event-queue", "github-runner",
					}, false), // Note - this can be any KEDA compatible source in a user's environment
				},

				"authentication": {
					Type:     pluginsdk.TypeList,
					Optional: true,
					MinItems: 1,
					Elem: &pluginsdk.Resource{
						Schema: map[string]*pluginsdk.Schema{
							"secret_name": {
								Type:         pluginsdk.TypeString,
								Required:     true,
								ValidateFunc: validate.SecretName,
							},

							"trigger_parameter": {
								Type:         pluginsdk.TypeString,
								Required:     true,
								ValidateFunc: validation.StringIsNotEmpty,
							},
						},
					},
				},
			},
		},
	}
}
