package github.com/hashicorp/terraform-provider-azurerm/internal/services/containerapps
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/containerapps/2025-07-01/managedenvironments"
	"github.com/hashicorp/go-azure-sdk/resource-manager/operationalinsights/2020-08-01/workspaces"
	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func (r ContainerAppEnvironmentCustomDomainResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.ContainerApps.ManagedEnvironmentClient
			id, err := managedenvironments.ParseManagedEnvironmentID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			existing, err := client.Get(ctx, *id)
			if err != nil {
				if response.WasNotFound(existing.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("reading %s: %+v", *id, err)
			}

			state := ContainerAppEnvironmentCustomDomainModel{}

			if model := existing.Model; model != nil {
				if props := model.Properties; props != nil {
					if customdomain := props.CustomDomainConfiguration; customdomain.DnsSuffix != nil {
						state.DnsSuffix = pointer.From(customdomain.DnsSuffix)
						if certValue, ok := metadata.ResourceData.GetOk("certificate_blob_base64"); ok {
							state.CertificateValue = certValue.(string)
						}
						if certPassword, ok := metadata.ResourceData.GetOk("certificate_password"); ok {
							state.CertificatePassword = certPassword.(string)
						}
						state.ManagedEnvironmentId = metadata.ResourceData.Id()
					}
				}
			}

			return metadata.Encode(&state)
		},
	}
}
