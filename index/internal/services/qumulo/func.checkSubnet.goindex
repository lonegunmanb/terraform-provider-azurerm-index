package github.com/hashicorp/terraform-provider-azurerm/internal/services/qumulo
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2025-01-01/subnets"
	"github.com/hashicorp/go-azure-sdk/resource-manager/qumulostorage/2024-06-19/filesystems"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/qumulo/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)
func checkSubnet(ctx context.Context, rawSubnetId string, metadata sdk.ResourceMetaData) error {
	delegationAction := "Microsoft.Network/virtualNetworks/subnets/join/action"
	delegationName := "Qumulo.Storage/fileSystems"

	subnetId, err := commonids.ParseSubnetID(rawSubnetId)
	if err != nil {
		return err
	}

	subnet, err := metadata.Client.Network.Subnets.Get(ctx, *subnetId, subnets.GetOperationOptions{})
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", subnetId, err)
	}

	if subnet.Model != nil && subnet.Model.Properties != nil && subnet.Model.Properties.Delegations != nil {
		for _, delegation := range *subnet.Model.Properties.Delegations {
			if props := delegation.Properties; props != nil && props.Actions != nil &&
				props.ServiceName != nil && strings.EqualFold(*props.ServiceName, delegationName) {
				for _, action := range *props.Actions {
					if strings.EqualFold(action, delegationAction) {
						return nil
					}
				}
			}
		}
	}

	return fmt.Errorf("subnet %q is missing action %q on delegation %q", rawSubnetId, delegationAction, delegationName)
}
