package github.com/hashicorp/terraform-provider-azurerm/internal/services/databoxedge
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/databoxedge/2022-03-01/devices"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/databoxedge/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/databoxedge/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)
func flattenDeviceProperties(input *devices.DataBoxEdgeDeviceProperties) []DevicePropertiesModel {
	output := make([]DevicePropertiesModel, 0)
	configuredRoleTypes := make([]string, 0)

	var status string
	var culture string
	var hcsVersion string
	var capacity int64
	var model string
	var softwareVersion string
	var deviceType string
	var serialNumber string
	var timeZone string

	if input != nil {
		o := DevicePropertiesModel{}
		if input.ConfiguredRoleTypes != nil {
			for _, item := range *input.ConfiguredRoleTypes {
				configuredRoleTypes = append(configuredRoleTypes, (string)(item))
			}
			o.ConfiguredRoleTypes = configuredRoleTypes
		}

		if v := input.DataBoxEdgeDeviceStatus; v != nil && *v != "" {
			status = string(*v)
			o.Status = status
		}

		if input.Culture != nil {
			culture = *input.Culture
			o.Culture = culture
		}

		if input.DeviceHcsVersion != nil {
			hcsVersion = *input.DeviceHcsVersion
			o.HcsVersion = hcsVersion
		}

		if input.DeviceLocalCapacity != nil {
			capacity = *input.DeviceLocalCapacity
			o.Capacity = capacity
		}

		if input.DeviceModel != nil {
			model = *input.DeviceModel
			o.Model = model
		}

		if input.DeviceSoftwareVersion != nil {
			softwareVersion = *input.DeviceSoftwareVersion
			o.SoftwareVersion = softwareVersion
		}

		if v := input.DeviceType; v != nil && *v != "" {
			deviceType = string(*v)
			o.Type = deviceType
		}

		if input.NodeCount != nil {
			o.NodeCount = *input.NodeCount
		}

		if input.SerialNumber != nil {
			serialNumber = *input.SerialNumber
			o.SerialNumber = serialNumber
		}

		if input.TimeZone != nil {
			timeZone = *input.TimeZone
			o.TimeZone = timeZone
		}

		output = append(output, o)
	}

	return output
}
