package github.com/hashicorp/terraform-provider-azurerm/internal/services/mysql
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/identity"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mysql/2023-12-30/serverfailover"
	"github.com/hashicorp/go-azure-sdk/resource-manager/mysql/2023-12-30/servers"
	"github.com/hashicorp/go-azure-sdk/resource-manager/privatedns/2024-06-01/privatezones"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	keyVaultValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/keyvault/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mysql/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func expandArmServerStorage(inputs []interface{}) *servers.Storage {
	if len(inputs) == 0 || inputs[0] == nil {
		return nil
	}

	input := inputs[0].(map[string]interface{})
	autoGrow := servers.EnableStatusEnumDisabled
	if v := input["auto_grow_enabled"].(bool); v {
		autoGrow = servers.EnableStatusEnumEnabled
	}

	autoIoScaling := servers.EnableStatusEnumDisabled
	if v := input["io_scaling_enabled"].(bool); v {
		autoIoScaling = servers.EnableStatusEnumEnabled
	}

	logOnDisk := servers.EnableStatusEnumDisabled
	if v := input["log_on_disk_enabled"].(bool); v {
		logOnDisk = servers.EnableStatusEnumEnabled
	}

	storage := servers.Storage{
		AutoGrow:      &autoGrow,
		AutoIoScaling: &autoIoScaling,
		LogOnDisk:     &logOnDisk,
	}

	if v := input["size_gb"].(int); v != 0 {
		storage.StorageSizeGB = pointer.To(int64(v))
	}

	if v := input["iops"].(int); v != 0 {
		storage.Iops = pointer.To(int64(v))
	}

	return &storage
}
