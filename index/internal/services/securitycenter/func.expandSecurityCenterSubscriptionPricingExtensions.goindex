package github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	pricings_v2023_01_01 "github.com/hashicorp/go-azure-sdk/resource-manager/security/2023-01-01/pricings"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandSecurityCenterSubscriptionPricingExtensions(inputList []interface{}, extensionsStatusFromBackend *[]pricings_v2023_01_01.Extension) *[]pricings_v2023_01_01.Extension {
	extensionStatuses := map[string]bool{}
	extensionProperties := make(map[string]interface{})

	outputList := make([]pricings_v2023_01_01.Extension, 0, len(inputList))
	if extensionsStatusFromBackend != nil {
		for _, backendExtension := range *extensionsStatusFromBackend {
			// set the default value to false, then turn on the extension that appear in the template
			extensionStatuses[backendExtension.Name] = false
		}
	}

	// set any extension in the template to be true
	for _, v := range inputList {
		input := v.(map[string]interface{})
		if input["name"] == "" {
			continue
		}
		extensionStatuses[input["name"].(string)] = true
		if vAdditional, ok := input["additional_extension_properties"]; ok {
			extensionProperties[input["name"].(string)] = &vAdditional
		}
	}

	for extensionName, toBeEnabled := range extensionStatuses {
		isEnabled := pricings_v2023_01_01.IsEnabledFalse
		if toBeEnabled {
			isEnabled = pricings_v2023_01_01.IsEnabledTrue
		}
		output := pricings_v2023_01_01.Extension{
			Name:      extensionName,
			IsEnabled: isEnabled,
		}

		if vAdditional, ok := extensionProperties[extensionName]; ok {
			props, _ := vAdditional.(*interface{})
			p := (*props).(map[string]interface{})
			output.AdditionalExtensionProperties = pointer.To(p)
		}

		outputList = append(outputList, output)
	}

	return &outputList
}
