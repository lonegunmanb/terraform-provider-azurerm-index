package github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security" // nolint: staticcheck
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	iothubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func flattenIotSecurityDeviceGroupAllowRule(input *[]security.BasicAllowlistCustomAlertRule, d *pluginsdk.ResourceData) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	var flag bool
	var connectionFromIPsNotAllowed, connectionToIPsNotAllowed, localUsersNotAllowed, processesNotAllowed *[]string
	for _, v := range *input {
		switch v := v.(type) {
		case security.ConnectionFromIPNotAllowed:
			if v.IsEnabled != nil && *v.IsEnabled {
				flag = true
				connectionFromIPsNotAllowed = v.AllowlistValues
			}
		case security.ConnectionToIPNotAllowed:
			if v, ok := d.GetOk("allow_rule.0.connection_to_ips_not_allowed"); ok {
				flag = true
				connectionToIPsNotAllowed = utils.ExpandStringSlice(v.(*pluginsdk.Set).List())
			}
		case security.LocalUserNotAllowed:
			if v, ok := d.GetOk("allow_rule.0.local_users_not_allowed"); ok {
				flag = true
				localUsersNotAllowed = utils.ExpandStringSlice(v.(*pluginsdk.Set).List())
			}
		case security.ProcessNotAllowed:
			if v, ok := d.GetOk("allow_rule.0.processes_not_allowed"); ok {
				flag = true
				processesNotAllowed = utils.ExpandStringSlice(v.(*pluginsdk.Set).List())
			}
		}
	}
	if !flag {
		return []interface{}{}
	}
	return []interface{}{
		map[string]interface{}{
			"connection_from_ips_not_allowed": utils.FlattenStringSlice(connectionFromIPsNotAllowed),
			"connection_to_ips_not_allowed":   utils.FlattenStringSlice(connectionToIPsNotAllowed),
			"local_users_not_allowed":         utils.FlattenStringSlice(localUsersNotAllowed),
			"processes_not_allowed":           utils.FlattenStringSlice(processesNotAllowed),
		},
	}
}
