package github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security" // nolint: staticcheck
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	iothubValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/iothub/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandIotSecurityDeviceGroupTimeWindowRule(input []interface{}) (*[]security.BasicTimeWindowCustomAlertRule, error) {
	if len(input) == 0 {
		return nil, nil
	}
	result := make([]security.BasicTimeWindowCustomAlertRule, 0)
	ruleTypeMap := make(map[security.RuleTypeBasicCustomAlertRule]struct{})
	for _, item := range input {
		v := item.(map[string]interface{})
		t := security.RuleTypeBasicCustomAlertRule(v["type"].(string))
		duration := v["duration"].(string)
		min := int32(v["min"].(int))
		max := int32(v["max"].(int))

		// check duplicate
		if _, ok := ruleTypeMap[t]; ok {
			return nil, fmt.Errorf("rule type duplicate: %q", t)
		}
		ruleTypeMap[t] = struct{}{}

		switch t {
		case security.RuleTypeActiveConnectionsNotInAllowedRange:
			result = append(result, security.ActiveConnectionsNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeAmqpC2DMessagesNotInAllowedRange:
			result = append(result, security.AmqpC2DMessagesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeMqttC2DMessagesNotInAllowedRange:
			result = append(result, security.MqttC2DMessagesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeHTTPC2DMessagesNotInAllowedRange:
			result = append(result, security.HTTPC2DMessagesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeAmqpC2DRejectedMessagesNotInAllowedRange:
			result = append(result, security.AmqpC2DRejectedMessagesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeMqttC2DRejectedMessagesNotInAllowedRange:
			result = append(result, security.MqttC2DRejectedMessagesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeHTTPC2DRejectedMessagesNotInAllowedRange:
			result = append(result, security.HTTPC2DRejectedMessagesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeAmqpD2CMessagesNotInAllowedRange:
			result = append(result, security.AmqpD2CMessagesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeMqttD2CMessagesNotInAllowedRange:
			result = append(result, security.MqttD2CMessagesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeHTTPD2CMessagesNotInAllowedRange:
			result = append(result, security.HTTPD2CMessagesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeDirectMethodInvokesNotInAllowedRange:
			result = append(result, security.DirectMethodInvokesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeFailedLocalLoginsNotInAllowedRange:
			result = append(result, security.FailedLocalLoginsNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeFileUploadsNotInAllowedRange:
			result = append(result, security.FileUploadsNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeQueuePurgesNotInAllowedRange:
			result = append(result, security.QueuePurgesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeTwinUpdatesNotInAllowedRange:
			result = append(result, security.TwinUpdatesNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		case security.RuleTypeUnauthorizedOperationsNotInAllowedRange:
			result = append(result, security.UnauthorizedOperationsNotInAllowedRange{
				TimeWindowSize: utils.String(duration),
				MinThreshold:   utils.Int32(min),
				MaxThreshold:   utils.Int32(max),
				IsEnabled:      utils.Bool(true),
			})
		}
	}
	return &result, nil
}
