package github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	pricings_v2023_01_01 "github.com/hashicorp/go-azure-sdk/resource-manager/security/2023-01-01/pricings"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceSecurityCenterSubscriptionPricingUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.PricingClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id := pricings_v2023_01_01.NewPricingID(subscriptionId, d.Get("resource_type").(string))
	pricing := pricings_v2023_01_01.Pricing{
		Properties: &pricings_v2023_01_01.PricingProperties{
			PricingTier: pricings_v2023_01_01.PricingTier(d.Get("tier").(string)),
		},
	}

	apiResponse, err := client.Get(ctx, id)
	if d.IsNewResource() {
		if err != nil {
			if !response.WasNotFound(apiResponse.HttpResponse) {
				return fmt.Errorf("checking for presence of apiResponse %s: %+v", id, err)
			}
		}

		if err == nil && apiResponse.Model != nil && apiResponse.Model.Properties != nil && apiResponse.Model.Properties.PricingTier != pricings_v2023_01_01.PricingTierFree {
			return fmt.Errorf("the pricing tier of this subscription is not Free \r %+v", tf.ImportAsExistsError("azurerm_security_center_subscription_pricing", id.ID()))
		}
	}

	extensionsStatusFromBackend := make([]pricings_v2023_01_01.Extension, 0)
	isCurrentlyInFree := false
	if err == nil && apiResponse.Model != nil && apiResponse.Model.Properties != nil {
		if apiResponse.Model.Properties.Extensions != nil {
			extensionsStatusFromBackend = *apiResponse.Model.Properties.Extensions
		}

		if apiResponse.Model.Properties.PricingTier == pricings_v2023_01_01.PricingTierFree {
			isCurrentlyInFree = true
		}
	}

	if vSub, okSub := d.GetOk("subplan"); okSub {
		pricing.Properties.SubPlan = utils.String(vSub.(string))
	}

	// When the state file contains an `extension` with `additional_extension_properties`
	// But the tf config does not, `d.Get("extension")` will contain a zero element.
	// Tracked by https://github.com/hashicorp/terraform-plugin-sdk/issues/1248
	realCfgExtensions := make([]interface{}, 0)
	for _, e := range d.Get("extension").(*pluginsdk.Set).List() {
		v := e.(map[string]interface{})
		if v["name"] != "" {
			realCfgExtensions = append(realCfgExtensions, e)
		}
	}

	if d.HasChange("extension") {
		// can not set extensions for free tier
		if pricing.Properties.PricingTier == pricings_v2023_01_01.PricingTierStandard {
			extensions := expandSecurityCenterSubscriptionPricingExtensions(realCfgExtensions, &extensionsStatusFromBackend)
			pricing.Properties.Extensions = extensions
		}
	}

	if len(realCfgExtensions) > 0 && pricing.Properties.PricingTier == pricings_v2023_01_01.PricingTierFree {
		return fmt.Errorf("extensions cannot be enabled when using free tier")
	}

	updateResponse, updateErr := client.Update(ctx, id, pricing)
	if updateErr != nil {
		return fmt.Errorf("setting %s: %+v", id, updateErr)
	}

	if updateErr == nil && updateResponse.Model != nil && updateResponse.Model.Properties != nil {
		if updateResponse.Model.Properties.Extensions != nil {
			extensionsStatusFromBackend = *updateResponse.Model.Properties.Extensions
		}
	}

	// after turning on the bundle, we have now the extensions list
	if d.IsNewResource() || isCurrentlyInFree {
		extensions := expandSecurityCenterSubscriptionPricingExtensions(realCfgExtensions, &extensionsStatusFromBackend)
		pricing.Properties.Extensions = extensions
		_, updateErr := client.Update(ctx, id, pricing)
		if err != nil {
			if updateErr != nil {
				return fmt.Errorf("setting %s: %+v", id, updateErr)
			}
		}
	}

	d.SetId(id.ID())
	return resourceSecurityCenterSubscriptionPricingRead(d, meta)
}
