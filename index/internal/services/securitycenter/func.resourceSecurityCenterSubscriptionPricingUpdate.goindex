package github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter
import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security" // nolint: staticcheck
	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	pricings_v2023_01_01 "github.com/hashicorp/go-azure-sdk/resource-manager/security/2023-01-01/pricings"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
)
func resourceSecurityCenterSubscriptionPricingUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.PricingClient
	ctx, cancel := timeouts.ForUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := pricings_v2023_01_01.ParsePricingID(d.Id())
	if err != nil {
		return err
	}

	apiResponse, err := client.Get(ctx, *id)
	if err != nil {
		return fmt.Errorf("retrieving %s: %+v", *id, err)
	}

	update := pricings_v2023_01_01.Pricing{
		Properties: &pricings_v2023_01_01.PricingProperties{
			PricingTier: pricings_v2023_01_01.PricingTier(d.Get("tier").(string)),
		},
	}

	// When the state file contains an `extension` with `additional_extension_properties`
	// But the tf config does not, `d.Get("extension")` will contain a zero element.
	// Tracked by https://github.com/hashicorp/terraform-plugin-sdk/issues/1248
	realCfgExtensions := make([]interface{}, 0)
	for _, e := range d.Get("extension").(*pluginsdk.Set).List() {
		v := e.(map[string]interface{})
		if v["name"] != "" {
			realCfgExtensions = append(realCfgExtensions, e)
		}
	}

	if len(realCfgExtensions) > 0 && update.Properties.PricingTier == pricings_v2023_01_01.PricingTierFree {
		return fmt.Errorf("extensions cannot be enabled when using free tier")
	}

	extensionsStatusFromBackend := make([]pricings_v2023_01_01.Extension, 0)
	currentlyFreeTier := false
	if apiResponse.Model != nil && apiResponse.Model.Properties != nil {
		if apiResponse.Model.Properties.Extensions != nil {
			extensionsStatusFromBackend = *apiResponse.Model.Properties.Extensions
		}

		currentlyFreeTier = apiResponse.Model.Properties.PricingTier == pricings_v2023_01_01.PricingTierFree
	}

	// Update from `free` tier to `Standard`, we need to update it to `standard` tier first without extensions
	// Then do an additional update for the `extensions`
	requiredAdditionalUpdate := false
	if d.HasChange("extension") && update.Properties.PricingTier == pricings_v2023_01_01.PricingTierStandard {
		extensions := expandSecurityCenterSubscriptionPricingExtensions(realCfgExtensions, &extensionsStatusFromBackend)
		update.Properties.Extensions = extensions
		requiredAdditionalUpdate = currentlyFreeTier
	}

	updateResponse, err := client.Update(ctx, *id, update)
	if err != nil {
		return fmt.Errorf("setting %s: %+v", id, err)
	}

	// The extensions list from backend might vary after `tier` changed, thus we need to retrieve it again.
	if updateResponse.Model != nil && updateResponse.Model.Properties != nil {
		if updateResponse.Model.Properties.Extensions != nil {
			extensionsStatusFromBackend = *updateResponse.Model.Properties.Extensions
		}
	}

	if requiredAdditionalUpdate {
		extensions := expandSecurityCenterSubscriptionPricingExtensions(realCfgExtensions, &extensionsStatusFromBackend)
		update.Properties.Extensions = extensions
		_, err := client.Update(ctx, *id, update)
		if err != nil {
			return fmt.Errorf("updating %s: %+v", id, err)
		}
	}

	d.SetId(id.ID())
	return resourceSecurityCenterSubscriptionPricingRead(d, meta)
}
