package github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security" // nolint: staticcheck
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceSecurityCenterAutoProvisioningCreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.AutoProvisioningClient
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	// No need for import check as there's always single resource called 'default'
	// - it cannot be deleted, all this does is set a string property to: "on" or "off"

	// Build settings struct with auto_provision value
	settings := security.AutoProvisioningSetting{
		AutoProvisioningSettingProperties: &security.AutoProvisioningSettingProperties{
			AutoProvision: security.AutoProvision(d.Get("auto_provision").(string)),
		},
	}

	// NOTE: 'default' is the only valid name currently supported by the API
	// No other names can be created and the 'default' resource can not be destroyed
	id := parse.NewAutoProvisioningSettingID(subscriptionId, "default")

	// There is no update function or operation in the API, only create
	if _, err := client.Create(ctx, id.Name, settings); err != nil {
		return fmt.Errorf("updating auto-provisioning setting for %s: %+v", id, err)
	}

	d.SetId(id.ID())
	return resourceSecurityCenterAutoProvisioningRead(d, meta)
}
