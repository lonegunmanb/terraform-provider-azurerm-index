package github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter
import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security" // nolint: staticcheck
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/migration"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceSecurityCenterAutoProvisioningDelete(d *pluginsdk.ResourceData, meta interface{}) error {
	// The API has no delete operation
	// Instead we reset back to 'Off' which is the default

	client := meta.(*clients.Client).SecurityCenter.AutoProvisioningClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.AutoProvisioningSettingID(d.Id())
	if err != nil {
		return err
	}

	settings := security.AutoProvisioningSetting{
		AutoProvisioningSettingProperties: &security.AutoProvisioningSettingProperties{
			AutoProvision: security.AutoProvisionOff,
		},
	}

	// There is no update function or operation in the API, only create
	if _, err := client.Create(ctx, id.Name, settings); err != nil {
		return fmt.Errorf("resetting Security Center auto provisioning to 'Off': %+v", err)
	}

	return nil
}
