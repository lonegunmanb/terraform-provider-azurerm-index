package github.com/hashicorp/terraform-provider-azurerm/internal/services/servicefabric
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicefabric/2021-06-01/cluster"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	serviceFabricValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/servicefabric/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func expandServiceFabricClusterNodeTypes(input []interface{}) []cluster.NodeTypeDescription {
	results := make([]cluster.NodeTypeDescription, 0)

	for _, v := range input {
		node := v.(map[string]interface{})

		durabilityLevel := cluster.DurabilityLevel(node["durability_level"].(string))

		result := cluster.NodeTypeDescription{
			Name:                         node["name"].(string),
			VMInstanceCount:              int64(node["instance_count"].(int)),
			IsPrimary:                    node["is_primary"].(bool),
			ClientConnectionEndpointPort: int64(node["client_endpoint_port"].(int)),
			HTTPGatewayEndpointPort:      int64(node["http_endpoint_port"].(int)),
			DurabilityLevel:              &durabilityLevel,
		}

		if isStateless, ok := node["is_stateless"]; ok {
			result.IsStateless = utils.Bool(isStateless.(bool))
		}

		if multipleAvailabilityZones, ok := node["multiple_availability_zones"]; ok {
			result.MultipleAvailabilityZones = utils.Bool(multipleAvailabilityZones.(bool))
		}

		if props, ok := node["placement_properties"]; ok {
			placementProperties := make(map[string]string)
			for key, value := range props.(map[string]interface{}) {
				placementProperties[key] = value.(string)
			}

			result.PlacementProperties = &placementProperties
		}

		if caps, ok := node["capacities"]; ok {
			capacities := make(map[string]string)
			for key, value := range caps.(map[string]interface{}) {
				capacities[key] = value.(string)
			}

			result.Capacities = &capacities
		}

		if v := int64(node["reverse_proxy_endpoint_port"].(int)); v != 0 {
			result.ReverseProxyEndpointPort = utils.Int64(v)
		}

		applicationPortsRaw := node["application_ports"].([]interface{})
		if len(applicationPortsRaw) > 0 {
			portsRaw := applicationPortsRaw[0].(map[string]interface{})

			result.ApplicationPorts = &cluster.EndpointRangeDescription{
				StartPort: int64(portsRaw["start_port"].(int)),
				EndPort:   int64(portsRaw["end_port"].(int)),
			}
		}

		ephemeralPortsRaw := node["ephemeral_ports"].([]interface{})
		if len(ephemeralPortsRaw) > 0 {
			portsRaw := ephemeralPortsRaw[0].(map[string]interface{})

			result.EphemeralPorts = &cluster.EndpointRangeDescription{
				StartPort: int64(portsRaw["start_port"].(int)),
				EndPort:   int64(portsRaw["end_port"].(int)),
			}
		}

		results = append(results, result)
	}

	return results
}
