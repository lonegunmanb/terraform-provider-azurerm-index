package github.com/hashicorp/terraform-provider-azurerm/internal/services/servicefabric
import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicefabric/2021-06-01/cluster"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	serviceFabricValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/servicefabric/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)
func resourceServiceFabricClusterRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).ServiceFabric.ClustersClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := cluster.ParseClusterID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, *id)
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[WARN] %s was not found - removing from state!", id.ID())
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", id.ID(), err)
	}

	d.Set("name", id.ClusterName)
	d.Set("resource_group_name", id.ResourceGroupName)

	if model := resp.Model; model != nil {
		d.Set("location", location.Normalize(model.Location))

		if props := model.Properties; props != nil {
			d.Set("cluster_code_version", props.ClusterCodeVersion)
			d.Set("cluster_endpoint", props.ClusterEndpoint)
			d.Set("management_endpoint", props.ManagementEndpoint)
			d.Set("vm_image", props.VmImage)

			reliabilityLevel := ""
			if props.ReliabilityLevel != nil {
				reliabilityLevel = string(*props.ReliabilityLevel)
			}
			d.Set("reliability_level", reliabilityLevel)

			upgradeMode := ""
			if props.UpgradeMode != nil {
				upgradeMode = string(*props.UpgradeMode)
			}
			d.Set("upgrade_mode", upgradeMode)

			sfZonalMode := ""
			if props.SfZonalUpgradeMode != nil {
				sfZonalMode = string(*props.SfZonalUpgradeMode)
			}
			d.Set("service_fabric_zonal_upgrade_mode", sfZonalMode)

			vmssZonalMode := ""
			if props.VMSSZonalUpgradeMode != nil {
				vmssZonalMode = string(*props.VMSSZonalUpgradeMode)
			}
			d.Set("vmss_zonal_upgrade_mode", vmssZonalMode)

			addOnFeatures := flattenServiceFabricClusterAddOnFeatures(props.AddOnFeatures)
			if err := d.Set("add_on_features", pluginsdk.NewSet(pluginsdk.HashString, addOnFeatures)); err != nil {
				return fmt.Errorf("setting `add_on_features`: %+v", err)
			}

			azureActiveDirectory := flattenServiceFabricClusterAzureActiveDirectory(props.AzureActiveDirectory)
			if err := d.Set("azure_active_directory", azureActiveDirectory); err != nil {
				return fmt.Errorf("setting `azure_active_directory`: %+v", err)
			}

			certificate := flattenServiceFabricClusterCertificate(props.Certificate)
			if err := d.Set("certificate", certificate); err != nil {
				return fmt.Errorf("setting `certificate`: %+v", err)
			}

			certificateCommonNames := flattenServiceFabricClusterCertificateCommonNames(props.CertificateCommonNames)
			if err := d.Set("certificate_common_names", certificateCommonNames); err != nil {
				return fmt.Errorf("setting `certificate_common_names`: %+v", err)
			}

			reverseProxyCertificate := flattenServiceFabricClusterReverseProxyCertificate(props.ReverseProxyCertificate)
			if err := d.Set("reverse_proxy_certificate", reverseProxyCertificate); err != nil {
				return fmt.Errorf("setting `reverse_proxy_certificate`: %+v", err)
			}

			reverseProxyCertificateCommonNames := flattenServiceFabricClusterCertificateCommonNames(props.ReverseProxyCertificateCommonNames)
			if err := d.Set("reverse_proxy_certificate_common_names", reverseProxyCertificateCommonNames); err != nil {
				return fmt.Errorf("setting `reverse_proxy_certificate_common_names`: %+v", err)
			}

			clientCertificateThumbprints := flattenServiceFabricClusterClientCertificateThumbprints(props.ClientCertificateThumbprints)
			if err := d.Set("client_certificate_thumbprint", clientCertificateThumbprints); err != nil {
				return fmt.Errorf("setting `client_certificate_thumbprint`: %+v", err)
			}

			clientCertificateCommonNames := flattenServiceFabricClusterClientCertificateCommonNames(props.ClientCertificateCommonNames)
			if err := d.Set("client_certificate_common_name", clientCertificateCommonNames); err != nil {
				return fmt.Errorf("setting `client_certificate_common_name`: %+v", err)
			}

			diagnostics := flattenServiceFabricClusterDiagnosticsConfig(props.DiagnosticsStorageAccountConfig)
			if err := d.Set("diagnostics_config", diagnostics); err != nil {
				return fmt.Errorf("setting `diagnostics_config`: %+v", err)
			}

			upgradePolicy := flattenServiceFabricClusterUpgradePolicy(props.UpgradeDescription)
			if err := d.Set("upgrade_policy", upgradePolicy); err != nil {
				return fmt.Errorf("setting `upgrade_policy`: %+v", err)
			}

			fabricSettings := flattenServiceFabricClusterFabricSettings(props.FabricSettings)
			if err := d.Set("fabric_settings", fabricSettings); err != nil {
				return fmt.Errorf("setting `fabric_settings`: %+v", err)
			}

			nodeTypes := flattenServiceFabricClusterNodeTypes(props.NodeTypes)
			if err := d.Set("node_type", nodeTypes); err != nil {
				return fmt.Errorf("setting `node_type`: %+v", err)
			}
		}

		return tags.FlattenAndSet(d, model.Tags)
	}

	return nil
}
