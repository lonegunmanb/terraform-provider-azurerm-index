package github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders
import (
	"context"
	"errors"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2022-09-01/providers"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders/custompollers"
)
func registerForSubscription(ctx context.Context, client *providers.ProvidersClient, subscriptionId commonids.SubscriptionId, providersToRegister []string) error {
	errs := &registrationErrors{}
	var wg sync.WaitGroup
	wg.Add(len(providersToRegister))

	for _, providerName := range providersToRegister {
		go func(p string) {
			defer wg.Done()
			log.Printf("[DEBUG] Registering Resource Provider %q with namespace", p)
			if err := registerWithSubscription(ctx, client, subscriptionId, p); err != nil {
				errs.append(err)
			}
		}(providerName)
	}

	wg.Wait()

	if errs.hasErr() {
		return errs
	}

	return nil
}
