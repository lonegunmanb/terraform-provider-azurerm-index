package github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders
import (
	"context"
	"fmt"
	"strings"
	"sync"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2022-09-01/providers"
)
func populateCache(ctx context.Context, client *providers.ProvidersClient, subscriptionId commonids.SubscriptionId) error {
	cacheLock.Lock()
	defer cacheLock.Unlock()

	providers, err := client.ListComplete(ctx, subscriptionId, providers.DefaultListOperationOptions())
	if err != nil {
		return fmt.Errorf("listing Resource Providers: %+v", err)
	}

	providerNames := make([]string, 0)
	registeredResourceProviders = make(map[string]struct{})
	unregisteredResourceProviders = make(map[string]struct{})
	for _, provider := range providers.Items {
		if provider.Namespace == nil {
			continue
		}

		providerNames = append(providerNames, *provider.Namespace)
		registered := provider.RegistrationState != nil && strings.EqualFold(*provider.RegistrationState, "registered")
		if registered {
			registeredResourceProviders[*provider.Namespace] = struct{}{}
		} else {
			unregisteredResourceProviders[*provider.Namespace] = struct{}{}
		}
	}

	cachedResourceProviders = &providerNames
	return nil
}
