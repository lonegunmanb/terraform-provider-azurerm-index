package github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders
import (
	"context"
	"errors"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/go-azure-sdk/resource-manager/resources/2022-09-01/providers"
	"github.com/hashicorp/go-azure-sdk/sdk/client/pollers"
	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
	"github.com/hashicorp/terraform-provider-azurerm/internal/resourceproviders/custompollers"
)
func EnsureRegistered(ctx context.Context, client *providers.ProvidersClient, subscriptionId commonids.SubscriptionId, requiredRPs ResourceProviders) error {
	// Cache supported resource providers if RP registration and enhanced validation are not both disabled
	if len(requiredRPs) == 0 && !features.EnhancedValidationEnabled() {
		log.Printf("[DEBUG] Skipping populating the resource provider cache, since resource provider registration and enhanced validation are both disabled")
		return nil
	}

	if cachedResourceProviders == nil || registeredResourceProviders == nil || unregisteredResourceProviders == nil {
		if err := populateCache(ctx, client, subscriptionId); err != nil {
			return fmt.Errorf("populating Resource Provider cache: %+v", err)
		}
	}

	log.Printf("[DEBUG] Determining which Resource Providers require Registration")
	providersToRegister, err := DetermineWhichRequiredResourceProvidersRequireRegistration(requiredRPs)
	if err != nil {
		return fmt.Errorf("determining which Resource Providers require registration: %+v", err)
	}

	if len(*providersToRegister) == 0 {
		log.Printf("[DEBUG] All required Resource Providers are registered")
		return nil
	}

	log.Printf("[DEBUG] Registering %d Resource Providers", len(*providersToRegister))
	if err = registerForSubscription(ctx, client, subscriptionId, *providersToRegister); err != nil {
		return userError(err)
	}

	return nil
}
