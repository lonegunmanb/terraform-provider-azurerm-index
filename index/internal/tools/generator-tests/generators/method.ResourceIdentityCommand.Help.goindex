package github.com/hashicorp/terraform-provider-azurerm/internal/tools/generator-tests/generators
import (
	"flag"
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/hashicorp/terraform-provider-azurerm/internal/tools/generator-tests/helpers"
	"github.com/mitchellh/cli"
)
func (c *ResourceIdentityCommand) Help() string {
	return `
Usage: generate-resource-identity [args]
Required args:
	- resource-name [string]
		the name of the resource to generate the Resource Identity test for, the 'azurerm_' prefix is not required.
	- properties [string]
		the schema exposed properties that make up the Resource Identity values. e.g. -properties "resource_group_name, site_name". ID properties that are not part of the schema, such as 'subscription_id', should not be included here.
		If the schema property name does not match the corresponding value in the ID, these should be specified together as [id_name]:[schema_name]
	- service-package-name [string]
		the name of the Service Package the resource belongs to. This forms part of the output path for the generated file.

Optional args:
	- test-params [string]
		'test-params' specifies any additional parameters that need to be passed to the 'basic' config for the resource type. e.g. '-test-params blah' == r.basic(data, "blah")
	- known-values [string]
		'known-values' specifies discriminated values that are not exposed in the schema. This is used to differentiate between resources that use the same ID type, but are discrete resources in the provider. e.g. azurerm_windows_web_app and azurerm_linux_web_app
		If the value for a 'known-value' is a CSV, replace the comma with a semi-colon to allow the parser to replace it for you. (see below for a full example)
	- compare-values [string]
		'compare-values' specifies resource identity values that do not have a one to one relationship with any values in the schema or state (i.e. the schema references a parent resource id but the resource identity includes the pieces of that parent resource id).
	- test-name [string]
		'test-name' specifies the test config name that will be used to test Resource Identity. Defaults to 'basic'.

Example:
generate-resource-identity -resource-name some_azure_resource -properties "resource_group_name,some_property" -test-params "customSku" -known-values "subscription_id:data.Subscriptions.Primary,kind:someApp;linux" -compare-values "parent_resource_name:parent_resource_id,resource_group_name:parent_resource_id"

Caveats and TODOs:
requires that the basic test for the resource is already present and has the name 'basic' for the config. TODO - Can be extended to make this configurable.
Expects that the test resource type is already declared in the test package for the service. (e.g. type LinuxFunctionAppResource struct{})
`
}
