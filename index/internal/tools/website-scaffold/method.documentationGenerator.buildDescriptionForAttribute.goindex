package github.com/hashicorp/terraform-provider-azurerm/internal/tools/main
import (
	"flag"
	"fmt"
	"log"
	"math"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/provider"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/magodo/terraform-provider-azurerm-example-gen/examplegen"
)
func (gen documentationGenerator) buildDescriptionForAttribute(name string, field *schema.Schema, blockName string) string {
	if name == "name" {
		if blockName == "" {
			return fmt.Sprintf("The name of this %s.", gen.brandName)
		} else {
			return "The name of this TODO."
		}
	}
	if name == "location" {
		return fmt.Sprintf("The Azure Region where the %s exists.", gen.brandName)
	}
	if name == "resource_group_name" {
		return fmt.Sprintf("The name of the Resource Group where the %s is located.", gen.brandName)
	}
	if name == "tags" {
		return fmt.Sprintf("A mapping of tags assigned to the %s.", gen.brandName)
	}

	if name == "enabled" || strings.HasSuffix(name, "_enabled") {
		return "Is the TODO enabled?"
	}

	if strings.HasSuffix(name, "_id") {
		return "The ID of the TODO."
	}

	if field.Elem != nil {
		if _, ok := field.Elem.(*schema.Schema); ok {
			if gen.blockIsBefore(name, blockName) {
				return fmt.Sprintf("A `%s` block as defined above.", name)
			} else {
				return fmt.Sprintf("A `%s` block as defined below.", name)
			}
		}

		if _, ok := field.Elem.(*schema.Resource); ok {
			if gen.blockIsBefore(name, blockName) {
				return fmt.Sprintf("A `%s` block as defined above.", name)
			} else {
				return fmt.Sprintf("A `%s` block as defined below.", name)
			}
		}
	}
	if field.Type == schema.TypeList {
		if gen.blockIsBefore(name, blockName) {
			return fmt.Sprintf("A `%s` block as defined above.", name)
		} else {
			return fmt.Sprintf("A `%s` block as defined below.", name)
		}
	}

	return "TODO."
}
