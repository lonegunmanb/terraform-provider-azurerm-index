package github.com/hashicorp/terraform-provider-azurerm/internal/tools/document-fmt/rule
import (
	"fmt"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-provider-azurerm/internal/tools/document-fmt/data"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tools/document-fmt/differror"
)
func (r G002) Run(data *data.TerraformNodeData, fix bool) []error {
	errs := make([]error, 0)

	for _, section := range data.Document.Sections {
		content := section.GetContent()
		for idx, line := range content {
			if partialNoteRegex.MatchString(line) {
				n := parseNote(line)

				if n == nil {
					errs = append(errs, fmt.Errorf("%s: Unable to parse note: `%s`", IdAndName(r), line))
					continue
				}

				// If we encounter a markdown note, default to an informational note.
				if n.level == ">" {
					n.level = "->"
				}

				current := line
				expected := note{
					level:  n.level,
					prefix: "Note:",
					text:   n.text,
				}.string()

				if current != expected {
					errs = append(errs, differror.New(fmt.Sprintf("%s: Note not in expected format", IdAndName(r)), current, expected))

					if fix {
						data.Document.HasChange = true
						content[idx] = expected
					}
				}
			}
		}

		if fix && data.Document.HasChange {
			section.SetContent(content)
		}
	}

	return errs
}
