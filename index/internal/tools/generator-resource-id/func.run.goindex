package github.com/hashicorp/terraform-provider-azurerm/internal/tools/main
import (
	"flag"
	"fmt"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"regexp"
	"sort"
	"strings"
	"unicode"

	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
)
func run(servicePackagePath, name, id string, shouldRewrite bool) error {
	servicePackage, err := parseServicePackageName(servicePackagePath)
	if err != nil {
		return fmt.Errorf("determining Service Package Name for %q: %+v", servicePackagePath, err)
	}

	parsersPath := path.Join(servicePackagePath, "/parse")
	if err := os.Mkdir(parsersPath, 0o755); err != nil && !os.IsExist(err) {
		return fmt.Errorf("creating parse directory at %q: %+v", parsersPath, err)
	}

	validatorPath := path.Join(servicePackagePath, "/validate")
	if err := os.Mkdir(validatorPath, 0o755); err != nil && !os.IsExist(err) {
		return fmt.Errorf("creating validate directory at %q: %+v", validatorPath, err)
	}

	fileName := convertToSnakeCase(name)
	validatorFileName := fmt.Sprintf("%s_id", fileName)
	if strings.HasSuffix(fileName, "_test") {
		// e.g. "webtest" in applicationInsights
		fileName += "_id"
	}
	resourceId, err := NewResourceID(name, *servicePackage, id)
	if err != nil {
		return err
	}

	generator := ResourceIdGenerator{
		ResourceId:    *resourceId,
		ShouldRewrite: shouldRewrite,
	}

	parserFilePath := fmt.Sprintf("%s/%s.go", parsersPath, fileName)
	if err := goFmtAndWriteToFile(parserFilePath, generator.Code()); err != nil {
		return fmt.Errorf("generating Parser at %q: %+v", parserFilePath, err)
	}

	parserTestsFilePath := fmt.Sprintf("%s/%s_test.go", parsersPath, fileName)
	if err := goFmtAndWriteToFile(parserTestsFilePath, generator.TestCode()); err != nil {
		return fmt.Errorf("generating Parser Tests at %q: %+v", parserTestsFilePath, err)
	}

	validatorFilePath := fmt.Sprintf("%s/%s.go", validatorPath, validatorFileName)
	if err := goFmtAndWriteToFile(validatorFilePath, generator.ValidatorCode()); err != nil {
		return fmt.Errorf("generating Validator at %q: %+v", validatorFilePath, err)
	}

	validatorTestsFilePath := fmt.Sprintf("%s/%s_test.go", validatorPath, validatorFileName)
	if err := goFmtAndWriteToFile(validatorTestsFilePath, generator.ValidatorTestCode()); err != nil {
		return fmt.Errorf("generating Validator Tests at %q: %+v", validatorTestsFilePath, err)
	}

	return nil
}
