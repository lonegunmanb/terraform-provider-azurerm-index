package github.com/hashicorp/terraform-provider-azurerm/internal/tools/static-analysis/rules
import (
	"fmt"
	"reflect"

	"github.com/hashicorp/terraform-provider-azurerm/internal/provider"
)
func checkForBits(model reflect.Type) (errors []error) {
	for i := 0; i < model.NumField(); i++ {
		switch t := model.Field(i).Type; t.Kind() {
		case reflect.Int, reflect.Int16, reflect.Int32:
			errors = append(errors, fmt.Errorf("property %s in model %s should be type int64, got `%s`", model.Field(i).Name, model.Name(), t.String()))
		case reflect.Float32:
			errors = append(errors, fmt.Errorf("property %s in model %s should be type float64, got `%s`", model.Field(i).Name, model.Name(), t.String()))
		case reflect.Slice, reflect.Array:
			switch t.Elem().Kind() {
			case reflect.Struct:
				errors = append(errors, checkForBits(t.Elem())...)

			case reflect.Int, reflect.Int16, reflect.Int32:
				errors = append(errors, fmt.Errorf("property %s in model %s should be type []int64, got `%s`", model.Field(i).Name, model.Name(), t.String()))

			case reflect.Float32:
				errors = append(errors, fmt.Errorf("property %s in model %s should be type []float64, got `%s`", model.Field(i).Name, model.Name(), t.String()))
			default:
			}

		default:
		}
	}
	return
}
