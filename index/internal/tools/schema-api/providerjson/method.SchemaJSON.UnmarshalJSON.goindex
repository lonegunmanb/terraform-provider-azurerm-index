package github.com/hashicorp/terraform-provider-azurerm/internal/tools/schema-api/providerjson
import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azurerm/internal/provider"
)
func (b *SchemaJSON) UnmarshalJSON(body []byte) error {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	b.Type, _ = m["type"].(string)
	b.ConfigMode, _ = m["configMode"].(string)
	b.Optional, _ = m["optional"].(bool)
	b.Required, _ = m["required"].(bool)
	b.Description, _ = m["description"].(string)
	b.Computed, _ = m["computed"].(bool)
	b.ForceNew, _ = m["forceNew"].(bool)
	if max, ok := m["maxItems"].(float64); ok {
		b.MaxItems = int(max)
	}
	if min, ok := m["minItems"].(float64); ok {
		b.MaxItems = int(min)
	}

	if def, ok := m["default"]; ok && def != nil {
		switch def.(type) {
		case string:
			b.Default = def
		case bool:
			b.Default = def
		case int:
			b.Default = def
		case float32:
			b.Default = def
		case float64:
			b.Default = def
		}
	}

	if e, ok := m["elem"]; ok && e != nil {
		elem := e.(map[string]interface{})
		if schema, ok := elem["schema"]; ok {
			b.Elem = ResourceFromMap(schema.(map[string]interface{}))
		}
		if t, ok := elem["type"]; ok {
			b.Elem = t.(string)
		}
	}

	return nil
}
