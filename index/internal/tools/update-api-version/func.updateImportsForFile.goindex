package github.com/hashicorp/terraform-provider-azurerm/internal/tools/main
import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io/fs"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/hashicorp/go-hclog"
	"golang.org/x/tools/go/ast/astutil"
)
func updateImportsForFile(fileSet *token.FileSet, file *ast.File, serviceName string, oldApiVersion string, newApiVersion string) {
	importLineForPreviousApiVersion := fmt.Sprintf("github.com/hashicorp/go-azure-sdk/resource-manager/%s/%s", serviceName, oldApiVersion)
	importLineForNewApiVersion := fmt.Sprintf("github.com/hashicorp/go-azure-sdk/resource-manager/%s/%s", serviceName, newApiVersion)

	// first update the imports themselves
	existingImports := astutil.Imports(fileSet, file)
	aliasesToReplace := make(map[string]string, 0)
	for _, val := range existingImports {
		for _, item := range val {
			logger.Debug(fmt.Sprintf("Processing Import %q", item.Path.Value))
			existingImportLine := item.Path.Value
			if !strings.Contains(existingImportLine, importLineForPreviousApiVersion) {
				continue
			}

			updatedImportLine := strings.Replace(existingImportLine, importLineForPreviousApiVersion, importLineForNewApiVersion, 1)
			logger.Debug(fmt.Sprintf("Updating Import URI from %q to %q", existingImportLine, updatedImportLine))
			item.Path.Value = updatedImportLine

			// if we're importing the meta client (e.g. the api version directly) then we also need to update the alias
			importsMetaClient := strings.ReplaceAll(existingImportLine, "\"", "") == importLineForPreviousApiVersion
			if importsMetaClient && item.Name != nil {
				if existingAlias := item.Name.Name; existingAlias != "" {
					updatedAlias := strings.ToLower(fmt.Sprintf("%s_%s", serviceName, strings.ReplaceAll(newApiVersion, "-", "_")))

					logger.Debug(fmt.Sprintf("Updating Import Alias from %q to %q", existingAlias, updatedAlias))
					aliasesToReplace[existingAlias] = updatedAlias
					item.Name.Name = updatedAlias
				}
			}

			// finally, remove any comments which will be stragglers/lintignores which shouldn't be present
			if item.Comment != nil {
				item.Comment.List = []*ast.Comment{}
			}
		}
	}

	// then update any references to the aliases we've updated
	ast.Inspect(file, func(n ast.Node) bool {
		v, ok := n.(*ast.Ident)
		if ok {
			for alias, replacement := range aliasesToReplace {
				if v.Name == alias {
					v.Name = replacement
				}
			}
		}

		return true
	})
}
